name: üîí Security Scan

on:
  workflow_call:

jobs:
  codeql-analysis:
    name: üîç CodeQL Security
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    # –î–û–î–ê–ô–¢–ï STRATEGY MATRIX
    strategy:
      fail-fast: false
      matrix:
        language: ['javascript-typescript', 'python']
    
    steps:
      - uses: actions/checkout@v4
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended, security-experimental
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  # –†–µ—à—Ç–∞ jobs –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω
  ai-security-scan:
    name: üß† AI Security Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: AI-powered security scan
        run: |
          echo "üîç Running AI security analysis..."
          # Check for hardcoded secrets with patterns
          grep -r "password\|secret\|key\|token" backend/src/ frontend/src/ \
            --include="*.py" --include="*.ts" --include="*.tsx" --include="*.env*" | \
            grep -v "test" | grep -v "example" | head -10 || echo "‚úÖ No obvious secrets found"

  dependency-scan:
    name: üì¶ Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Scan Python dependencies
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
      - name: Scan Node.js dependencies
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  secret-scan:
    name: üö® Secret Detection
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Detect secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.base_ref }}
          head: ${{ github.head_ref }}

  container-scan:
    name: üê≥ Container Security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: docker build -t saas-lawyer:test -f backend/Dockerfile.dev .
      - name: Scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: saas-lawyer:test
          format: sarif
          output: trivy-results.sarif
      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif