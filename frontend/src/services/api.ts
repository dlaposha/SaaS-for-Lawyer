import axios from 'axios';

// –ë–∞–∑–æ–≤–∏–π URL –¥–ª—è API
const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:8000';

console.log('üîß API Configuration:', {
  VITE_API_URL: import.meta.env.VITE_API_URL,
  API_BASE_URL,
  NODE_ENV: import.meta.env.MODE
});

// –¢–∏–ø–∏ –¥–ª—è API
export interface ApiResponse<T = any> {
  data: T;
  status: number;
  message?: string;
}

export interface PaginatedResponse<T> {
  items: T[];
  total: number;
  page: number;
  size: number;
  pages: number;
}

export interface PaginationParams {
  page: number;
  limit: number;
  search?: string;
  sortBy?: string;
  sortOrder?: 'asc' | 'desc';
}

// –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä axios
const api = axios.create({
  baseURL: `${API_BASE_URL}/api/v1`,
  timeout: 15000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Interceptor –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –¥–æ –∑–∞–ø–∏—Ç—ñ–≤
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('authToken');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    
    // –î–æ–¥–∞—î–º–æ timestamp –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –∫–µ—à—É–≤–∞–Ω–Ω—è
    if (config.method === 'get' && config.params) {
      config.params._t = Date.now();
    }
    
    console.log(`üîÑ API Request: ${config.method?.toUpperCase()} ${config.url}`);
    return config;
  },
  (error) => {
    console.error('‚ùå Request interceptor error:', error);
    return Promise.reject(error);
  }
);

// Interceptor –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫
api.interceptors.response.use(
  (response) => {
    console.log(`‚úÖ API Success: ${response.status} ${response.config.url}`);
    return response;
  },
  async (error) => {
    const originalRequest = error.config;

    console.error('‚ùå API Error:', {
      url: error.config?.url,
      method: error.config?.method,
      status: error.response?.status,
      code: error.code,
      message: error.message
    });

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ 401 –ø–æ–º–∏–ª—Ü—ñ
    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;
      
      try {
        const refreshToken = localStorage.getItem('refreshToken');
        if (refreshToken) {
          console.log('üîÑ Attempting token refresh...');
          const response = await api.post('/auth/refresh', {
            refresh_token: refreshToken,
          });
          
          const { access_token } = response.data;
          localStorage.setItem('authToken', access_token);
          
          // –ü–æ–≤—Ç–æ—Ä—é—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç –∑ –Ω–æ–≤–∏–º —Ç–æ–∫–µ–Ω–æ–º
          originalRequest.headers.Authorization = `Bearer ${access_token}`;
          return api(originalRequest);
        }
      } catch (refreshError) {
        console.error('‚ùå Token refresh failed:', refreshError);
        // –Ø–∫—â–æ refresh –Ω–µ –≤–¥–∞–≤—Å—è, –≤–∏—Ö–æ–¥–∏–º–æ
        localStorage.removeItem('authToken');
        localStorage.removeItem('refreshToken');
        localStorage.removeItem('user');
        window.location.href = '/login';
        return Promise.reject(refreshError);
      }
    }
    
    // –û–±—Ä–æ–±–∫–∞ –º–µ—Ä–µ–∂–µ–≤–∏—Ö –ø–æ–º–∏–ª–æ–∫ –¥–ª—è –¥–µ–º–æ-—Ä–µ–∂–∏–º—É
    if (error.code === 'ERR_NETWORK' || error.code === 'ERR_NAME_NOT_RESOLVED') {
      console.log('üåê Network error - enabling demo mode fallback');
      // –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ—ñ–∫—Ç–∏–≤–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –¥–µ–º–æ-—Ä–µ–∂–∏–º—É
      return Promise.resolve({ 
        data: { 
          _demo: true,
          message: 'Demo mode - network unavailable'
        },
        status: 200,
        statusText: 'OK',
        config: error.config,
        headers: {}
      });
    }
    
    // –û–±—Ä–æ–±–∫–∞ —ñ–Ω—à–∏—Ö –ø–æ–º–∏–ª–æ–∫
    if (error.response) {
      const { status, data } = error.response;
      
      const errorMessage = data?.detail || 
        data?.message ||
        (status === 400 ? '–ù–µ–≤—ñ—Ä–Ω–∏–π –∑–∞–ø–∏—Ç' :
        status === 401 ? '–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –¥–æ—Å—Ç—É–ø' :
        status === 403 ? '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ' :
        status === 404 ? '–†–µ—Å—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' :
        status === 409 ? '–ö–æ–Ω—Ñ–ª—ñ–∫—Ç –¥–∞–Ω–∏—Ö' :
        status === 422 ? '–ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ' :
        status === 429 ? '–ó–∞–±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤' :
        status === 500 ? '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' :
        status === 502 ? '–ü–æ–º–∏–ª–∫–∞ —à–ª—é–∑—É' :
        status === 503 ? '–°–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π' :
        '–°—Ç–∞–ª–∞—Å—è –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞');
      
      console.error(`API Error ${status}:`, errorMessage);
      
      // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫—É —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∫–ª—ñ—î–Ω—Ç—Å—å–∫–∏—Ö –ø–æ–º–∏–ª–æ–∫
      if (status >= 400 && status < 500 && status !== 401 && !originalRequest?.silent) {
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ alert —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫
        if (status === 403 || status === 429) {
          alert(errorMessage);
        }
      }
    }
    
    return Promise.reject(error);
  }
);

// API —Å–µ—Ä–≤—ñ—Å –∑ –º–µ—Ç–æ–¥–∞–º–∏, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å data –Ω–∞–ø—Ä—è–º—É
export const apiService = {
  get: <T>(url: string, config?: any): Promise<T> =>
    api.get(url, config).then(response => {
      if (response.data?._demo) {
        throw new Error('NETWORK_UNAVAILABLE');
      }
      return response.data;
    }),

  post: <T>(url: string, data?: any, config?: any): Promise<T> =>
    api.post(url, data, config).then(response => {
      if (response.data?._demo) {
        throw new Error('NETWORK_UNAVAILABLE');
      }
      return response.data;
    }),

  put: <T>(url: string, data?: any, config?: any): Promise<T> =>
    api.put(url, data, config).then(response => {
      if (response.data?._demo) {
        throw new Error('NETWORK_UNAVAILABLE');
      }
      return response.data;
    }),

  patch: <T>(url: string, data?: any, config?: any): Promise<T> =>
    api.patch(url, data, config).then(response => {
      if (response.data?._demo) {
        throw new Error('NETWORK_UNAVAILABLE');
      }
      return response.data;
    }),

  delete: <T>(url: string, config?: any): Promise<T> =>
    api.delete(url, config).then(response => {
      if (response.data?._demo) {
        throw new Error('NETWORK_UNAVAILABLE');
      }
      return response.data;
    }),

  // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
  upload: <T>(url: string, formData: FormData, config?: any): Promise<T> =>
    api.post(url, formData, {
      ...config,
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    }).then(response => {
      if (response.data?._demo) {
        throw new Error('NETWORK_UNAVAILABLE');
      }
      return response.data;
    }),

  download: (url: string, config?: any): Promise<Blob> =>
    api.get(url, {
      ...config,
      responseType: 'blob',
    }).then(response => response.data),
};

// –†–æ–∑—à–∏—Ä–µ–Ω—ñ –¥–µ–º–æ-—Ñ—É–Ω–∫—Ü—ñ—ó
export const demoApi = {
  // –ó–∞–≥–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —ñ–º—ñ—Ç–∞—Ü—ñ—ó –∑–∞—Ç—Ä–∏–º–∫–∏
  delay: (ms: number = 500) => new Promise(resolve => setTimeout(resolve, ms)),

  getCases: async (): Promise<{ data: any[] }> => {
    await demoApi.delay(500);
    
    return {
      data: [
        {
          id: 1,
          case_number: 'CASE-001',
          title: '–¶–∏–≤—ñ–ª—å–Ω–∞ —Å–ø—Ä–∞–≤–∞ –ø—Ä–æ —Å—Ç—è–≥–Ω–µ–Ω–Ω—è –±–æ—Ä–≥—É',
          client_id: 1,
          client_name: '–ü–µ—Ç—Ä–µ–Ω–∫–æ –Ü–≤–∞–Ω',
          status: 'in_progress',
          stage: 'first_instance',
          due_date: '2025-10-15',
          hourly_rate: 1500,
          budget: 25000,
          description: '–°—Ç—è–≥–Ω–µ–Ω–Ω—è –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç—ñ –∑–∞ –¥–æ–≥–æ–≤–æ—Ä–æ–º –ø–æ–∑–∏–∫–∏',
          created_at: '2024-01-15T10:00:00Z',
          updated_at: '2024-01-15T10:00:00Z',
        },
        {
          id: 2,
          case_number: 'CASE-002',
          title: '–ö—Ä–∏–º—ñ–Ω–∞–ª—å–Ω–∞ —Å–ø—Ä–∞–≤–∞ –ø—Ä–æ —à–∞—Ö—Ä–∞–π—Å—Ç–≤–æ',
          client_id: 2,
          client_name: '–¢–û–í "–Æ—Ä–§—ñ—Ä–º–∞"',
          status: 'open',
          stage: 'pre_trial',
          due_date: '2025-11-20',
          hourly_rate: 2000,
          budget: 50000,
          description: '–ö—Ä–∏–º—ñ–Ω–∞–ª—å–Ω–µ –ø—Ä–æ–≤–∞–¥–∂–µ–Ω–Ω—è –∑–∞ —Ñ–∞–∫—Ç–æ–º —à–∞—Ö—Ä–∞–π—Å—Ç–≤–∞',
          created_at: '2024-01-16T10:00:00Z',
          updated_at: '2024-01-16T10:00:00Z',
        },
      ],
    };
  },

  getClients: async (): Promise<{ data: any[] }> => {
    await demoApi.delay(500);
    
    return {
      data: [
        {
          id: 1,
          type: 'person',
          name: '–ü–µ—Ç—Ä–µ–Ω–∫–æ –Ü–≤–∞–Ω –°–∏–¥–æ—Ä–æ–≤–∏—á',
          emails: ['ivan@example.com'],
          phones: ['+380501234567'],
          address: '–º. –ö–∏—ó–≤, –≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 1',
          kyc_status: 'verified',
          notes: '–ü–æ—Å—Ç—ñ–π–Ω–∏–π –∫–ª—ñ—î–Ω—Ç',
          created_at: '2024-01-15T10:00:00Z',
          updated_at: '2024-01-15T10:00:00Z',
        },
      ],
    };
  },

  getTasks: async (): Promise<{ data: any[] }> => {
    await demoApi.delay(300);
    
    return {
      data: [
        {
          id: 1,
          title: '–ü—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –ø–æ–∑–æ–≤–Ω—É –∑–∞—è–≤—É',
          description: '–ü—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –ø–æ–∑–æ–≤–Ω—É –∑–∞—è–≤—É –ø–æ —Å–ø—Ä–∞–≤—ñ CASE-001',
          priority: 'high',
          status: 'in_progress',
          due_date: '2024-02-01',
          assigned_to: '–î–º–∏—Ç—Ä–æ –õ–∞–ø–æ—à–∞',
          case_id: 1,
        },
      ],
    };
  },

  getInvoices: async (): Promise<{ data: any[] }> => {
    await demoApi.delay(400);
    
    return {
      data: [
        {
          id: 1,
          number: 'INV-2024-001',
          client_id: 1,
          client_name: '–ü–µ—Ç—Ä–µ–Ω–∫–æ –Ü–≤–∞–Ω –°–∏–¥–æ—Ä–æ–≤–∏—á',
          amount: 7500,
          status: 'paid',
          issue_date: '2024-01-20',
          due_date: '2024-02-20',
          description: '–ü–æ—Å–ª—É–≥–∏ –∑–∞ —Å—ñ—á–µ–Ω—å 2024',
        },
      ],
    };
  },
};

// –£—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ API
export const apiUtils = {
  // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è query string –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  buildQueryString: (params: Record<string, any>): string => {
    const searchParams = new URLSearchParams();
    
    Object.entries(params).forEach(([key, value]) => {
      if (value !== undefined && value !== null && value !== '') {
        if (Array.isArray(value)) {
          value.forEach(v => searchParams.append(key, v.toString()));
        } else {
          searchParams.append(key, value.toString());
        }
      }
    });
    
    return searchParams.toString();
  },

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ –¥–µ–º–æ-—Ä–µ–∂–∏–º
  isDemoMode: (): boolean => {
    const token = localStorage.getItem('authToken');
    return !token || token.startsWith('demo-token-');
  },

  // –û—á–∏—â–µ–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞
  clearAuthData: (): void => {
    localStorage.removeItem('authToken');
    localStorage.removeItem('refreshToken');
    localStorage.removeItem('user');
  },

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  getCurrentUser: () => {
    const userStr = localStorage.getItem('user');
    return userStr ? JSON.parse(userStr) : null;
  }
};

export default api;