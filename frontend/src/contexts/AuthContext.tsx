import React, { createContext, useContext, useState, useEffect, ReactNode, useCallback } from 'react';
import { App } from 'antd';
import { authService, User, LoginCredentials, RegisterData } from '../services/auth';
import { i18nUtils } from '../i18n';

interface AuthContextType {
  isAuthenticated: boolean;
  isLoading: boolean;
  user: User | null;
  isDemoMode: boolean;
  login: (credentials: LoginCredentials) => Promise<void>;
  register: (userData: RegisterData) => Promise<void>;
  logout: () => Promise<void>;
  refreshUser: () => Promise<void>;
  updateUserProfile: (userData: Partial<User>) => void;
  checkApiHealth: () => Promise<{ status: 'online' | 'offline' | 'error'; demoMode: boolean }>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

// –•—É–∫ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó i18n
const useI18nReady = () => {
  const [isReady, setIsReady] = useState(false);

  useEffect(() => {
    const checkI18n = () => {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ i18n –ø–æ–≤–Ω—ñ—Å—Ç—é —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π
      if (i18nUtils.getCurrentLanguage()) {
        setIsReady(true);
        console.log('‚úÖ i18n is ready for auth initialization');
      } else {
        // –ß–µ–∫–∞—î–º–æ —Ç—Ä–æ—Ö–∏ —ñ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–Ω–æ–≤—É
        setTimeout(checkI18n, 50);
      }
    };

    // –ü–æ—á–∞—Ç–∫–æ–≤–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç—ñ—ó —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó i18n
    setTimeout(checkI18n, 100);
  }, []);

  return isReady;
};

export const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [user, setUser] = useState<User | null>(null);
  const [isDemoMode, setIsDemoMode] = useState(false);
  const { message } = App.useApp();
  const isI18nReady = useI18nReady();

  const initializeAuth = useCallback(async () => {
    if (!isI18nReady) {
      console.log('‚è≥ Waiting for i18n initialization...');
      return;
    }

    try {
      console.log('üîÑ Starting authentication initialization...');
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
      const authInfo = authService.getAuthInfo();
      
      if (authInfo.isAuthenticated && authInfo.user) {
        console.log('üîê Found existing authentication');
        
        setUser(authInfo.user);
        setIsAuthenticated(true);
        setIsDemoMode(authInfo.isDemoMode);
        
        console.log(`‚úÖ Auth initialized: ${authInfo.user.email} (${authInfo.isDemoMode ? 'Demo' : 'Real'} mode)`);
        
        // –°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –∑ —Å–µ—Ä–≤–µ—Ä–∞ (—è–∫—â–æ –Ω–µ –¥–µ–º–æ-—Ä–µ–∂–∏–º)
        if (!authInfo.isDemoMode) {
          try {
            const freshUser = await authService.getProfile();
            setUser(freshUser);
            console.log('üîÑ User profile refreshed from server');
          } catch (error) {
            console.warn('‚ö†Ô∏è Failed to refresh user profile, using cached data');
          }
        }
      } else {
        console.log('‚ÑπÔ∏è No valid authentication found');
        // –û—á–∏—â–∞—î–º–æ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ –Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ –¥–∞–Ω—ñ
        authService.clearAuth();
      }
    } catch (error) {
      console.error('‚ùå Auth initialization failed:', error);
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –≤–∏—Ö—ñ–¥ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
      await authService.logout();
      setUser(null);
      setIsAuthenticated(false);
      setIsDemoMode(false);
    } finally {
      setIsLoading(false);
      console.log('üèÅ Auth initialization completed');
    }
  }, [isI18nReady]);

  useEffect(() => {
    initializeAuth();
  }, [initializeAuth]);

  const refreshUser = async (): Promise<void> => {
    try {
      const userProfile = await authService.getProfile();
      setUser(userProfile);
      setIsDemoMode(authService.isDemoMode());
      console.log('üîÑ User profile refreshed');
    } catch (error) {
      console.error('‚ùå Failed to refresh user:', error);
      throw error;
    }
  };

  const updateUserProfile = (userData: Partial<User>): void => {
    if (user) {
      const updatedUser = { ...user, ...userData };
      setUser(updatedUser);
      authService.updateUser(updatedUser);
      console.log('üë§ User profile updated locally');
    }
  };

  const login = async (credentials: LoginCredentials): Promise<void> => {
    try {
      setIsLoading(true);
      console.log('üîê Starting login process...');
      
      const response = await authService.login(credentials);
      
      setUser(response.user);
      setIsAuthenticated(true);
      setIsDemoMode(authService.isDemoMode());
      
      const modeMessage = authService.isDemoMode() ? ` (${i18nUtils.t('demoMode')})` : '';
      message.success(`${i18nUtils.t('loginSuccess')}${modeMessage}`);
      
      console.log('‚úÖ Login completed successfully');
      
    } catch (error: any) {
      console.error('‚ùå Login error:', error);
      
      // –î–µ—Ç–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏
      let errorMessage = i18nUtils.t('error');
      if (error.message?.includes('network') || error.code === 'NETWORK_ERROR') {
        errorMessage = i18nUtils.t('networkError');
      } else if (error.code === '401') {
        errorMessage = i18nUtils.t('invalidCredentials');
      } else if (error.code === '429') {
        errorMessage = i18nUtils.t('tooManyAttempts') || 'Too many attempts. Please try again later.';
      } else {
        errorMessage = error.message || i18nUtils.t('error');
      }
      
      message.error(errorMessage);
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  const register = async (userData: RegisterData): Promise<void> => {
    try {
      setIsLoading(true);
      console.log('üìù Starting registration process...');
      
      const response = await authService.register(userData);
      
      setUser(response.user);
      setIsAuthenticated(true);
      setIsDemoMode(authService.isDemoMode());
      
      const modeMessage = authService.isDemoMode() ? ` (${i18nUtils.t('demoMode')})` : '';
      message.success(`${i18nUtils.t('registerSuccess')}${modeMessage}`);
      
      console.log('‚úÖ Registration completed successfully');
      
    } catch (error: any) {
      console.error('‚ùå Registration error:', error);
      
      let errorMessage = i18nUtils.t('error');
      if (error.message?.includes('network') || error.code === 'NETWORK_ERROR') {
        errorMessage = i18nUtils.t('networkError');
      } else if (error.code === '409') {
        errorMessage = i18nUtils.t('userExists') || 'User with this email already exists';
      } else if (error.code === '400') {
        errorMessage = i18nUtils.t('invalidData') || 'Invalid registration data';
      }
      
      message.error(errorMessage);
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  const logout = async (): Promise<void> => {
    try {
      setIsLoading(true);
      console.log('üö™ Starting logout process...');
      
      await authService.logout();
      
      setUser(null);
      setIsAuthenticated(false);
      setIsDemoMode(false);
      
      message.success(i18nUtils.t('logoutSuccess'));
      
      console.log('‚úÖ Logout completed successfully');
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ª–æ–≥—ñ–Ω—É
      setTimeout(() => {
        window.location.href = '/login';
      }, 1000);
      
    } catch (error: any) {
      console.error('‚ùå Logout error:', error);
      // –ù–∞–≤—ñ—Ç—å –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ –≤–∏–∫–æ–Ω—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –≤–∏—Ö—ñ–¥
      authService.clearAuth();
      setUser(null);
      setIsAuthenticated(false);
      setIsDemoMode(false);
      message.error(i18nUtils.t('error'));
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  const checkApiHealth = async (): Promise<{ status: 'online' | 'offline' | 'error'; demoMode: boolean }> => {
    return await authService.checkApiHealth();
  };

  const contextValue: AuthContextType = {
    isAuthenticated,
    isLoading,
    user,
    isDemoMode,
    login,
    register,
    logout,
    refreshUser,
    updateUserProfile,
    checkApiHealth,
  };

  return (
    <AuthContext.Provider value={contextValue}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

// –î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ö—É–∫ –¥–ª—è —Å–ø—Ä–æ—â–µ–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
export const useAuthState = () => {
  const { user, isAuthenticated, isLoading, isDemoMode } = useAuth();
  
  return {
    user,
    isAuthenticated,
    isLoading,
    isDemoMode,
    isAdmin: user?.role === 'admin',
    isLawyer: user?.role === 'lawyer',
    isAssistant: user?.role === 'assistant',
    hasRole: (role: string) => user?.role === role,
    hasAnyRole: (roles: string[]) => roles.includes(user?.role || ''),
  };
};

// –•—É–∫ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ–∑–≤–æ–ª—ñ–≤
export const usePermissions = () => {
  const { user } = useAuth();
  
  const permissions = React.useMemo(() => {
    if (!user) return [];
    
    const basePermissions = ['view_dashboard'];
    
    switch (user.role) {
      case 'admin':
        return [...basePermissions, 'manage_users', 'manage_cases', 'manage_clients', 'view_reports'];
      case 'lawyer':
        return [...basePermissions, 'manage_cases', 'manage_clients', 'view_reports'];
      case 'assistant':
        return [...basePermissions, 'view_cases', 'view_clients'];
      default:
        return basePermissions;
    }
  }, [user]);

  const hasPermission = (permission: string): boolean => {
    return permissions.includes(permission);
  };

  return {
    permissions,
    hasPermission,
    canManageUsers: hasPermission('manage_users'),
    canManageCases: hasPermission('manage_cases'),
    canManageClients: hasPermission('manage_clients'),
    canViewReports: hasPermission('view_reports'),
  };
};