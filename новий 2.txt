src/i18n.ts
import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';
import LanguageDetector from 'i18next-browser-languagedetector';
import Backend from 'i18next-http-backend';
import { format, formatDistance, formatRelative } from 'date-fns';
import { uk, enUS } from 'date-fns/locale';

// Розширені фолбек переклади з вашими перекладами
const fallbackResources = {
  en: {
    translation: {
      // Загальні
      "dashboard": "Dashboard",
      "cases": "Cases",
      "clients": "Clients",
      "profile": "Profile",
      "logout": "Logout",
      "login": "Login",
      "register": "Register",
      "loading": "Loading...",
      "error": "Error",
      "success": "Success",
      "save": "Save",
      "cancel": "Cancel",
      "delete": "Delete",
      "edit": "Edit",
      "create": "Create",
      "search": "Search",
      "filter": "Filter",
      "refresh": "Refresh",
      
      // Auth
      "email": "Email",
      "password": "Password",
      "fullName": "Full Name",
      "role": "Role",
      "loginSuccess": "Login successful",
      "logoutSuccess": "Logout successful",
      "registerSuccess": "Registration successful",
      "invalidCredentials": "Invalid email or password",
      "networkError": "Network error. Please check your connection.",
      
      // Dashboard
      "hoursTracked": "Hours Tracked",
      "income": "Income",
      "quickActions": "Quick Actions",
      "addCase": "Add Case",
      "addClient": "Add Client",
      "createInvoice": "Create Invoice",
      "startTimer": "Start Timer",
      "upcomingHearings": "Upcoming Hearings",
      "recentActivity": "Recent Activity",
      
      // Demo mode
      "demoMode": "Demo Mode",
      "realMode": "Real Mode",

      // Нові переклади з вашого файлу
      "welcome": "Welcome to Lawyer Dmitry LAPOSHA's CRM",
      "hearings": "Hearings",
      "tasks": "Tasks",
      "invoices": "Invoices",
      "kanban": "Kanban Board",
      "calendar": "Calendar",
      "timeTracker": "Time Tracker",
      "reports": "Reports",
      "noAccount": "Don't have an account?",
      "haveAccount": "Already have an account?",
      "emailRequired": "Please enter email!",
      "passwordRequired": "Please enter password!",
      "fullNameRequired": "Please enter full name!",
      "roleRequired": "Please select role!",
      "loginError": "Login error. Please check credentials.",
      "registerError": "Registration error. Please check data.",

      // Ролі
      "admin": "Administrator",
      "lawyer": "Lawyer", 
      "assistant": "Assistant",
      "paralegal": "Paralegal",
      "accountant": "Accountant",
      "viewer": "Viewer",

      // Статуси
      "open": "Open",
      "on_hold": "On Hold",
      "closed": "Closed",
      "archived": "Archived",
      "in_progress": "In Progress",
      "draft": "Draft",
      "sent": "Sent",
      "paid": "Paid",
      "overdue": "Overdue",

      // Стадії справ
      "pre_trial": "Pre-trial",
      "first_instance": "First Instance", 
      "appeal": "Appeal",
      "cassation": "Cassation",
      "enforcement": "Enforcement",

      // Додаткові переклади
      "number": "Number",
      "title": "Title",
      "client": "Client",
      "status": "Status",
      "stage": "Stage",
      "dueDate": "Due Date",
      "hourlyRate": "Hourly Rate",
      "budget": "Budget",
      "actions": "Actions",
      "view": "View",
      "description": "Description",
      "noDescription": "No description",
      "lastUpdated": "Last updated",
      "settings": "Settings"
    }
  },
  uk: {
    translation: {
      // Загальні
      "dashboard": "Панель керування",
      "cases": "Справи",
      "clients": "Клієнти",
      "profile": "Профіль",
      "logout": "Вихід",
      "login": "Вхід",
      "register": "Реєстрація",
      "loading": "Завантаження...",
      "error": "Помилка",
      "success": "Успіх",
      "save": "Зберегти",
      "cancel": "Скасувати",
      "delete": "Видалити",
      "edit": "Редагувати",
      "create": "Створити",
      "search": "Пошук",
      "filter": "Фільтр",
      "refresh": "Оновити",
      
      // Auth
      "email": "Електронна пошта",
      "password": "Пароль",
      "fullName": "Повне ім'я",
      "role": "Роль",
      "loginSuccess": "Вхід успішний",
      "logoutSuccess": "Вихід успішний",
      "registerSuccess": "Реєстрація успішна",
      "invalidCredentials": "Невірний email або пароль",
      "networkError": "Помилка мережі. Перевірте підключення.",
      
      // Dashboard
      "hoursTracked": "Відстежено годин",
      "income": "Дохід",
      "quickActions": "Швидкі дії",
      "addCase": "Додати справу",
      "addClient": "Додати клієнта",
      "createInvoice": "Створити рахунок",
      "startTimer": "Запустити таймер",
      "upcomingHearings": "Майбутні засідання",
      "recentActivity": "Остання активність",
      
      // Demo mode
      "demoMode": "Демо-режим",
      "realMode": "Реальний режим",

      // Нові переклади з вашого файлу
      "welcome": "Ласкаво просимо до CRM адвоката Дмитра ЛАПОШІ",
      "hearings": "Засідання",
      "tasks": "Завдання",
      "invoices": "Рахунки",
      "kanban": "Дошка завдань",
      "calendar": "Календар",
      "timeTracker": "Тайм-трекер",
      "reports": "Звіти",
      "noAccount": "Немає акаунта?",
      "haveAccount": "Вже маєте акаунт?",
      "emailRequired": "Будь ласка, введіть електронну пошту!",
      "passwordRequired": "Будь ласка, введіть пароль!",
      "fullNameRequired": "Будь ласка, введіть повне ім'я!",
      "roleRequired": "Будь ласка, виберіть роль!",
      "loginError": "Помилка входу. Перевірте логін та пароль.",
      "registerError": "Помилка реєстрації. Перевірте дані.",

      // Ролі
      "admin": "Адміністратор",
      "lawyer": "Адвокат",
      "assistant": "Помічник",
      "paralegal": "Юрист",
      "accountant": "Бухгалтер",
      "viewer": "Переглядач",

      // Статуси
      "open": "Відкрита",
      "on_hold": "На паузі",
      "closed": "Закрита",
      "archived": "Архів",
      "in_progress": "В роботі",
      "draft": "Чернетка",
      "sent": "Надіслано",
      "paid": "Оплачено",
      "overdue": "Протерміновано",

      // Стадії справ
      "pre_trial": "Досудове",
      "first_instance": "Перша інстанція",
      "appeal": "Апеляція",
      "cassation": "Касація",
      "enforcement": "Виконавче провадження",

      // Додаткові переклади
      "number": "Номер",
      "title": "Назва",
      "client": "Клієнт",
      "status": "Статус",
      "stage": "Стадія",
      "dueDate": "Кінцевий термін",
      "hourlyRate": "Погодинна ставка",
      "budget": "Бюджет",
      "actions": "Дії",
      "view": "Переглянути",
      "description": "Опис",
      "noDescription": "Опис відсутній",
      "lastUpdated": "Останнє оновлення",
      "settings": "Налаштування"
    }
  }
};

// Кеш для формату дат
const dateFormatsCache = new Map();

const getDateFormats = (lng: string) => {
  if (dateFormatsCache.has(lng)) {
    return dateFormatsCache.get(lng);
  }

  const formats = {
    uk: {
      short: 'dd.MM.yyyy',
      medium: 'd MMM yyyy',
      long: 'd MMMM yyyy',
      numeric: 'dd.MM.yyyy HH:mm',
      datetime: 'dd.MM.yyyy, HH:mm',
      time: 'HH:mm',
      relative: 'PPP',
    },
    en: {
      short: 'MM/dd/yyyy',
      medium: 'MMM d, yyyy',
      long: 'MMMM d, yyyy',
      numeric: 'MM/dd/yyyy, h:mm a',
      datetime: 'MMM d, yyyy, h:mm a',
      time: 'h:mm a',
      relative: 'PPP',
    },
  };

  const result = lng === 'uk' ? formats.uk : formats.en;
  dateFormatsCache.set(lng, result);
  return result;
};

const getLocale = (lng: string) => {
  return lng === 'uk' ? uk : enUS;
};

// Покращений кастомний бекенд
class RobustBackend extends Backend {
  private loadAttempts = new Map<string, number>();
  private readonly MAX_RETRIES = 2;

  read(language: string, namespace: string, callback: Function) {
    const key = `${language}/${namespace}`;
    const attempts = this.loadAttempts.get(key) || 0;

    // Якщо перевищено кількість спроб, використовуємо фолбек
    if (attempts >= this.MAX_RETRIES) {
      console.warn(`Max retries reached for ${key}, using fallback`);
      callback(null, fallbackResources[language as keyof typeof fallbackResources]?.translation || {});
      return;
    }

    super.read(language, namespace, (err: any, data: any) => {
      if (err) {
        console.warn(`Attempt ${attempts + 1} failed to load ${key}:`, err);
        this.loadAttempts.set(key, attempts + 1);
        
        // Використовуємо фолбек переклади
        const fallbackData = fallbackResources[language as keyof typeof fallbackResources]?.translation || {};
        callback(null, fallbackData);
        return;
      }
      
      // Скидаємо лічильник при успішному завантаженні
      this.loadAttempts.delete(key);
      
      // Мерджимо з фолбеком для заповнення відсутніх ключів
      const mergedData = {
        ...fallbackResources[language as keyof typeof fallbackResources]?.translation,
        ...data
      };
      
      callback(null, mergedData);
    });
  }
}

// Функція для безпечної ініціалізації
const initializeI18n = async () => {
  try {
    const options = {
      supportedLngs: ['en', 'uk'],
      fallbackLng: 'en',
      debug: process.env.NODE_ENV === 'development',
      
      // Детекція мови
      detection: {
        order: ['localStorage', 'navigator', 'htmlTag'],
        caches: ['localStorage'],
        lookupLocalStorage: 'i18nextLng',
        checkWhitelist: true,
      },
      
      // Завантаження ресурсів
      backend: {
        loadPath: '/locales/{{lng}}/{{ns}}.json',
        addPath: '/locales/add/{{lng}}/{{ns}}',
        allowMultiLoading: false,
        crossDomain: false,
      },
      
      // Інтерполяція
      interpolation: {
        escapeValue: false,
        format: (value: any, format: string, lng: string) => {
          if (value instanceof Date) {
            const locale = getLocale(lng || 'en');
            const formats = getDateFormats(lng || 'en');
            
            try {
              switch (format) {
                case 'short':
                  return format(value, formats.short, { locale });
                case 'medium':
                  return format(value, formats.medium, { locale });
                case 'long':
                  return format(value, formats.long, { locale });
                case 'numeric':
                  return format(value, formats.numeric, { locale });
                case 'datetime':
                  return format(value, formats.datetime, { locale });
                case 'time':
                  return format(value, formats.time, { locale });
                case 'relative':
                  return formatRelative(value, new Date(), { locale });
                case 'distance':
                  return formatDistance(value, new Date(), { 
                    addSuffix: true, 
                    locale 
                  });
                default:
                  return format(value, formats.medium, { locale });
              }
            } catch (error) {
              console.warn('Date formatting error:', error);
              return value.toISOString().split('T')[0];
            }
          }
          
          if (typeof value === 'number') {
            try {
              return new Intl.NumberFormat(lng, {
                style: format || 'decimal',
                currency: format === 'currency' ? 'UAH' : undefined,
              }).format(value);
            } catch (error) {
              console.warn('Number formatting error:', error);
              return value.toString();
            }
          }
          
          return value;
        },
      },
      
      // React інтеграція
      react: {
        useSuspense: false,
        bindI18n: 'languageChanged loaded',
        bindI18nStore: 'added removed',
      },
      
      // Запобігання помилок відсутніх ключів
      saveMissing: process.env.NODE_ENV === 'development',
      missingKeyHandler: (lng: string[], ns: string, key: string) => {
        console.warn(`Missing translation: ${ns}.${key} for language: ${lng}`);
      },
      
      // Налаштування для кращої продуктивності
      partialBundledLanguages: true,
      keySeparator: false,
      nsSeparator: false,

      // Ресурси за замовчуванням
      resources: fallbackResources
    };

    await i18n
      .use(RobustBackend)
      .use(LanguageDetector)
      .use(initReactI18next)
      .init(options);

    console.log('✅ i18n initialized successfully');
  } catch (error) {
    console.error('❌ i18n initialization failed:', error);
    // Аварійна ініціалізація з фолбек даними
    i18n.init({
      lng: 'en',
      resources: fallbackResources,
      interpolation: {
        escapeValue: false,
      },
    });
  }
};

// Обробники подій
i18n.on('initialized', () => {
  console.log('🌍 i18n initialized with language:', i18n.language);
});

i18n.on('loaded', (loaded) => {
  console.log('📦 i18n loaded:', loaded);
});

i18n.on('failedLoading', (lng: string, ns: string, msg: string) => {
  console.warn(`🚫 Failed to load ${ns} for ${lng}:`, msg);
});

i18n.on('languageChanged', (lng: string) => {
  console.log('🔄 Language changed to:', lng);
  document.documentElement.lang = lng;
  document.documentElement.dir = i18n.dir(lng);
  localStorage.setItem('i18nextLng', lng);
});

i18n.on('missingKey', (lng: string[], ns: string, key: string) => {
  console.warn(`🔍 Missing translation key: ${ns}.${key} for language: ${lng}`);
});

// Утиліти для роботи з i18n
export const i18nUtils = {
  // Безпечне отримання перекладу
  t: (key: string, options?: any): string => {
    try {
      const result = i18n.t(key, options);
      return result || key;
    } catch (error) {
      console.warn(`Translation error for key "${key}":`, error);
      return key;
    }
  },

  // Зміна мови з обробкою помилок
  changeLanguage: async (lng: string): Promise<boolean> => {
    try {
      await i18n.changeLanguage(lng);
      return true;
    } catch (error) {
      console.error('Failed to change language:', error);
      return false;
    }
  },

  // Отримання поточної мови
  getCurrentLanguage: (): string => {
    return i18n.language || 'en';
  },

  // Перевірка підтримки мови
  isLanguageSupported: (lng: string): boolean => {
    return i18n.languages.includes(lng);
  },

  // Отримання напрямку тексту
  getTextDirection: (lng?: string): 'ltr' | 'rtl' => {
    const language = lng || i18n.language;
    return i18n.dir(language);
  }
};

// Ініціалізація при імпорті
initializeI18n();

export default i18n;

src/contexts/
import React, { createContext, useContext, useState, useEffect, ReactNode, useCallback } from 'react';
import { App } from 'antd';
import { authService, User, LoginCredentials, RegisterData } from '../services/auth';
import { i18nUtils } from '../i18n';

interface AuthContextType {
  isAuthenticated: boolean;
  isLoading: boolean;
  user: User | null;
  isDemoMode: boolean;
  login: (credentials: LoginCredentials) => Promise<void>;
  register: (userData: RegisterData) => Promise<void>;
  logout: () => Promise<void>;
  refreshUser: () => Promise<void>;
  updateUserProfile: (userData: Partial<User>) => void;
  checkApiHealth: () => Promise<{ status: 'online' | 'offline' | 'error'; demoMode: boolean }>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

// Хук для перевірки ініціалізації i18n
const useI18nReady = () => {
  const [isReady, setIsReady] = useState(false);

  useEffect(() => {
    const checkI18n = () => {
      // Перевіряємо, чи i18n повністю ініціалізований
      if (i18nUtils.getCurrentLanguage()) {
        setIsReady(true);
        console.log('✅ i18n is ready for auth initialization');
      } else {
        // Чекаємо трохи і перевіряємо знову
        setTimeout(checkI18n, 50);
      }
    };

    // Початкова затримка для гарантії ініціалізації i18n
    setTimeout(checkI18n, 100);
  }, []);

  return isReady;
};

export const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [user, setUser] = useState<User | null>(null);
  const [isDemoMode, setIsDemoMode] = useState(false);
  const { message } = App.useApp();
  const isI18nReady = useI18nReady();

  const initializeAuth = useCallback(async () => {
    if (!isI18nReady) {
      console.log('⏳ Waiting for i18n initialization...');
      return;
    }

    try {
      console.log('🔄 Starting authentication initialization...');
      
      // Перевіряємо, чи є збережені дані авторизації
      const authInfo = authService.getAuthInfo();
      
      if (authInfo.isAuthenticated && authInfo.user) {
        console.log('🔐 Found existing authentication');
        
        setUser(authInfo.user);
        setIsAuthenticated(true);
        setIsDemoMode(authInfo.isDemoMode);
        
        console.log(`✅ Auth initialized: ${authInfo.user.email} (${authInfo.isDemoMode ? 'Demo' : 'Real'} mode)`);
        
        // Спроба оновити профіль з сервера (якщо не демо-режим)
        if (!authInfo.isDemoMode) {
          try {
            const freshUser = await authService.getProfile();
            setUser(freshUser);
            console.log('🔄 User profile refreshed from server');
          } catch (error) {
            console.warn('⚠️ Failed to refresh user profile, using cached data');
          }
        }
      } else {
        console.log('ℹ️ No valid authentication found');
        // Очищаємо потенційно невалідні дані
        authService.clearAuth();
      }
    } catch (error) {
      console.error('❌ Auth initialization failed:', error);
      // Автоматичний вихід при помилці ініціалізації
      await authService.logout();
      setUser(null);
      setIsAuthenticated(false);
      setIsDemoMode(false);
    } finally {
      setIsLoading(false);
      console.log('🏁 Auth initialization completed');
    }
  }, [isI18nReady]);

  useEffect(() => {
    initializeAuth();
  }, [initializeAuth]);

  const refreshUser = async (): Promise<void> => {
    try {
      const userProfile = await authService.getProfile();
      setUser(userProfile);
      setIsDemoMode(authService.isDemoMode());
      console.log('🔄 User profile refreshed');
    } catch (error) {
      console.error('❌ Failed to refresh user:', error);
      throw error;
    }
  };

  const updateUserProfile = (userData: Partial<User>): void => {
    if (user) {
      const updatedUser = { ...user, ...userData };
      setUser(updatedUser);
      authService.updateUser(updatedUser);
      console.log('👤 User profile updated locally');
    }
  };

  const login = async (credentials: LoginCredentials): Promise<void> => {
    try {
      setIsLoading(true);
      console.log('🔐 Starting login process...');
      
      const response = await authService.login(credentials);
      
      setUser(response.user);
      setIsAuthenticated(true);
      setIsDemoMode(authService.isDemoMode());
      
      const modeMessage = authService.isDemoMode() ? ` (${i18nUtils.t('demoMode')})` : '';
      message.success(`${i18nUtils.t('loginSuccess')}${modeMessage}`);
      
      console.log('✅ Login completed successfully');
      
    } catch (error: any) {
      console.error('❌ Login error:', error);
      
      // Деталізовані повідомлення про помилки
      let errorMessage = i18nUtils.t('error');
      if (error.message?.includes('network') || error.code === 'NETWORK_ERROR') {
        errorMessage = i18nUtils.t('networkError');
      } else if (error.code === '401') {
        errorMessage = i18nUtils.t('invalidCredentials');
      } else if (error.code === '429') {
        errorMessage = i18nUtils.t('tooManyAttempts') || 'Too many attempts. Please try again later.';
      } else {
        errorMessage = error.message || i18nUtils.t('error');
      }
      
      message.error(errorMessage);
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  const register = async (userData: RegisterData): Promise<void> => {
    try {
      setIsLoading(true);
      console.log('📝 Starting registration process...');
      
      const response = await authService.register(userData);
      
      setUser(response.user);
      setIsAuthenticated(true);
      setIsDemoMode(authService.isDemoMode());
      
      const modeMessage = authService.isDemoMode() ? ` (${i18nUtils.t('demoMode')})` : '';
      message.success(`${i18nUtils.t('registerSuccess')}${modeMessage}`);
      
      console.log('✅ Registration completed successfully');
      
    } catch (error: any) {
      console.error('❌ Registration error:', error);
      
      let errorMessage = i18nUtils.t('error');
      if (error.message?.includes('network') || error.code === 'NETWORK_ERROR') {
        errorMessage = i18nUtils.t('networkError');
      } else if (error.code === '409') {
        errorMessage = i18nUtils.t('userExists') || 'User with this email already exists';
      } else if (error.code === '400') {
        errorMessage = i18nUtils.t('invalidData') || 'Invalid registration data';
      }
      
      message.error(errorMessage);
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  const logout = async (): Promise<void> => {
    try {
      setIsLoading(true);
      console.log('🚪 Starting logout process...');
      
      await authService.logout();
      
      setUser(null);
      setIsAuthenticated(false);
      setIsDemoMode(false);
      
      message.success(i18nUtils.t('logoutSuccess'));
      
      console.log('✅ Logout completed successfully');
      
      // Перенаправлення на сторінку логіну
      setTimeout(() => {
        window.location.href = '/login';
      }, 1000);
      
    } catch (error: any) {
      console.error('❌ Logout error:', error);
      // Навіть при помилці виконуємо локальний вихід
      authService.clearAuth();
      setUser(null);
      setIsAuthenticated(false);
      setIsDemoMode(false);
      message.error(i18nUtils.t('error'));
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  const checkApiHealth = async (): Promise<{ status: 'online' | 'offline' | 'error'; demoMode: boolean }> => {
    return await authService.checkApiHealth();
  };

  const contextValue: AuthContextType = {
    isAuthenticated,
    isLoading,
    user,
    isDemoMode,
    login,
    register,
    logout,
    refreshUser,
    updateUserProfile,
    checkApiHealth,
  };

  return (
    <AuthContext.Provider value={contextValue}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

// Додатковий хук для спрощеного доступу до авторизації
export const useAuthState = () => {
  const { user, isAuthenticated, isLoading, isDemoMode } = useAuth();
  
  return {
    user,
    isAuthenticated,
    isLoading,
    isDemoMode,
    isAdmin: user?.role === 'admin',
    isLawyer: user?.role === 'lawyer',
    isAssistant: user?.role === 'assistant',
    hasRole: (role: string) => user?.role === role,
    hasAnyRole: (roles: string[]) => roles.includes(user?.role || ''),
  };
};

// Хук для перевірки дозволів
export const usePermissions = () => {
  const { user } = useAuth();
  
  const permissions = React.useMemo(() => {
    if (!user) return [];
    
    const basePermissions = ['view_dashboard'];
    
    switch (user.role) {
      case 'admin':
        return [...basePermissions, 'manage_users', 'manage_cases', 'manage_clients', 'view_reports'];
      case 'lawyer':
        return [...basePermissions, 'manage_cases', 'manage_clients', 'view_reports'];
      case 'assistant':
        return [...basePermissions, 'view_cases', 'view_clients'];
      default:
        return basePermissions;
    }
  }, [user]);

  const hasPermission = (permission: string): boolean => {
    return permissions.includes(permission);
  };

  return {
    permissions,
    hasPermission,
    canManageUsers: hasPermission('manage_users'),
    canManageCases: hasPermission('manage_cases'),
    canManageClients: hasPermission('manage_clients'),
    canViewReports: hasPermission('view_reports'),
  };
};

// src/router/AppRoutes.tsx
import React from 'react';
import { Routes, Route, Navigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import LoginPage from '../pages/Auth/LoginPage';
import DashboardPage from '../pages/Dashboard/DashboardPage';
import CasesPage from '../pages/Cases/CasesPage';
import CaseDetailPage from '../pages/Cases/CaseDetailPage';
import ClientsPage from '../pages/Clients/ClientsPage';
import ClientDetailPage from '../pages/Clients/ClientDetailPage';
import TasksPage from '../pages/Tasks/TasksPage';
import KanbanPage from '../pages/Tasks/KanbanPage';
import CalendarPage from '../pages/Calendar/CalendarPage';
import InvoicesPage from '../pages/Invoices/InvoicesPage';
import TimeTrackerPage from '../pages/TimeTracker/TimeTrackerPage';
import ReportsPage from '../pages/Reports/ReportsPage';
import MainLayout from '../layouts/MainLayout';
import LoadingSpinner from '../components/Common/LoadingSpinner';

const PrivateRoute: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const { isAuthenticated, isLoading } = useAuth();
  
  if (isLoading) {
    return <LoadingSpinner />;
  }
  
  return isAuthenticated ? <>{children}</> : <Navigate to="/login" replace />;
};

const PublicRoute: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const { isAuthenticated, isLoading } = useAuth();
  
  if (isLoading) {
    return <LoadingSpinner />;
  }
  
  return !isAuthenticated ? <>{children}</> : <Navigate to="/dashboard" replace />;
};

const AppRoutes: React.FC = () => {
  return (
    <Routes>
      {/* Public routes */}
      <Route path="/login" element={
        <PublicRoute>
          <LoginPage />
        </PublicRoute>
      } />

      {/* Private routes with layout */}
      <Route path="/" element={
        <PrivateRoute>
          <MainLayout>
            <DashboardPage />
          </MainLayout>
        </PrivateRoute>
      } />

      <Route path="/dashboard" element={
        <PrivateRoute>
          <MainLayout>
            <DashboardPage />
          </MainLayout>
        </PrivateRoute>
      } />

      <Route path="/cases" element={
        <PrivateRoute>
          <MainLayout>
            <CasesPage />
          </MainLayout>
        </PrivateRoute>
      } />

      <Route path="/cases/:id" element={
        <PrivateRoute>
          <MainLayout>
            <CaseDetailPage />
          </MainLayout>
        </PrivateRoute>
      } />

      <Route path="/clients" element={
        <PrivateRoute>
          <MainLayout>
            <ClientsPage />
          </MainLayout>
        </PrivateRoute>
      } />

      <Route path="/clients/:id" element={
        <PrivateRoute>
          <MainLayout>
            <ClientDetailPage />
          </MainLayout>
        </PrivateRoute>
      } />

      <Route path="/tasks" element={
        <PrivateRoute>
          <MainLayout>
            <TasksPage />
          </MainLayout>
        </PrivateRoute>
      } />

      <Route path="/kanban" element={
        <PrivateRoute>
          <MainLayout>
            <KanbanPage />
          </MainLayout>
        </PrivateRoute>
      } />

      <Route path="/calendar" element={
        <PrivateRoute>
          <MainLayout>
            <CalendarPage />
          </MainLayout>
        </PrivateRoute>
      } />

      <Route path="/invoices" element={
        <PrivateRoute>
          <MainLayout>
            <InvoicesPage />
          </MainLayout>
        </PrivateRoute>
      } />

      <Route path="/time-tracker" element={
        <PrivateRoute>
          <MainLayout>
            <TimeTrackerPage />
          </MainLayout>
        </PrivateRoute>
      } />

      <Route path="/reports" element={
        <PrivateRoute>
          <MainLayout>
            <ReportsPage />
          </MainLayout>
        </PrivateRoute>
      } />

      {/* Catch all route */}
      <Route path="*" element={<Navigate to="/dashboard" replace />} />
    </Routes>
  );
};

export default AppRoutes;


pages/Admin/RolesPermissionsPage.tsx
import React, { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import { 
  Table, 
  Button, 
  Space, 
  Tag, 
  Modal, 
  Form, 
  Input, 
  Select, 
  message, 
  Card, 
  Switch,
  Popconfirm,
  Tooltip
} from 'antd';
import { 
  PlusOutlined, 
  EditOutlined, 
  DeleteOutlined, 
  SecurityScanOutlined,
  LockOutlined
} from '@ant-design/icons';
import type { ColumnsType } from 'antd/es/table';

interface Role {
  id: string;
  name: string;
  description: string;
  permissions: string[];
  is_system: boolean;
  user_count: number;
  created_at: string;
}

interface Permission {
  id: string;
  name: string;
  category: string;
  description: string;
}

const RolesPermissionsPage: React.FC = () => {
  const { t } = useTranslation();
  const [roles, setRoles] = useState<Role[]>([]);
  const [permissions, setPermissions] = useState<Permission[]>([]);
  const [loading, setLoading] = useState(false);
  const [isRoleModalVisible, setIsRoleModalVisible] = useState(false);
  const [isPermissionModalVisible, setIsPermissionModalVisible] = useState(false);
  const [editingRole, setEditingRole] = useState<Role | null>(null);
  const [form] = Form.useForm();

  // Демо-дані для ролей та дозволів
  const demoRoles: Role[] = [
    {
      id: '1',
      name: 'admin',
      description: 'Повний доступ до всіх функцій системи',
      permissions: ['users.read', 'users.write', 'cases.read', 'cases.write', 'settings.write'],
      is_system: true,
      user_count: 1,
      created_at: '2024-01-15T10:00:00Z'
    },
    {
      id: '2',
      name: 'lawyer',
      description: 'Доступ до справ, клієнтів та документів',
      permissions: ['cases.read', 'cases.write', 'clients.read', 'clients.write', 'documents.write'],
      is_system: false,
      user_count: 3,
      created_at: '2024-01-15T10:00:00Z'
    },
    {
      id: '3',
      name: 'assistant',
      description: 'Обмежений доступ для допоміжних функцій',
      permissions: ['cases.read', 'clients.read', 'documents.read'],
      is_system: false,
      user_count: 2,
      created_at: '2024-01-16T10:00:00Z'
    }
  ];

  const demoPermissions: Permission[] = [
    { id: '1', name: 'users.read', category: 'users', description: 'Перегляд користувачів' },
    { id: '2', name: 'users.write', category: 'users', description: 'Редагування користувачів' },
    { id: '3', name: 'cases.read', category: 'cases', description: 'Перегляд справ' },
    { id: '4', name: 'cases.write', category: 'cases', description: 'Редагування справ' },
    { id: '5', name: 'clients.read', category: 'clients', description: 'Перегляд клієнтів' },
    { id: '6', name: 'clients.write', category: 'clients', description: 'Редагування клієнтів' },
    { id: '7', name: 'documents.read', category: 'documents', description: 'Перегляд документів' },
    { id: '8', name: 'documents.write', category: 'documents', description: 'Редагування документів' },
    { id: '9', name: 'settings.read', category: 'settings', description: 'Перегляд налаштувань' },
    { id: '10', name: 'settings.write', category: 'settings', description: 'Зміна налаштувань' }
  ];

  useEffect(() => {
    fetchRolesAndPermissions();
  }, []);

  const fetchRolesAndPermissions = async () => {
    setLoading(true);
    try {
      // Тимчасово використовуємо демо-дані
      setRoles(demoRoles);
      setPermissions(demoPermissions);
    } catch (error) {
      message.error(t('errorFetchingData'));
    } finally {
      setLoading(false);
    }
  };

  const handleCreateRole = async (values: any) => {
    try {
      const newRole: Role = {
        id: Date.now().toString(),
        name: values.name,
        description: values.description,
        permissions: values.permissions || [],
        is_system: false,
        user_count: 0,
        created_at: new Date().toISOString()
      };
      
      setRoles(prev => [...prev, newRole]);
      setIsRoleModalVisible(false);
      form.resetFields();
      message.success(t('roleCreated'));
    } catch (error) {
      message.error(t('errorCreatingRole'));
    }
  };

  const handleUpdateRole = async (values: any) => {
    if (!editingRole) return;
    
    try {
      setRoles(prev => prev.map(role => 
        role.id === editingRole.id 
          ? { ...role, ...values }
          : role
      ));
      setIsRoleModalVisible(false);
      setEditingRole(null);
      form.resetFields();
      message.success(t('roleUpdated'));
    } catch (error) {
      message.error(t('errorUpdatingRole'));
    }
  };

  const handleDeleteRole = async (id: string) => {
    try {
      setRoles(prev => prev.filter(role => role.id !== id));
      message.success(t('roleDeleted'));
    } catch (error) {
      message.error(t('errorDeletingRole'));
    }
  };

  const handleEditRole = (role: Role) => {
    setEditingRole(role);
    form.setFieldsValue({
      name: role.name,
      description: role.description,
      permissions: role.permissions
    });
    setIsRoleModalVisible(true);
  };

  const columns: ColumnsType<Role> = [
    {
      title: t('roleName'),
      dataIndex: 'name',
      key: 'name',
      render: (name: string, record) => (
        <Space>
          <SecurityScanOutlined />
          <span>{t(name)}</span>
          {record.is_system && (
            <Tag color="blue">{t('system')}</Tag>
          )}
        </Space>
      ),
    },
    {
      title: t('description'),
      dataIndex: 'description',
      key: 'description',
    },
    {
      title: t('permissions'),
      dataIndex: 'permissions',
      key: 'permissions',
      render: (permissions: string[]) => (
        <Space wrap>
          {permissions.slice(0, 3).map(permission => (
            <Tag key={permission} size="small">
              {permission}
            </Tag>
          ))}
          {permissions.length > 3 && (
            <Tooltip title={permissions.slice(3).join(', ')}>
              <Tag>+{permissions.length - 3}</Tag>
            </Tooltip>
          )}
        </Space>
      ),
    },
    {
      title: t('users'),
      dataIndex: 'user_count',
      key: 'user_count',
      render: (count: number) => (
        <Tag color={count > 0 ? 'green' : 'default'}>
          {count} {t('users')}
        </Tag>
      ),
    },
    {
      title: t('actions'),
      key: 'actions',
      render: (_, record) => (
        <Space size="middle">
          <Button 
            icon={<EditOutlined />} 
            size="small"
            onClick={() => handleEditRole(record)}
            disabled={record.is_system}
          >
            {t('edit')}
          </Button>
          <Popconfirm
            title={t('confirmDeleteRole')}
            description={t('deleteRoleWarning')}
            onConfirm={() => handleDeleteRole(record.id)}
            okText={t('yes')}
            cancelText={t('no')}
            disabled={record.is_system}
          >
            <Button 
              icon={<DeleteOutlined />} 
              size="small" 
              danger
              disabled={record.is_system || record.user_count > 0}
            >
              {t('delete')}
            </Button>
          </Popconfirm>
        </Space>
      ),
    },
  ];

  const permissionColumns: ColumnsType<Permission> = [
    {
      title: t('permissionName'),
      dataIndex: 'name',
      key: 'name',
    },
    {
      title: t('category'),
      dataIndex: 'category',
      key: 'category',
      render: (category: string) => <Tag>{t(category)}</Tag>,
    },
    {
      title: t('description'),
      dataIndex: 'description',
      key: 'description',
    },
  ];

  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold">{t('rolesAndPermissions')}</h2>
        <Button 
          type="primary" 
          icon={<PlusOutlined />}
          onClick={() => {
            setEditingRole(null);
            form.resetFields();
            setIsRoleModalVisible(true);
          }}
        >
          {t('addRole')}
        </Button>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Ролі */}
        <Card 
          title={
            <Space>
              <SecurityScanOutlined />
              <span>{t('roles')}</span>
            </Space>
          }
          loading={loading}
        >
          <Table
            columns={columns}
            dataSource={roles}
            rowKey="id"
            pagination={{ pageSize: 10 }}
            size="middle"
          />
        </Card>

        {/* Дозволи */}
        <Card 
          title={
            <Space>
              <LockOutlined />
              <span>{t('permissions')}</span>
            </Space>
          }
          loading={loading}
        >
          <Table
            columns={permissionColumns}
            dataSource={permissions}
            rowKey="id"
            pagination={{ pageSize: 10 }}
            size="middle"
          />
        </Card>
      </div>

      {/* Модальне вікно для створення/редагування ролі */}
      <Modal
        title={editingRole ? t('editRole') : t('addRole')}
        open={isRoleModalVisible}
        onCancel={() => {
          setIsRoleModalVisible(false);
          setEditingRole(null);
          form.resetFields();
        }}
        footer={null}
        width={600}
      >
        <Form
          form={form}
          layout="vertical"
          onFinish={editingRole ? handleUpdateRole : handleCreateRole}
        >
          <Form.Item
            name="name"
            label={t('roleName')}
            rules={[{ required: true, message: t('roleNameRequired') }]}
          >
            <Input placeholder={t('enterRoleName')} />
          </Form.Item>
          
          <Form.Item
            name="description"
            label={t('description')}
            rules={[{ required: true, message: t('descriptionRequired') }]}
          >
            <Input.TextArea 
              rows={3} 
              placeholder={t('enterRoleDescription')}
            />
          </Form.Item>
          
          <Form.Item
            name="permissions"
            label={t('permissions')}
          >
            <Select
              mode="multiple"
              placeholder={t('selectPermissions')}
              options={permissions.map(p => ({
                label: `${p.name} (${p.category})`,
                value: p.name
              }))}
            />
          </Form.Item>
          
          <Form.Item className="mb-0">
            <Space>
              <Button type="primary" htmlType="submit">
                {editingRole ? t('update') : t('create')}
              </Button>
              <Button onClick={() => {
                setIsRoleModalVisible(false);
                setEditingRole(null);
                form.resetFields();
              }}>
                {t('cancel')}
              </Button>
            </Space>
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
};

export default RolesPermissionsPage;


pages/Admin/SystemSettingsPage.tsx
import React, { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import { 
  Card, 
  Form, 
  Input, 
  Switch, 
  Button, 
  Select, 
  Divider, 
  message, 
  Row, 
  Col,
  InputNumber,
  Upload,
  Tag,
  Space,
  List,
  Typography
} from 'antd';
import { 
  SaveOutlined, 
  ReloadOutlined, 
  UploadOutlined,
  GlobalOutlined,
  NotificationOutlined,
  SecurityScanOutlined,
  DatabaseOutlined
} from '@ant-design/icons';

const { TextArea } = Input;
const { Option } = Select;
const { Text } = Typography;

interface SystemSettings {
  general: {
    company_name: string;
    timezone: string;
    date_format: string;
    language: string;
    currency: string;
  };
  notifications: {
    email_notifications: boolean;
    push_notifications: boolean;
    case_updates: boolean;
    hearing_reminders: boolean;
    invoice_due: boolean;
  };
  security: {
    two_factor_auth: boolean;
    session_timeout: number;
    password_policy: string;
    login_attempts: number;
  };
  backup: {
    auto_backup: boolean;
    backup_frequency: string;
    backup_retention: number;
    last_backup: string;
  };
}

const SystemSettingsPage: React.FC = () => {
  const { t, i18n } = useTranslation();
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);

  // Демо-налаштування
  const defaultSettings: SystemSettings = {
    general: {
      company_name: 'Адвокатська фірма Дмитра Лапоші',
      timezone: 'Europe/Kiev',
      date_format: 'dd.MM.yyyy',
      language: 'uk',
      currency: 'UAH'
    },
    notifications: {
      email_notifications: true,
      push_notifications: true,
      case_updates: true,
      hearing_reminders: true,
      invoice_due: true
    },
    security: {
      two_factor_auth: false,
      session_timeout: 60,
      password_policy: 'strong',
      login_attempts: 5
    },
    backup: {
      auto_backup: true,
      backup_frequency: 'daily',
      backup_retention: 30,
      last_backup: '2024-01-20 03:00:00'
    }
  };

  const [settings, setSettings] = useState<SystemSettings>(defaultSettings);

  useEffect(() => {
    fetchSettings();
  }, []);

  const fetchSettings = async () => {
    setLoading(true);
    try {
      // Тимчасово використовуємо демо-дані
      setTimeout(() => {
        setSettings(defaultSettings);
        form.setFieldsValue(defaultSettings);
        setLoading(false);
      }, 500);
    } catch (error) {
      message.error(t('errorFetchingSettings'));
      setLoading(false);
    }
  };

  const handleSaveSettings = async (values: any) => {
    setSaving(true);
    try {
      // Тимчасово зберігаємо в стані
      setSettings(values);
      
      // Оновлюємо мову, якщо вона змінилася
      if (values.general.language !== i18n.language) {
        await i18n.changeLanguage(values.general.language);
      }
      
      message.success(t('settingsSaved'));
    } catch (error) {
      message.error(t('errorSavingSettings'));
    } finally {
      setSaving(false);
    }
  };

  const handleResetSettings = () => {
    form.setFieldsValue(defaultSettings);
    message.info(t('settingsReset'));
  };

  const handleBackupNow = async () => {
    try {
      // Імітація створення бекапу
      setSaving(true);
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      setSettings(prev => ({
        ...prev,
        backup: {
          ...prev.backup,
          last_backup: new Date().toLocaleString()
        }
      }));
      
      message.success(t('backupCreated'));
    } catch (error) {
      message.error(t('errorCreatingBackup'));
    } finally {
      setSaving(false);
    }
  };

  const systemInfo = [
    { label: t('version'), value: '1.0.0' },
    { label: t('lastUpdate'), value: '2024-01-20' },
    { label: t('databaseSize'), value: '45.2 MB' },
    { label: t('activeUsers'), value: '6' },
    { label: t('totalCases'), value: '24' },
    { label: t('serverTime'), value: new Date().toLocaleString() }
  ];

  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold">{t('systemSettings')}</h2>
        <Space>
          <Button 
            icon={<ReloadOutlined />} 
            onClick={handleResetSettings}
            disabled={saving}
          >
            {t('reset')}
          </Button>
          <Button 
            type="primary" 
            icon={<SaveOutlined />} 
            loading={saving}
            onClick={() => form.submit()}
          >
            {t('saveSettings')}
          </Button>
        </Space>
      </div>

      <Form
        form={form}
        layout="vertical"
        onFinish={handleSaveSettings}
        initialValues={defaultSettings}
      >
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Основна колонка з налаштуваннями */}
          <div className="lg:col-span-2 space-y-6">
            {/* Загальні налаштування */}
            <Card 
              title={
                <Space>
                  <GlobalOutlined />
                  <span>{t('generalSettings')}</span>
                </Space>
              }
              loading={loading}
            >
              <Row gutter={16}>
                <Col span={12}>
                  <Form.Item
                    name={['general', 'company_name']}
                    label={t('companyName')}
                    rules={[{ required: true, message: t('companyNameRequired') }]}
                  >
                    <Input placeholder={t('enterCompanyName')} />
                  </Form.Item>
                </Col>
                <Col span={12}>
                  <Form.Item
                    name={['general', 'timezone']}
                    label={t('timezone')}
                  >
                    <Select>
                      <Option value="Europe/Kiev">Kyiv (UTC+2)</Option>
                      <Option value="Europe/London">London (UTC+0)</Option>
                      <Option value="America/New_York">New York (UTC-5)</Option>
                    </Select>
                  </Form.Item>
                </Col>
              </Row>
              
              <Row gutter={16}>
                <Col span={12}>
                  <Form.Item
                    name={['general', 'language']}
                    label={t('language')}
                  >
                    <Select>
                      <Option value="uk">Українська</Option>
                      <Option value="en">English</Option>
                    </Select>
                  </Form.Item>
                </Col>
                <Col span={12}>
                  <Form.Item
                    name={['general', 'currency']}
                    label={t('currency')}
                  >
                    <Select>
                      <Option value="UAH">UAH (₴)</Option>
                      <Option value="USD">USD ($)</Option>
                      <Option value="EUR">EUR (€)</Option>
                    </Select>
                  </Form.Item>
                </Col>
              </Row>
            </Card>

            {/* Налаштування сповіщень */}
            <Card 
              title={
                <Space>
                  <NotificationOutlined />
                  <span>{t('notificationSettings')}</span>
                </Space>
              }
              loading={loading}
            >
              <Form.Item
                name={['notifications', 'email_notifications']}
                valuePropName="checked"
                label={t('emailNotifications')}
              >
                <Switch />
              </Form.Item>
              
              <Form.Item
                name={['notifications', 'push_notifications']}
                valuePropName="checked"
                label={t('pushNotifications')}
              >
                <Switch />
              </Form.Item>
              
              <Divider orientation="left" plain>{t('notificationTypes')}</Divider>
              
              <Row gutter={16}>
                <Col span={8}>
                  <Form.Item
                    name={['notifications', 'case_updates']}
                    valuePropName="checked"
                    label={t('caseUpdates')}
                  >
                    <Switch />
                  </Form.Item>
                </Col>
                <Col span={8}>
                  <Form.Item
                    name={['notifications', 'hearing_reminders']}
                    valuePropName="checked"
                    label={t('hearingReminders')}
                  >
                    <Switch />
                  </Form.Item>
                </Col>
                <Col span={8}>
                  <Form.Item
                    name={['notifications', 'invoice_due']}
                    valuePropName="checked"
                    label={t('invoiceDue')}
                  >
                    <Switch />
                  </Form.Item>
                </Col>
              </Row>
            </Card>

            {/* Налаштування безпеки */}
            <Card 
              title={
                <Space>
                  <SecurityScanOutlined />
                  <span>{t('securitySettings')}</span>
                </Space>
              }
              loading={loading}
            >
              <Form.Item
                name={['security', 'two_factor_auth']}
                valuePropName="checked"
                label={t('twoFactorAuth')}
              >
                <Switch />
              </Form.Item>
              
              <Row gutter={16}>
                <Col span={12}>
                  <Form.Item
                    name={['security', 'session_timeout']}
                    label={t('sessionTimeout')}
                  >
                    <InputNumber 
                      min={5} 
                      max={480} 
                      addonAfter={t('minutes')}
                    />
                  </Form.Item>
                </Col>
                <Col span={12}>
                  <Form.Item
                    name={['security', 'login_attempts']}
                    label={t('loginAttempts')}
                  >
                    <InputNumber min={1} max={10} />
                  </Form.Item>
                </Col>
              </Row>
              
              <Form.Item
                name={['security', 'password_policy']}
                label={t('passwordPolicy')}
              >
                <Select>
                  <Option value="weak">{t('weak')}</Option>
                  <Option value="medium">{t('medium')}</Option>
                  <Option value="strong">{t('strong')}</Option>
                </Select>
              </Form.Item>
            </Card>

            {/* Налаштування резервного копіювання */}
            <Card 
              title={
                <Space>
                  <DatabaseOutlined />
                  <span>{t('backupSettings')}</span>
                </Space>
              }
              loading={loading}
            >
              <Form.Item
                name={['backup', 'auto_backup']}
                valuePropName="checked"
                label={t('autoBackup')}
              >
                <Switch />
              </Form.Item>
              
              <Row gutter={16}>
                <Col span={12}>
                  <Form.Item
                    name={['backup', 'backup_frequency']}
                    label={t('backupFrequency')}
                  >
                    <Select>
                      <Option value="hourly">{t('hourly')}</Option>
                      <Option value="daily">{t('daily')}</Option>
                      <Option value="weekly">{t('weekly')}</Option>
                      <Option value="monthly">{t('monthly')}</Option>
                    </Select>
                  </Form.Item>
                </Col>
                <Col span={12}>
                  <Form.Item
                    name={['backup', 'backup_retention']}
                    label={t('backupRetention')}
                  >
                    <InputNumber 
                      min={1} 
                      max={365} 
                      addonAfter={t('days')}
                    />
                  </Form.Item>
                </Col>
              </Row>
              
              <Space>
                <Text type="secondary">
                  {t('lastBackup')}: {settings.backup.last_backup}
                </Text>
                <Button 
                  icon={<UploadOutlined />}
                  onClick={handleBackupNow}
                  loading={saving}
                >
                  {t('backupNow')}
                </Button>
              </Space>
            </Card>
          </div>

          {/* Бічна колонка з інформацією */}
          <div className="space-y-6">
            {/* Інформація про систему */}
            <Card title={t('systemInfo')}>
              <List
                dataSource={systemInfo}
                renderItem={item => (
                  <List.Item>
                    <List.Item.Meta
                      title={<Text type="secondary">{item.label}</Text>}
                      description={<Text strong>{item.value}</Text>}
                    />
                  </List.Item>
                )}
              />
            </Card>

            {/* Статус системи */}
            <Card title={t('systemStatus')}>
              <Space direction="vertical" className="w-full">
                <div className="flex justify-between">
                  <Text>{t('database')}</Text>
                  <Tag color="green">{t('online')}</Tag>
                </div>
                <div className="flex justify-between">
                  <Text>{t('api')}</Text>
                  <Tag color="green">{t('online')}</Tag>
                </div>
                <div className="flex justify-between">
                  <Text>{t('storage')}</Text>
                  <Tag color="orange">65%</Tag>
                </div>
                <div className="flex justify-between">
                  <Text>{t('memory')}</Text>
                  <Tag color="blue">42%</Tag>
                </div>
              </Space>
            </Card>

            {/* Швидкі дії */}
            <Card title={t('quickActions')}>
              <Space direction="vertical" className="w-full">
                <Button block icon={<ReloadOutlined />}>
                  {t('clearCache')}
                </Button>
                <Button block icon={<DatabaseOutlined />}>
                  {t('optimizeDatabase')}
                </Button>
                <Button block icon={<SecurityScanOutlined />}>
                  {t('securityScan')}
                </Button>
              </Space>
            </Card>
          </div>
        </div>
      </Form>
    </div>
  );
};

export default SystemSettingsPage;

pages/Admin/UsersManagementPage.tsx
import React, { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import { Table, Button, Space, Tag, Modal, Form, Input, Select, message } from 'antd';
import { PlusOutlined, EditOutlined, DeleteOutlined } from '@ant-design/icons';
import type { ColumnsType } from 'antd/es/table';
import api from '../../services/api';

interface User {
  id: string;
  email: string;
  full_name: string;
  role: string;
  is_active: boolean;
  created_at: string;
}

const UsersManagementPage: React.FC = () => {
  const { t } = useTranslation();
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(false);
  const [isModalVisible, setIsModalVisible] = useState(false);

  useEffect(() => {
    fetchUsers();
  }, []);

  const fetchUsers = async () => {
    setLoading(true);
    try {
      const response = await api.get('/admin/users');
      setUsers(response.data);
    } catch (error) {
      message.error(t('errorFetchingUsers'));
    } finally {
      setLoading(false);
    }
  };

  const columns: ColumnsType<User> = [
    {
      title: t('name'),
      dataIndex: 'full_name',
      key: 'full_name',
    },
    {
      title: t('email'),
      dataIndex: 'email',
      key: 'email',
    },
    {
      title: t('role'),
      dataIndex: 'role',
      key: 'role',
      render: (role: string) => <Tag>{t(role)}</Tag>,
    },
    {
      title: t('status'),
      dataIndex: 'is_active',
      key: 'is_active',
      render: (isActive: boolean) => (
        <Tag color={isActive ? 'green' : 'red'}>
          {isActive ? t('active') : t('inactive')}
        </Tag>
      ),
    },
    {
      title: t('actions'),
      key: 'actions',
      render: (_, record) => (
        <Space size="middle">
          <Button icon={<EditOutlined />} size="small">
            {t('edit')}
          </Button>
          <Button icon={<DeleteOutlined />} size="small" danger>
            {t('delete')}
          </Button>
        </Space>
      ),
    },
  ];

  return (
    <div>
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-2xl font-bold">{t('usersManagement')}</h2>
        <Button type="primary" icon={<PlusOutlined />}>
          {t('addUser')}
        </Button>
      </div>

      <Table
        columns={columns}
        dataSource={users}
        loading={loading}
        rowKey="id"
        pagination={{ pageSize: 10 }}
      />
    </div>
  );
};

export default UsersManagementPage;


src/pages/Auth/AuthPages.css
/* frontend/src/pages/AuthPages.css */
.auth-container {
  min-height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 20px;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  position: relative;
}

.auth-background {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grid" width="10" height="10" patternUnits="userSpaceOnUse"><path d="M 10 0 L 0 0 0 10" fill="none" stroke="rgba(255,255,255,0.1)" stroke-width="0.5"/></pattern></defs><rect width="100" height="100" fill="url(%23grid)"/></svg>');
}

.auth-overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.3);
}

.auth-card {
  width: 100%;
  max-width: 440px;
  border-radius: 12px;
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
  backdrop-filter: blur(10px);
  background: rgba(255, 255, 255, 0.95);
  border: 1px solid rgba(255, 255, 255, 0.2);
}

.register-card {
  max-width: 500px;
}

.auth-header {
  text-align: center;
  margin-bottom: 24px;
}

.auth-title {
  color: #1f2937;
  margin-bottom: 8px !important;
  font-weight: 600;
}

.auth-subtitle {
  color: #6b7280;
  font-size: 14px;
}

.auth-alert {
  margin-bottom: 20px;
  border-radius: 8px;
}

.auth-steps {
  margin-bottom: 32px;
}

.auth-submit-btn {
  height: 48px;
  border-radius: 8px;
  font-weight: 600;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  border: none;
}

.auth-submit-btn:hover {
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
}

.auth-next-btn {
  height: 48px;
  border-radius: 8px;
  font-weight: 600;
}

.auth-links {
  text-align: center;
  margin: 16px 0;
}

.auth-link {
  color: #667eea;
  text-decoration: none;
  font-size: 14px;
}

.auth-link:hover {
  text-decoration: underline;
  color: #5a67d8;
}

.auth-link-primary {
  color: #667eea;
  text-decoration: none;
  font-weight: 500;
}

.auth-link-primary:hover {
  text-decoration: underline;
  color: #5a67d8;
}

.auth-footer {
  text-align: center;
  margin-top: 24px;
  padding-top: 16px;
  border-top: 1px solid #e5e7eb;
}

.demo-buttons {
  margin-bottom: 20px;
}

.demo-btn {
  border-radius: 6px;
  font-weight: 500;
}

.demo-btn.admin {
  background: linear-gradient(135deg, #f56565 0%, #e53e3e 100%);
  color: white;
  border: none;
}

.demo-btn.lawyer {
  background: linear-gradient(135deg, #4299e1 0%, #3182ce 100%);
  color: white;
  border: none;
}

.demo-btn.assistant {
  background: linear-gradient(135deg, #48bb78 0%, #38a169 100%);
  color: white;
  border: none;
}

.demo-btn:hover {
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.auth-navigation {
  margin-top: 24px;
}

/* Анімації */
.auth-card {
  animation: slideUp 0.5s ease-out;
}

@keyframes slideUp {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Адаптивність */
@media (max-width: 768px) {
  .auth-container {
    padding: 16px;
  }
  
  .auth-card {
    margin: 0;
    box-shadow: none;
    background: white;
  }
  
  .demo-buttons .ant-col {
    margin-bottom: 8px;
  }
}

src/pages/Auth/LoginPage.css
/* frontend/src/pages/LoginPage.css */
.login-container {
  min-height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: #f0f2f5;
  padding: 16px;
}

.login-card {
  width: 100%;
  max-width: 400px;
  padding: 32px;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.text-center {
  text-align: center;
}

src/pages/Auth/LoginPage.tsx
import React from 'react';
import { Card, Form, Input, Button, Typography } from 'antd';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';

const { Title } = Typography;

const LoginPage: React.FC = () => {
  const navigate = useNavigate();
  const { login } = useAuth();

  const onFinish = (values: any) => {
    // Демо-авторизація
    const demoToken = 'demo-token';
    const demoUser = {
      full_name: 'Дмитро Лапоші',
      role: 'lawyer',
      email: values.email,
      firstName: 'Дмитро',
      lastName: 'Лапоші'
    };

    login(demoToken, demoUser);
    navigate('/dashboard'); // ← це важливо!
  };

  return (
    <div style={{ minHeight: '100vh', display: 'flex', alignItems: 'center', justifyContent: 'center', background: '#f0f2f5' }}>
      <Card style={{ width: 400 }}>
        <Title level={2} style={{ textAlign: 'center' }}>Вхід</Title>
        <Form onFinish={onFinish} layout="vertical">
          <Form.Item name="email" label="Email" rules={[{ required: true }]}>
            <Input />
          </Form.Item>
          <Form.Item name="password" label="Пароль" rules={[{ required: true }]}>
            <Input.Password />
          </Form.Item>
          <Form.Item>
            <Button type="primary" htmlType="submit" block>Увійти</Button>
          </Form.Item>
        </Form>
      </Card>
    </div>
  );
};

export default LoginPage;

src/pages/RegisterPage.tsx
import React from 'react';
import { useTranslation } from 'react-i18next';
import { Button, Form, Input } from 'antd';
import { useAuth } from '../../../contexts/AuthContext';

const RegisterPage: React.FC = () => {
  const { t } = useTranslation();
  const { register } = useAuth();

  const onFinish = (values: any) => {
    register(values.email, values.password);
  };

  return (
    <div className="register-page">
      <h2>{t('register')}</h2>
      <Form onFinish={onFinish}>
        <Form.Item
          name="email"
          rules={[{ required: true, message: t('emailRequired') }]}
        >
          <Input placeholder={t('email')} />
        </Form.Item>
        <Form.Item
          name="password"
          rules={[{ required: true, message: t('passwordRequired') }]}
        >
          <Input.Password placeholder={t('password')} />
        </Form.Item>
        <Form.Item>
          <Button type="primary" htmlType="submit" className="register-form-button">
            {t('register')}
          </Button>
        </Form.Item>
      </Form>
    </div>
  );
};

export default RegisterPage;

src/pages/Calendar/CalendarPage.tsx
// frontend/src/pages/CalendarPage.tsx
import React from 'react';
import { useTranslation } from 'react-i18next';
import { Typography, Card } from 'antd';
import Calendar from '@fullcalendar/react';
import dayGridPlugin from '@fullcalendar/daygrid';
import timeGridPlugin from '@fullcalendar/timegrid';
import listPlugin from '@fullcalendar/list';
import dayjs from 'dayjs';

const { Title } = Typography;

interface Event {
  title: string;
  start: string;
  end: string;
  extendedProps: {
    description: string;
  };
}

const CalendarPage: React.FC = () => {
  const { t } = useTranslation();

  const events: Event[] = [
    {
      title: 'Case Hearing',
      start: dayjs('2025-09-19T10:00:00').toISOString(),
      end: dayjs('2025-09-19T12:00:00').toISOString(),
      extendedProps: {
        description: 'Kyiv District Court',
      },
    },
    {
      title: 'Appeal Deadline',
      start: dayjs('2025-09-21T09:00:00').toISOString(),
      end: dayjs('2025-09-21T11:00:00').toISOString(),
      extendedProps: {
        description: 'Appeal Court',
      },
    },
  ];

  return (
    <div>
      <Title level={2}>{t('calendar')}</Title>
      <Card className="mb-6">
        <Calendar
          plugins={[dayGridPlugin, timeGridPlugin, listPlugin]}
          initialView="dayGridMonth"
          events={events}
          eventContent={(arg: any) => (
            <div>
              <strong>{arg.event.title}</strong>
              <div>{arg.event.extendedProps.description}</div>
            </div>
          )}
        />
      </Card>
    </div>
  );
};

export default CalendarPage;

src/pages/Cases/CaseDetailPage.tsx
import React, { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import { useParams, useNavigate } from 'react-router-dom';
import { Card, Button, Typography, Descriptions, Tag, Timeline, message, Spin, Row, Col } from 'antd';
import { ArrowLeftOutlined, EditOutlined, FileTextOutlined } from '@ant-design/icons';
import { demoApi } from "../../services/api";

const { Title, Text } = Typography;

interface CaseDetail {
  id: string;
  number: string;
  title: string;
  client: string;
  status: string;
  stage: string;
  description: string;
  hourly_rate: number;
  budget: number;
  created_at: string;
  updated_at: string;
}

const CaseDetailPage: React.FC = () => {
  const { t } = useTranslation();
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [caseData, setCaseData] = useState<CaseDetail | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchCaseDetail();
  }, [id]);

  const fetchCaseDetail = async () => {
    try {
      const response = await api.get(`/cases/${id}`);
      setCaseData(response.data);
    } catch (error) {
      message.error(t('errorFetchingCase'));
    } finally {
      setLoading(false);
    }
  };

  if (loading) return <Spin size="large" className="center-spin" />;

  return (
    <div>
      <Button icon={<ArrowLeftOutlined />} onClick={() => navigate('/cases')} className="mb-4">
        {t('backToList')}
      </Button>

      <Row gutter={16}>
        <Col span={16}>
          <Card>
            <Title level={2}>{caseData?.title}</Title>
            <Text type="secondary">#{caseData?.number}</Text>

            <Descriptions column={2} className="mt-6">
              <Descriptions.Item label={t('client')}>{caseData?.client}</Descriptions.Item>
              <Descriptions.Item label={t('status')}>
                <Tag color={caseData?.status === 'pending' ? 'blue' : 'green'}>{t(caseData?.status || '')}</Tag>
              </Descriptions.Item>
              <Descriptions.Item label={t('stage')}>{t(caseData?.stage || '')}</Descriptions.Item>
              <Descriptions.Item label={t('hourlyRate')}>${caseData?.hourly_rate}/h</Descriptions.Item>
              <Descriptions.Item label={t('budget')}>${caseData?.budget}</Descriptions.Item>
            </Descriptions>

            <div className="mt-6">
              <Title level={4}>{t('description')}</Title>
              <Text>{caseData?.description || t('noDescription')}</Text>
            </div>
          </Card>
        </Col>

        <Col span={8}>
          <Card title={t('actions')}>
            <Button type="primary" icon={<EditOutlined />} block className="mb-2">
              {t('editCase')}
            </Button>
            <Button icon={<FileTextOutlined />} block>
              {t('viewDocuments')}
            </Button>
          </Card>

          <Card title={t('recentActivity')} className="mt-4">
            <Timeline>
              <Timeline.Item>{t('caseCreated')}</Timeline.Item>
              <Timeline.Item>{t('lastUpdated')}</Timeline.Item>
            </Timeline>
          </Card>
        </Col>
      </Row>
    </div>
  );
};

export default CaseDetailPage;

src/pages/Cases/CasesPage.tsx
import React, { useState, useEffect, useCallback } from 'react';
import { useTranslation } from 'react-i18next';
import {
  Table,
  Button,
  Space,
  Tag,
  Modal,
  Form,
  Input,
  DatePicker,
  Select,
  message
} from 'antd';
import type { ColumnsType } from 'antd/es/table';
import { PlusOutlined } from '@ant-design/icons';
import { demoApi } from "../../services/api";

interface Case {
  id: string;
  number: string;
  title: string;
  client: string;
  status: string;
  stage: string;
  due_date: string;
  hourly_rate: number;
  budget: number;
}

const { Option } = Select;

const CasesPage: React.FC = () => {
  const { t } = useTranslation();
  const [cases, setCases] = useState<Case[]>([]);
  const [loading, setLoading] = useState(false);
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [form] = Form.useForm();

  const fetchCases = useCallback(async () => {
    setLoading(true);
    try {
      const response = await api.get('/cases');
      setCases(response.data);
    } catch (error) {
      message.error(t('errorFetchingCases'));
    } finally {
      setLoading(false);
    }
  }, [t]);

  useEffect(() => {
    fetchCases();
  }, [fetchCases]);

  const columns: ColumnsType<Case> = [
    {
      title: t('number'),
      dataIndex: 'number',
      key: 'number',
    },
    {
      title: t('title'),
      dataIndex: 'title',
      key: 'title',
    },
    {
      title: t('client'),
      dataIndex: 'client',
      key: 'client',
    },
    {
      title: t('status'),
      dataIndex: 'status',
      key: 'status',
      render: (status: string) => {
        let color = 'blue';
        if (status === 'closed') color = 'green';
        if (status === 'on_hold') color = 'orange';
        if (status === 'archived') color = 'gray';
        return <Tag color={color}>{t(status)}</Tag>;
      },
    },
    {
      title: t('stage'),
      dataIndex: 'stage',
      key: 'stage',
    },
    {
      title: t('dueDate'),
      dataIndex: 'due_date',
      key: 'due_date',
      render: (date: string) => date ? new Date(date).toLocaleDateString() : '-',
    },
    {
      title: t('actions'),
      key: 'action',
      render: (_, record) => (
        <Space size="middle">
          <Button type="link" onClick={() => console.log(`Edit case ${record.id}`)}>
            {t('edit')}
          </Button>
          <Button type="link" onClick={() => console.log(`View case ${record.id}`)}>
            {t('view')}
          </Button>
        </Space>
      ),
    },
  ];

  const handleOk = async () => {
    try {
      const values = await form.validateFields();
      // Логіка створення справи
      await api.post('/cases', values);
      message.success(t('caseCreated'));
      setIsModalVisible(false);
      form.resetFields();
      fetchCases();
    } catch (error) {
      message.error(t('errorCreatingCase'));
    }
  };

  const handleCancel = () => {
    setIsModalVisible(false);
    form.resetFields();
  };

  return (
    <div>
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-2xl font-bold">{t('cases')}</h2>
        <Button
          type="primary"
          icon={<PlusOutlined />}
          onClick={() => setIsModalVisible(true)}
        >
          {t('addCase')}
        </Button>
      </div>

      <Table
        columns={columns}
        dataSource={cases}
        loading={loading}
        rowKey="id"
        pagination={{ pageSize: 10 }}
      />

      <Modal
        title={t('createCase')}
        open={isModalVisible}
        onOk={handleOk}
        onCancel={handleCancel}
        okText={t('create')}
        cancelText={t('cancel')}
      >
        <Form form={form} layout="vertical">
          <Form.Item
            name="number"
            label={t('caseNumber')}
            rules={[{ required: true, message: t('caseNumberRequired') }]}
          >
            <Input placeholder={t('caseNumber')} />
          </Form.Item>
          <Form.Item
            name="title"
            label={t('caseTitle')}
            rules={[{ required: true, message: t('caseTitleRequired') }]}
          >
            <Input placeholder={t('caseTitle')} />
          </Form.Item>
          <Form.Item
            name="client"
            label={t('client')}
            rules={[{ required: true, message: t('clientRequired') }]}
          >
            <Select placeholder={t('selectClient')}>
              <Option value="client1">Петренко Іван</Option>
              <Option value="client2">ТОВ "ЮрФірма"</Option>
            </Select>
          </Form.Item>
          <Form.Item
            name="status"
            label={t('status')}
          >
            <Select placeholder={t('selectStatus')}>
              <Option value="pending">{t('pending')}</Option>
              <Option value="in_progress">{t('in_progress')}</Option>
              <Option value="completed">{t('completed')}</Option>
            </Select>
          </Form.Item>
          <Form.Item
            name="stage"
            label={t('stage')}
          >
            <Select placeholder={t('selectStage')}>
              <Option value="pending">{t('pending')}</Option>
              <Option value="in_progress">{t('in_progress')}</Option>
              <Option value="completed">{t('completed')}</Option>
            </Select>
          </Form.Item>
          <Form.Item
            name="due_date"
            label={t('dueDate')}
          >
            <DatePicker style={{ width: '100%' }} />
          </Form.Item>
          <Form.Item
            name="hourly_rate"
            label={t('hourlyRate')}
          >
            <Input placeholder={t('hourlyRate')} type="number" />
          </Form.Item>
          <Form.Item
            name="budget"
            label={t('budget')}
          >
            <Input placeholder={t('budget')} type="number" />
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
};

export default CasesPage;


src/pages/Clients/ClientDetailPage.tsx
import React from 'react';

const ClientDetailPage: React.FC = () => {
  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">Деталі клієнта</h1>
      <p>Тут буде детальна інформація про клієнта</p>
    </div>
  );
};

export default ClientDetailPage;

src/pages/Clients/ClientsPage.tsx
import React, { useState, useEffect, useCallback } from 'react';
import { useTranslation } from 'react-i18next';
import {
  List,
  Avatar,
  Button,
  Space,
  Tag,
  Modal,
  Form,
  Input,
  Select,
  message
} from 'antd';
import { PlusOutlined, TeamOutlined } from '@ant-design/icons';
import { demoApi } from "../../services/api";

interface Client {
  id: string;
  type: string;
  name: string;
  edrpou: string;
  drfo: string;
  emails: string[];
  phones: string[];
  address: string;
  kyc_status: string;
}

const { Option } = Select;

const ClientsPage: React.FC = () => {
  const { t } = useTranslation();
  const [clients, setClients] = useState<Client[]>([]);
  const [loading, setLoading] = useState(false);
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [form] = Form.useForm();

  const fetchClients = useCallback(async () => {
    setLoading(true);
    try {
      const response = await api.get('/clients');
      setClients(response.data);
    } catch (error) {
      message.error(t('errorFetchingClients'));
    } finally {
      setLoading(false);
    }
  }, [t]);

  useEffect(() => {
    fetchClients();
  }, [fetchClients]);

  const handleOk = async () => {
    try {
      await form.validateFields();
      // Тут буде логіка створення клієнта
      message.success(t('clientCreated'));
      setIsModalVisible(false);
      form.resetFields();
      fetchClients();
    } catch (error) {
      message.error(t('errorCreatingClient'));
    }
  };

  const handleCancel = () => {
    setIsModalVisible(false);
    form.resetFields();
  };

  return (
    <div>
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-2xl font-bold">{t('clients')}</h2>
        <Button
          type="primary"
          icon={<PlusOutlined />}
          onClick={() => setIsModalVisible(true)}
        >
          {t('addClient')}
        </Button>
      </div>

      <List
        itemLayout="horizontal"
        dataSource={clients}
        loading={loading}
        renderItem={(item) => (
          <List.Item>
            <List.Item.Meta
              avatar={<Avatar icon={<TeamOutlined />} />}
              title={<span>{item.name}</span>}
              description={
                <Space direction="vertical">
                  <div>
                    {t('type')}: <Tag>{t(item.type)}</Tag>
                  </div>
                  <div>
                    {t('kycStatus')}: <Tag>{t(item.kyc_status)}</Tag>
                  </div>
                  <div>
                    {t('email')}: {item.emails?.join(', ') || t('noEmails')}
                  </div>
                  <div>
                    {t('phone')}: {item.phones?.join(', ') || t('noPhones')}
                  </div>
                </Space>
              }
            />
            <Space size="middle">
              <Button type="link" onClick={() => console.log(`Edit client ${item.id}`)}>
                {t('edit')}
              </Button>
              <Button type="link" onClick={() => console.log(`View client ${item.id}`)}>
                {t('view')}
              </Button>
            </Space>
          </List.Item>
        )}
      />

      {/* Модальне вікно для створення клієнта */}
      <Modal
        title={t('createClient')}
        visible={isModalVisible}
        onOk={handleOk}
        onCancel={handleCancel}
        okText={t('create')}
        cancelText={t('cancel')}
      >
        <Form form={form} layout="vertical">
          <Form.Item
            name="type"
            label={t('clientType')}
            rules={[{ required: true, message: t('clientTypeRequired') }]}
          >
            <Select placeholder={t('selectType')}>
              <Option value="person">{t('person')}</Option>
              <Option value="company">{t('company')}</Option>
            </Select>
          </Form.Item>
          <Form.Item
            name="name"
            label={t('fullName')}
            rules={[{ required: true, message: t('fullNameRequired') }]}
          >
            <Input placeholder={t('fullName')} />
          </Form.Item>
          <Form.Item
            name="edrpou"
            label={t('edrpou')}
          >
            <Input placeholder={t('edrpou')} />
          </Form.Item>
          <Form.Item
            name="drfo"
            label={t('drfo')}
          >
            <Input placeholder={t('drfo')} />
          </Form.Item>
          <Form.Item
            name="emails"
            label={t('emails')}
          >
            <Select mode="tags" placeholder={t('enterEmails')} />
          </Form.Item>
          <Form.Item
            name="phones"
            label={t('phones')}
          >
            <Select mode="tags" placeholder={t('enterPhones')} />
          </Form.Item>
          <Form.Item
            name="address"
            label={t('address')}
          >
            <Input.TextArea placeholder={t('address')} />
          </Form.Item>
          <Form.Item
            name="kyc_status"
            label={t('kycStatus')}
          >
            <Select placeholder={t('selectKYCStatus')}>
              <Option value="unknown">{t('unknown')}</Option>
              <Option value="pending">{t('pending')}</Option>
              <Option value="verified">{t('verified')}</Option>
              <Option value="rejected">{t('rejected')}</Option>
            </Select>
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
};

export default ClientsPage;

src/pages/Dashboard/DashboardPage.tsx
import React from 'react';
import { useTranslation } from 'react-i18next';
import {
  Card,
  Col,
  Row,
  Statistic,
  Button,
  Typography
} from 'antd';
import {
  FileTextOutlined,
  TeamOutlined,
  ClockCircleOutlined,
  DollarCircleOutlined
} from '@ant-design/icons';

const { Title } = Typography;

const DashboardPage: React.FC = () => {
  const { t } = useTranslation();

  return (
    <div>
      <Title level={2}>{t('dashboard')}</Title>

      {/* Статистика */}
      <Row gutter={[16, 16]} className="mb-6">
        <Col xs={24} sm={12} md={8} lg={6}>
          <Card>
            <Statistic
              title={t('cases')}
              value={12}
              prefix={<FileTextOutlined />}
            />
          </Card>
        </Col>
        <Col xs={24} sm={12} md={8} lg={6}>
          <Card>
            <Statistic
              title={t('clients')}
              value={8}
              prefix={<TeamOutlined />}
            />
          </Card>
        </Col>
        <Col xs={24} sm={12} md={8} lg={6}>
          <Card>
            <Statistic
              title={t('hoursTracked')}
              value={42.5}
              prefix={<ClockCircleOutlined />}
            />
          </Card>
        </Col>
        <Col xs={24} sm={12} md={8} lg={6}>
          <Card>
            <Statistic
              title={t('income')}
              value={12450}
              prefix={<DollarCircleOutlined />}
              suffix="₴"
            />
          </Card>
        </Col>
      </Row>

      {/* Швидкі дії */}
      <Card title={t('quickActions')} className="mb-6">
        <Row gutter={[16, 16]}>
          <Col>
            <Button type="primary" icon={<FileTextOutlined />}>
              {t('addCase')}
            </Button>
          </Col>
          <Col>
            <Button icon={<TeamOutlined />}>
              {t('addClient')}
            </Button>
          </Col>
          <Col>
            <Button icon={<DollarCircleOutlined />}>
              {t('createInvoice')}
            </Button>
          </Col>
          <Col>
            <Button icon={<ClockCircleOutlined />}>
              {t('startTimer')}
            </Button>
          </Col>
        </Row>
      </Card>

      {/* Найближчі події */}
      <Card title={t('upcomingHearings')} className="mb-6">
        <ul>
          <li>🔹 19.09.2025 — Case #123 — Kyiv District Court</li>
          <li>🔹 21.09.2025 — Case #456 — Appeal Court</li>
        </ul>
      </Card>

      {/* Останні зміни */}
      <Card title={t('recentActivity')}>
        <ul>
          <li>🕒 18.09.2025 — Updated case #789</li>
          <li>🕒 17.09.2025 — Created new client</li>
        </ul>
      </Card>
    </div>
  );
};

export default DashboardPage;

src/pages/Hearings/HearingsPage.tsx
import React from 'react';

const HearingsPage: React.FC = () => {
  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">Слухання справ</h1>
      <p>Тут буде список слухань справ</p>
    </div>
  );
};

export default HearingsPage;

src/pages/Integrations/IntegrationsPage.tsx
import React, { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import { 
  Card, 
  Button, 
  Switch, 
  List, 
  Tag, 
  Space, 
  Modal, 
  Form, 
  Input, 
  message,
  Divider,
  Typography,
  Alert
} from 'antd';
import { 
  LinkOutlined, 
  CheckOutlined, 
  CloseOutlined,
  SettingOutlined,
  DisconnectOutlined
} from '@ant-design/icons';

const { Text } = Typography;

interface Integration {
  id: string;
  name: string;
  description: string;
  category: string;
  is_connected: boolean;
  api_key?: string;
  webhook_url?: string;
  last_sync?: string;
}

const IntegrationsPage: React.FC = () => {
  const { t } = useTranslation();
  const [integrations, setIntegrations] = useState<Integration[]>([]);
  const [loading, setLoading] = useState(false);
  const [isConfigModalVisible, setIsConfigModalVisible] = useState(false);
  const [selectedIntegration, setSelectedIntegration] = useState<Integration | null>(null);
  const [form] = Form.useForm();

  const demoIntegrations: Integration[] = [
    {
      id: '1',
      name: 'Google Calendar',
      description: 'Синхронізація засідань та подій',
      category: 'calendar',
      is_connected: true,
      last_sync: '2024-01-20 14:30:00'
    },
    {
      id: '2',
      name: 'Microsoft Office 365',
      description: 'Інтеграція з Word, Excel та Outlook',
      category: 'office',
      is_connected: false
    },
    {
      id: '3',
      name: 'Dropbox',
      description: 'Зберігання та синхронізація документів',
      category: 'storage',
      is_connected: true,
      last_sync: '2024-01-20 12:15:00'
    },
    {
      id: '4',
      name: 'Slack',
      description: 'Сповіщення та комунікація',
      category: 'communication',
      is_connected: false
    },
    {
      id: '5',
      name: 'Zoom',
      description: 'Відеоконференції та зустрічі',
      category: 'video',
      is_connected: true
    },
    {
      id: '6',
      name: 'E-signature',
      description: 'Електронний підпис документів',
      category: 'documents',
      is_connected: false
    }
  ];

  useEffect(() => {
    fetchIntegrations();
  }, []);

  const fetchIntegrations = async () => {
    setLoading(true);
    try {
      setIntegrations(demoIntegrations);
    } catch (error) {
      message.error(t('errorFetchingIntegrations'));
    } finally {
      setLoading(false);
    }
  };

  const handleToggleIntegration = async (integration: Integration) => {
    try {
      setIntegrations(prev => 
        prev.map(item => 
          item.id === integration.id 
            ? { ...item, is_connected: !item.is_connected }
            : item
        )
      );
      
      message.success(
        integration.is_connected 
          ? t('integrationDisconnected') 
          : t('integrationConnected')
      );
    } catch (error) {
      message.error(t('errorTogglingIntegration'));
    }
  };

  const handleConfigure = (integration: Integration) => {
    setSelectedIntegration(integration);
    form.setFieldsValue({
      api_key: integration.api_key || '',
      webhook_url: integration.webhook_url || ''
    });
    setIsConfigModalVisible(true);
  };

  const handleSaveConfiguration = async (values: any) => {
    try {
      if (selectedIntegration) {
        setIntegrations(prev => 
          prev.map(item => 
            item.id === selectedIntegration.id 
              ? { ...item, ...values }
              : item
          )
        );
        setIsConfigModalVisible(false);
        setSelectedIntegration(null);
        form.resetFields();
        message.success(t('configurationSaved'));
      }
    } catch (error) {
      message.error(t('errorSavingConfiguration'));
    }
  };

  const getCategoryColor = (category: string) => {
    const colors: { [key: string]: string } = {
      calendar: 'blue',
      office: 'green',
      storage: 'orange',
      communication: 'purple',
      video: 'red',
      documents: 'cyan'
    };
    return colors[category] || 'default';
  };

  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <div>
          <h2 className="text-2xl font-bold">{t('integrations')}</h2>
          <Text type="secondary">{t('integrationsDescription')}</Text>
        </div>
      </div>

      <Alert
        message={t('integrationsWarning')}
        type="info"
        showIcon
        className="mb-6"
      />

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {integrations.map(integration => (
          <Card
            key={integration.id}
            loading={loading}
            actions={[
              <Switch
                key="toggle"
                checked={integration.is_connected}
                onChange={() => handleToggleIntegration(integration)}
                checkedChildren={<CheckOutlined />}
                unCheckedChildren={<CloseOutlined />}
              />,
              <Button
                key="configure"
                type="link"
                icon={<SettingOutlined />}
                onClick={() => handleConfigure(integration)}
                disabled={!integration.is_connected}
              >
                {t('configure')}
              </Button>
            ]}
          >
            <Card.Meta
              avatar={<LinkOutlined className="text-2xl" />}
              title={
                <Space>
                  {integration.name}
                  <Tag color={getCategoryColor(integration.category)}>
                    {t(integration.category)}
                  </Tag>
                </Space>
              }
              description={
                <div>
                  <Text>{integration.description}</Text>
                  {integration.is_connected && integration.last_sync && (
                    <div className="mt-2">
                      <Text type="secondary" className="text-xs">
                        {t('lastSync')}: {integration.last_sync}
                      </Text>
                    </div>
                  )}
                </div>
              }
            />
          </Card>
        ))}
      </div>

      {/* Модальне вікно конфігурації */}
      <Modal
        title={`${t('configure')} ${selectedIntegration?.name}`}
        open={isConfigModalVisible}
        onCancel={() => {
          setIsConfigModalVisible(false);
          setSelectedIntegration(null);
          form.resetFields();
        }}
        footer={null}
        width={600}
      >
        <Form
          form={form}
          layout="vertical"
          onFinish={handleSaveConfiguration}
        >
          <Form.Item
            name="api_key"
            label={t('apiKey')}
          >
            <Input.Password placeholder={t('enterApiKey')} />
          </Form.Item>
          
          <Form.Item
            name="webhook_url"
            label={t('webhookUrl')}
          >
            <Input placeholder={t('enterWebhookUrl')} />
          </Form.Item>
          
          <Form.Item className="mb-0">
            <Space>
              <Button type="primary" htmlType="submit">
                {t('save')}
              </Button>
              <Button onClick={() => {
                setIsConfigModalVisible(false);
                setSelectedIntegration(null);
                form.resetFields();
              }}>
                {t('cancel')}
              </Button>
            </Space>
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
};

export default IntegrationsPage;

src/pages/Invoices/InvoicesPage.tsx
import React, { useState, useEffect, useCallback } from 'react';
import { useTranslation } from 'react-i18next';
import {
  Table,
  Button,
  Space,
  Tag,
  Modal,
  Form,
  Input,
  DatePicker,
  Select,
  message
} from 'antd';
import type { ColumnsType } from 'antd/es/table';
import { PlusOutlined } from '@ant-design/icons';
import { demoApi } from "../../services/api";

interface Invoice {
  id: string;
  number: string;
  client: string;
  amount: number;
  status: string;
  due_date: string;
}

const { Option } = Select;

const InvoicesPage: React.FC = () => {
  const { t } = useTranslation();
  const [invoices, setInvoices] = useState<Invoice[]>([]);
  const [loading, setLoading] = useState(false);
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [form] = Form.useForm();

  const fetchInvoices = useCallback(async () => {
    setLoading(true);
    try {
      const response = await api.get('/invoices');
      setInvoices(response.data);
    } catch (error) {
      message.error(t('errorFetchingInvoices'));
    } finally {
      setLoading(false);
    }
  }, [t]);

  useEffect(() => {
    fetchInvoices();
  }, [fetchInvoices]);

  const columns: ColumnsType<Invoice> = [
    {
      title: t('number'),
      dataIndex: 'number',
      key: 'number',
    },
    {
      title: t('client'),
      dataIndex: 'client',
      key: 'client',
    },
    {
      title: t('amount'),
      dataIndex: 'amount',
      key: 'amount',
      render: (amount: number) => (
        <span>{amount.toLocaleString()} ₴</span>
      ),
    },
    {
      title: t('status'),
      dataIndex: 'status',
      key: 'status',
      render: (status: string) => {
        let color = 'blue';
        if (status === 'paid') color = 'green';
        if (status === 'overdue') color = 'red';
        if (status === 'draft') color = 'gray';
        return <Tag color={color}>{t(status)}</Tag>;
      },
    },
    {
      title: t('dueDate'),
      dataIndex: 'due_date',
      key: 'due_date',
    },
    {
      title: t('actions'),
      key: 'action',
      render: (_, record) => (
        <Space size="middle">
          <Button type="link" onClick={() => console.log(`Edit invoice ${record.id}`)}>
            {t('edit')}
          </Button>
          <Button type="link" onClick={() => console.log(`View invoice ${record.id}`)}>
            {t('view')}
          </Button>
        </Space>
      ),
    },
  ];

  const handleOk = async () => {
    try {
      await form.validateFields();
      // Тут буде логіка створення рахунку
      message.success(t('invoiceCreated'));
      setIsModalVisible(false);
      form.resetFields();
      fetchInvoices();
    } catch (error) {
      message.error(t('errorCreatingInvoice'));
    }
  };

  const handleCancel = () => {
    setIsModalVisible(false);
    form.resetFields();
  };

  return (
    <div>
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-2xl font-bold">{t('invoices')}</h2>
        <Button
          type="primary"
          icon={<PlusOutlined />}
          onClick={() => setIsModalVisible(true)}
        >
          {t('createInvoice')}
        </Button>
      </div>

      <Table
        columns={columns}
        dataSource={invoices}
        loading={loading}
        rowKey="id"
        pagination={{ pageSize: 10 }}
      />

      {/* Модальне вікно для створення рахунку */}
      <Modal
        title={t('createInvoice')}
        visible={isModalVisible}
        onOk={handleOk}
        onCancel={handleCancel}
        okText={t('create')}
        cancelText={t('cancel')}
      >
        <Form form={form} layout="vertical">
          <Form.Item
            name="number"
            label={t('invoiceNumber')}
            rules={[{ required: true, message: t('invoiceNumberRequired') }]}
          >
            <Input placeholder={t('invoiceNumber')} />
          </Form.Item>
          <Form.Item
            name="client"
            label={t('client')}
            rules={[{ required: true, message: t('clientRequired') }]}
          >
            <Select placeholder={t('selectClient')}>
              <Option value="client1">Петренко Іван</Option>
              <Option value="client2">ТОВ "ЮрФірма"</Option>
            </Select>
          </Form.Item>
          <Form.Item
            name="amount"
            label={t('amount')}
            rules={[{ required: true, message: t('amountRequired') }]}
          >
            <Input placeholder={t('amount')} type="number" />
          </Form.Item>
          <Form.Item
            name="status"
            label={t('status')}
          >
            <Select placeholder={t('selectStatus')}>
              <Option value="draft">{t('draft')}</Option>
              <Option value="sent">{t('sent')}</Option>
              <Option value="paid">{t('paid')}</Option>
              <Option value="overdue">{t('overdue')}</Option>
            </Select>
          </Form.Item>
          <Form.Item
            name="due_date"
            label={t('dueDate')}
          >
            <DatePicker style={{ width: '100%' }} />
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
};

export default InvoicesPage;

src/pages/Profile/BillingPage.tsx
import React, { useState } from 'react';
import { useTranslation } from 'react-i18next';
import { 
  Card, 
  Table, 
  Tag, 
  Button, 
  Space, 
  Statistic, 
  Row, 
  Col,
  List,
  Typography,
  Divider,
  Modal,
  Form,
  Input,
  Select,
  message
} from 'antd';
import { 
  DownloadOutlined, 
  PlusOutlined,
  CreditCardOutlined,
  HistoryOutlined
} from '@ant-design/icons';

const { Title, Text } = Typography;

interface Invoice {
  id: string;
  number: string;
  date: string;
  amount: number;
  status: 'paid' | 'pending' | 'overdue';
  due_date: string;
}

interface PaymentMethod {
  id: string;
  type: string;
  last4: string;
  expiry: string;
  is_default: boolean;
}

const BillingPage: React.FC = () => {
  const { t } = useTranslation();
  const [invoices, setInvoices] = useState<Invoice[]>([]);
  const [paymentMethods, setPaymentMethods] = useState<PaymentMethod[]>([]);
  const [isPaymentModalVisible, setIsPaymentModalVisible] = useState(false);
  const [form] = Form.useForm();

  const demoInvoices: Invoice[] = [
    {
      id: '1',
      number: 'INV-2024-001',
      date: '2024-01-01',
      amount: 2990,
      status: 'paid',
      due_date: '2024-01-31'
    },
    {
      id: '2',
      number: 'INV-2024-002',
      date: '2024-02-01',
      amount: 2990,
      status: 'pending',
      due_date: '2024-02-28'
    }
  ];

  const demoPaymentMethods: PaymentMethod[] = [
    {
      id: '1',
      type: 'visa',
      last4: '4242',
      expiry: '12/25',
      is_default: true
    }
  ];

  const columns = [
    {
      title: t('invoiceNumber'),
      dataIndex: 'number',
      key: 'number',
    },
    {
      title: t('date'),
      dataIndex: 'date',
      key: 'date',
    },
    {
      title: t('amount'),
      dataIndex: 'amount',
      key: 'amount',
      render: (amount: number) => `₴${amount}`,
    },
    {
      title: t('dueDate'),
      dataIndex: 'due_date',
      key: 'due_date',
    },
    {
      title: t('status'),
      dataIndex: 'status',
      key: 'status',
      render: (status: string) => (
        <Tag color={
          status === 'paid' ? 'green' : 
          status === 'pending' ? 'orange' : 'red'
        }>
          {t(status)}
        </Tag>
      ),
    },
    {
      title: t('actions'),
      key: 'actions',
      render: (_, record: Invoice) => (
        <Space>
          <Button size="small" icon={<DownloadOutlined />}>
            {t('download')}
          </Button>
          {record.status === 'pending' && (
            <Button type="link" size="small">
              {t('payNow')}
            </Button>
          )}
        </Space>
      ),
    },
  ];

  const handleAddPaymentMethod = async (values: any) => {
    try {
      const newMethod: PaymentMethod = {
        id: Date.now().toString(),
        type: values.card_type,
        last4: values.card_number.slice(-4),
        expiry: values.expiry,
        is_default: false
      };
      
      setPaymentMethods(prev => [...prev, newMethod]);
      setIsPaymentModalVisible(false);
      form.resetFields();
      message.success(t('paymentMethodAdded'));
    } catch (error) {
      message.error(t('errorAddingPaymentMethod'));
    }
  };

  return (
    <div className="max-w-6xl">
      <Row gutter={24} className="mb-6">
        <Col span={8}>
          <Card>
            <Statistic
              title={t('currentBalance')}
              value={0}
              precision={2}
              prefix="₴"
              valueStyle={{ color: '#3f8600' }}
            />
          </Card>
        </Col>
        <Col span={8}>
          <Card>
            <Statistic
              title={t('nextBillingDate')}
              value={1}
              suffix={t('February 2024')}
            />
          </Card>
        </Col>
        <Col span={8}>
          <Card>
            <Statistic
              title={t('plan')}
              value={t('professional')}
            />
          </Card>
        </Col>
      </Row>

      <Row gutter={24}>
        <Col span={16}>
          <Card 
            title={
              <Space>
                <HistoryOutlined />
                <span>{t('invoiceHistory')}</span>
              </Space>
            }
          >
            <Table
              columns={columns}
              dataSource={demoInvoices}
              rowKey="id"
              pagination={false}
            />
          </Card>
        </Col>
        
        <Col span={8}>
          {/* Способи оплати */}
          <Card 
            title={
              <Space>
                <CreditCardOutlined />
                <span>{t('paymentMethods')}</span>
              </Space}
            extra={
              <Button 
                type="link" 
                icon={<PlusOutlined />}
                onClick={() => setIsPaymentModalVisible(true)}
              >
                {t('add')}
              </Button>
            }
          >
            <List
              dataSource={demoPaymentMethods}
              renderItem={method => (
                <List.Item
                  actions={[
                    method.is_default ? (
                      <Tag color="blue">{t('default')}</Tag>
                    ) : (
                      <Button type="link" size="small">
                        {t('setDefault')}
                      </Button>
                    )
                  ]}
                >
                  <List.Item.Meta
                    title={`${method.type.toUpperCase()} •••• ${method.last4}`}
                    description={`${t('expires')} ${method.expiry}`}
                  />
                </List.Item>
              )}
            />
          </Card>

          <Card title={t('billingInformation')} className="mt-6">
            <Space direction="vertical">
              <Text strong>Адвокатська фірма Дмитра Лапоші</Text>
              <Text>вул. Юридична, 123</Text>
              <Text>Київ, 01001</Text>
              <Text>Україна</Text>
              <Button type="link" size="small">
                {t('edit')}
              </Button>
            </Space>
          </Card>
        </Col>
      </Row>

      {/* Модальне вікно додавання картки */}
      <Modal
        title={t('addPaymentMethod')}
        open={isPaymentModalVisible}
        onCancel={() => {
          setIsPaymentModalVisible(false);
          form.resetFields();
        }}
        footer={null}
      >
        <Form
          form={form}
          layout="vertical"
          onFinish={handleAddPaymentMethod}
        >
          <Form.Item
            name="card_type"
            label={t('cardType')}
            rules={[{ required: true, message: t('cardTypeRequired') }]}
          >
            <Select>
              <Select.Option value="visa">Visa</Select.Option>
              <Select.Option value="mastercard">MasterCard</Select.Option>
            </Select>
          </Form.Item>
          
          <Form.Item
            name="card_number"
            label={t('cardNumber')}
            rules={[
              { required: true, message: t('cardNumberRequired') },
              { len: 16, message: t('cardNumberLength') }
            ]}
          >
            <Input placeholder="1234 5678 9012 3456" />
          </Form.Item>
          
          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="expiry"
                label={t('expiryDate')}
                rules={[{ required: true, message: t('expiryDateRequired') }]}
              >
                <Input placeholder="MM/YY" />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="cvc"
                label="CVC"
                rules={[{ required: true, message: t('cvcRequired') }]}
              >
                <Input placeholder="123" />
              </Form.Item>
            </Col>
          </Row>
          
          <Form.Item className="mb-0">
            <Space>
              <Button type="primary" htmlType="submit">
                {t('addCard')}
              </Button>
              <Button onClick={() => {
                setIsPaymentModalVisible(false);
                form.resetFields();
              }}>
                {t('cancel')}
              </Button>
            </Space>
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
};

export default BillingPage;

src/pages/Profile/PreferencesSettings.tsx
import React, { useState } from 'react';
import { useTranslation } from 'react-i18next';
import { 
  Card, 
  Form, 
  Select, 
  Switch, 
  Button, 
  Space, 
  Divider,
  Radio,
  message
} from 'antd';
import { 
  SaveOutlined,
  GlobalOutlined,
  BellOutlined,
  EyeOutlined
} from '@ant-design/icons';

const PreferencesSettings: React.FC = () => {
  const { t, i18n } = useTranslation();
  const [loading, setLoading] = useState(false);
  const [form] = Form.useForm();

  const preferencesData = {
    language: 'uk',
    theme: 'light',
    date_format: 'dd.MM.yyyy',
    time_format: '24h',
    week_start: 'monday',
    email_notifications: true,
    push_notifications: true,
    desktop_notifications: false,
    compact_view: false,
    show_tutorials: true
  };

  const handleSavePreferences = async (values: any) => {
    setLoading(true);
    try {
      // Оновлення мови
      if (values.language !== i18n.language) {
        await i18n.changeLanguage(values.language);
      }
      
      // Тут буде API запит
      await new Promise(resolve => setTimeout(resolve, 500));
      message.success(t('preferencesSaved'));
    } catch (error) {
      message.error(t('errorSavingPreferences'));
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="max-w-4xl space-y-6">
      {/* Мова та регіон */}
      <Card title={
        <Space>
          <GlobalOutlined />
          <span>{t('languageRegion')}</span>
        </Space>
      }>
        <Form
          form={form}
          layout="vertical"
          initialValues={preferencesData}
          onFinish={handleSavePreferences}
        >
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <Form.Item name="language" label={t('language')}>
              <Select>
                <Select.Option value="uk">Українська</Select.Option>
                <Select.Option value="en">English</Select.Option>
              </Select>
            </Form.Item>
            
            <Form.Item name="theme" label={t('theme')}>
              <Select>
                <Select.Option value="light">{t('light')}</Select.Option>
                <Select.Option value="dark">{t('dark')}</Select.Option>
                <Select.Option value="auto">{t('auto')}</Select.Option>
              </Select>
            </Form.Item>
            
            <Form.Item name="date_format" label={t('dateFormat')}>
              <Select>
                <Select.Option value="dd.MM.yyyy">DD.MM.YYYY</Select.Option>
                <Select.Option value="MM/dd/yyyy">MM/DD/YYYY</Select.Option>
                <Select.Option value="yyyy-MM-dd">YYYY-MM-DD</Select.Option>
              </Select>
            </Form.Item>
            
            <Form.Item name="time_format" label={t('timeFormat')}>
              <Radio.Group>
                <Radio value="24h">24 {t('hour')}</Radio>
                <Radio value="12h">12 {t('hour')}</Radio>
              </Radio.Group>
            </Form.Item>
          </div>
        </Form>
      </Card>

      {/* Сповіщення */}
      <Card title={
        <Space>
          <BellOutlined />
          <span>{t('notifications')}</span>
        </Space>
      }>
        <Space direction="vertical" className="w-full">
          <div className="flex justify-between items-center">
            <div>
              <div className="font-medium">{t('emailNotifications')}</div>
              <div className="text-gray-600 text-sm">{t('emailNotificationsDescription')}</div>
            </div>
            <Form.Item name="email_notifications" valuePropName="checked" noStyle>
              <Switch />
            </Form.Item>
          </div>
          
          <Divider className="my-4" />
          
          <div className="flex justify-between items-center">
            <div>
              <div className="font-medium">{t('pushNotifications')}</div>
              <div className="text-gray-600 text-sm">{t('pushNotificationsDescription')}</div>
            </div>
            <Form.Item name="push_notifications" valuePropName="checked" noStyle>
              <Switch />
            </Form.Item>
          </div>
          
          <Divider className="my-4" />
          
          <div className="flex justify-between items-center">
            <div>
              <div className="font-medium">{t('desktopNotifications')}</div>
              <div className="text-gray-600 text-sm">{t('desktopNotificationsDescription')}</div>
            </div>
            <Form.Item name="desktop_notifications" valuePropName="checked" noStyle>
              <Switch />
            </Form.Item>
          </div>
        </Space>
      </Card>

      {/* Відображення */}
      <Card title={
        <Space>
          <EyeOutlined />
          <span>{t('display')}</span>
        </Space>
      }>
        <Space direction="vertical" className="w-full">
          <div className="flex justify-between items-center">
            <div>
              <div className="font-medium">{t('compactView')}</div>
              <div className="text-gray-600 text-sm">{t('compactViewDescription')}</div>
            </div>
            <Form.Item name="compact_view" valuePropName="checked" noStyle>
              <Switch />
            </Form.Item>
          </div>
          
          <Divider className="my-4" />
          
          <div className="flex justify-between items-center">
            <div>
              <div className="font-medium">{t('showTutorials')}</div>
              <div className="text-gray-600 text-sm">{t('showTutorialsDescription')}</div>
            </div>
            <Form.Item name="show_tutorials" valuePropName="checked" noStyle>
              <Switch />
            </Form.Item>
          </div>
        </Space>
      </Card>

      <div className="text-right">
        <Button 
          type="primary" 
          icon={<SaveOutlined />} 
          loading={loading}
          onClick={() => form.submit()}
        >
          {t('savePreferences')}
        </Button>
      </div>
    </div>
  );
};

export default PreferencesSettings;

src/pages/Profile/ProfilePage.tsx
import React from 'react';
import { useTranslation } from 'react-i18next';
import { Card, Tabs } from 'antd';
import ProfileSettings from './ProfileSettings';
import SecuritySettings from './SecuritySettings';
import PreferencesSettings from './PreferencesSettings';
import BillingPage from './BillingPage';

const ProfilePage: React.FC = () => {
  const { t } = useTranslation();

  const tabItems = [
    {
      key: 'profile',
      label: t('profile'),
      children: <ProfileSettings />
    },
    {
      key: 'security',
      label: t('security'),
      children: <SecuritySettings />
    },
    {
      key: 'preferences',
      label: t('preferences'),
      children: <PreferencesSettings />
    },
    {
      key: 'billing',
      label: t('billing'),
      children: <BillingPage />
    }
  ];

  return (
    <div>
      <div className="mb-6">
        <h2 className="text-2xl font-bold">{t('profileSettings')}</h2>
        <p className="text-gray-600">{t('manageYourAccountSettings')}</p>
      </div>
      
      <Card>
        <Tabs
          defaultActiveKey="profile"
          items={tabItems}
          tabPosition="left"
          size="large"
        />
      </Card>
    </div>
  );
};

export default ProfilePage;

src/pages/Profile/ProfileSettings.tsx
import React, { useState } from 'react';
import { useTranslation } from 'react-i18next';
import { 
  Form, 
  Input, 
  Button, 
  Upload, 
  Avatar, 
  Space, 
  message,
  Row,
  Col,
  Card
} from 'antd';
import { 
  UserOutlined, 
  CameraOutlined,
  SaveOutlined 
} from '@ant-design/icons';

const ProfileSettings: React.FC = () => {
  const { t } = useTranslation();
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const [avatarUrl, setAvatarUrl] = useState<string>('');

  const userData = {
    full_name: 'Дмитро Лапоша',
    email: 'dmitro@lawyer-crm.com',
    phone: '+380501234567',
    position: 'Адвокат',
    bio: 'Спеціалізуюсь на цивільних та кримінальних справах'
  };

  const handleSaveProfile = async (values: any) => {
    setLoading(true);
    try {
      // Тут буде API запит
      await new Promise(resolve => setTimeout(resolve, 1000));
      message.success(t('profileUpdated'));
    } catch (error) {
      message.error(t('errorUpdatingProfile'));
    } finally {
      setLoading(false);
    }
  };

  const handleAvatarChange = (info: any) => {
    if (info.file.status === 'done') {
      const url = URL.createObjectURL(info.file.originFileObj);
      setAvatarUrl(url);
      message.success(t('avatarUpdated'));
    }
  };

  return (
    <div className="max-w-4xl">
      <Row gutter={24}>
        <Col span={8}>
          <Card title={t('profilePicture')}>
            <div className="text-center">
              <Avatar
                size={120}
                src={avatarUrl}
                icon={<UserOutlined />}
                className="mb-4"
              />
              <Upload
                showUploadList={false}
                onChange={handleAvatarChange}
                beforeUpload={() => false}
              >
                <Button icon={<CameraOutlined />}>
                  {t('changeAvatar')}
                </Button>
              </Upload>
              <p className="text-gray-500 text-sm mt-2">
                {t('avatarRecommendations')}
              </p>
            </div>
          </Card>
        </Col>
        
        <Col span={16}>
          <Card title={t('personalInformation')}>
            <Form
              form={form}
              layout="vertical"
              initialValues={userData}
              onFinish={handleSaveProfile}
            >
              <Row gutter={16}>
                <Col span={12}>
                  <Form.Item
                    name="full_name"
                    label={t('fullName')}
                    rules={[{ required: true, message: t('fullNameRequired') }]}
                  >
                    <Input prefix={<UserOutlined />} />
                  </Form.Item>
                </Col>
                <Col span={12}>
                  <Form.Item
                    name="email"
                    label={t('email')}
                    rules={[
                      { required: true, message: t('emailRequired') },
                      { type: 'email', message: t('invalidEmailFormat') }
                    ]}
                  >
                    <Input />
                  </Form.Item>
                </Col>
              </Row>
              
              <Row gutter={16}>
                <Col span={12}>
                  <Form.Item
                    name="phone"
                    label={t('phone')}
                  >
                    <Input />
                  </Form.Item>
                </Col>
                <Col span={12}>
                  <Form.Item
                    name="position"
                    label={t('position')}
                  >
                    <Input />
                  </Form.Item>
                </Col>
              </Row>
              
              <Form.Item
                name="bio"
                label={t('bio')}
              >
                <Input.TextArea rows={4} placeholder={t('tellAboutYourself')} />
              </Form.Item>
              
              <Form.Item>
                <Button type="primary" htmlType="submit" loading={loading} icon={<SaveOutlined />}>
                  {t('saveChanges')}
                </Button>
              </Form.Item>
            </Form>
          </Card>
        </Col>
      </Row>
    </div>
  );
};

export default ProfileSettings;

src/pages/Profile/SecuritySettings.tsx
import React, { useState } from 'react';
import { useTranslation } from 'react-i18next';
import { 
  Card, 
  Form, 
  Input, 
  Button, 
  Switch, 
  List, 
  Tag, 
  Space, 
  Modal, 
  message,
  Divider,
  Alert
} from 'antd';
import { 
  LockOutlined, 
  SafetyOutlined, 
  HistoryOutlined,
  CheckOutlined,
  CloseOutlined
} from '@ant-design/icons';

const SecuritySettings: React.FC = () => {
  const { t } = useTranslation();
  const [loading, setLoading] = useState(false);
  const [isPasswordModalVisible, setIsPasswordModalVisible] = useState(false);
  const [form] = Form.useForm();

  const securityData = {
    two_factor_auth: false,
    session_timeout: 60,
    login_alerts: true
  };

  const loginSessions = [
    {
      id: '1',
      device: 'Chrome on Windows',
      location: 'Київ, Україна',
      ip: '192.168.1.1',
      last_active: '2024-01-20 14:30:00',
      current: true
    },
    {
      id: '2',
      device: 'Safari on iPhone',
      location: 'Київ, Україна',
      ip: '192.168.1.2',
      last_active: '2024-01-19 10:15:00',
      current: false
    }
  ];

  const handleChangePassword = async (values: any) => {
    setLoading(true);
    try {
      await new Promise(resolve => setTimeout(resolve, 1000));
      setIsPasswordModalVisible(false);
      form.resetFields();
      message.success(t('passwordChanged'));
    } catch (error) {
      message.error(t('errorChangingPassword'));
    } finally {
      setLoading(false);
    }
  };

  const handleTerminateSession = (sessionId: string) => {
    message.success(t('sessionTerminated'));
  };

  return (
    <div className="max-w-4xl space-y-6">
      {/* Зміна пароля */}
      <Card title={t('changePassword')}>
        <Button 
          type="primary" 
          icon={<LockOutlined />}
          onClick={() => setIsPasswordModalVisible(true)}
        >
          {t('changePassword')}
        </Button>
      </Card>

      {/* Налаштування безпеки */}
      <Card title={t('securitySettings')}>
        <Space direction="vertical" className="w-full">
          <div className="flex justify-between items-center">
            <div>
              <div className="font-medium">{t('twoFactorAuth')}</div>
              <div className="text-gray-600 text-sm">{t('twoFactorAuthDescription')}</div>
            </div>
            <Switch checked={securityData.two_factor_auth} />
          </div>
          
          <Divider className="my-4" />
          
          <div className="flex justify-between items-center">
            <div>
              <div className="font-medium">{t('loginAlerts')}</div>
              <div className="text-gray-600 text-sm">{t('loginAlertsDescription')}</div>
            </div>
            <Switch checked={securityData.login_alerts} />
          </div>
        </Space>
      </Card>

      {/* Активні сесії */}
      <Card title={t('activeSessions')}>
        <List
          dataSource={loginSessions}
          renderItem={session => (
            <List.Item
              actions={[
                session.current ? (
                  <Tag color="green" icon={<CheckOutlined />}>
                    {t('current')}
                  </Tag>
                ) : (
                  <Button 
                    size="small" 
                    danger
                    onClick={() => handleTerminateSession(session.id)}
                  >
                    {t('terminate')}
                  </Button>
                )
              ]}
            >
              <List.Item.Meta
                avatar={<SafetyOutlined />}
                title={session.device}
                description={
                  <Space direction="vertical" size={0}>
                    <span>{session.location}</span>
                    <span className="text-gray-500 text-sm">
                      {t('lastActive')}: {session.last_active}
                    </span>
                    <span className="text-gray-500 text-sm">IP: {session.ip}</span>
                  </Space>
                }
              />
            </List.Item>
          )}
        />
      </Card>

      {/* Модальне вікно зміни пароля */}
      <Modal
        title={t('changePassword')}
        open={isPasswordModalVisible}
        onCancel={() => {
          setIsPasswordModalVisible(false);
          form.resetFields();
        }}
        footer={null}
      >
        <Form
          form={form}
          layout="vertical"
          onFinish={handleChangePassword}
        >
          <Form.Item
            name="current_password"
            label={t('currentPassword')}
            rules={[{ required: true, message: t('currentPasswordRequired') }]}
          >
            <Input.Password />
          </Form.Item>
          
          <Form.Item
            name="new_password"
            label={t('newPassword')}
            rules={[
              { required: true, message: t('newPasswordRequired') },
              { min: 8, message: t('passwordMinLength') }
            ]}
          >
            <Input.Password />
          </Form.Item>
          
          <Form.Item
            name="confirm_password"
            label={t('confirmPassword')}
            dependencies={['new_password']}
            rules={[
              { required: true, message: t('confirmPasswordRequired') },
              ({ getFieldValue }) => ({
                validator(_, value) {
                  if (!value || getFieldValue('new_password') === value) {
                    return Promise.resolve();
                  }
                  return Promise.reject(new Error(t('passwordsDoNotMatch')));
                },
              }),
            ]}
          >
            <Input.Password />
          </Form.Item>
          
          <Form.Item className="mb-0">
            <Space>
              <Button type="primary" htmlType="submit" loading={loading}>
                {t('changePassword')}
              </Button>
              <Button onClick={() => {
                setIsPasswordModalVisible(false);
                form.resetFields();
              }}>
                {t('cancel')}
              </Button>
            </Space>
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
};

export default SecuritySettings;

src/pages/Profile/SettingsPage.tsx
import React from 'react';
import { useTranslation } from 'react-i18next';
import { Card, Tabs } from 'antd';
import SystemSettingsPage from './SystemSettingsPage';
import RolesPermissionsPage from './RolesPermissionsPage';
import IntegrationsPage from './IntegrationsPage';

const SettingsPage: React.FC = () => {
  const { t } = useTranslation();

  const tabItems = [
    {
      key: 'system',
      label: t('system'),
      children: <SystemSettingsPage />
    },
    {
      key: 'roles',
      label: t('rolesPermissions'),
      children: <RolesPermissionsPage />
    },
    {
      key: 'integrations',
      label: t('integrations'),
      children: <IntegrationsPage />
    }
  ];

  return (
    <div>
      <div className="mb-6">
        <h2 className="text-2xl font-bold">{t('systemSettings')}</h2>
        <p className="text-gray-600">{t('manageSystemSettings')}</p>
      </div>
      
      <Card>
        <Tabs
          defaultActiveKey="system"
          items={tabItems}
          size="large"
        />
      </Card>
    </div>
  );
};

export default SettingsPage;

src/pages/Reports/ReportsPage.tsx
import React, { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import {
  Card,
  Col,
  Row,
  Statistic,
  Table,
  Typography,
  Spin,
  message
} from 'antd';
import {
  DollarCircleOutlined,
  ClockCircleOutlined
} from '@ant-design/icons';
import type { ColumnsType } from 'antd/es/table';
import { BarChart, Bar } from 'recharts'; // ✅ Додано BarChart, Bar
import { demoApi } from "../../services/api";

const { Title } = Typography;

interface IncomeData {
  month: string;
  income: number;
}

interface TimeData {
  month: string;
  hours: number;
}

const ReportsPage: React.FC = () => {
  const { t } = useTranslation();
  const [incomeData, setIncomeData] = useState<IncomeData[]>([]);
  const [timeData, setTimeData] = useState<TimeData[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchReports = async () => {
      setLoading(true);
      try {
        const response = await api.get('/reports');
        setIncomeData(response.data.income);
        setTimeData(response.data.time);
      } catch (error) {
        message.error(t('errorFetchingReports'));
      } finally {
        setLoading(false);
      }
    };

    fetchReports();
  }, [t]); // ✅ Видалено 'api' з залежностей

  const columnsIncome: ColumnsType<IncomeData> = [
    {
      title: t('month'),
      dataIndex: 'month',
      key: 'month',
    },
    {
      title: t('income'),
      dataIndex: 'income',
      key: 'income',
      render: (income: number) => (
        <span>{income.toLocaleString()} ₴</span>
      ),
    },
  ];

  const columnsTime: ColumnsType<TimeData> = [
    {
      title: t('month'),
      dataIndex: 'month',
      key: 'month',
    },
    {
      title: t('hoursTracked'),
      dataIndex: 'hours',
      key: 'hours',
    },
  ];

  return (
    <div>
      <Title level={2}>{t('reports')}</Title>

      {loading ? (
        <Spin className="block mx-auto my-10" />
      ) : (
        <>
          {/* Фінансові звіти */}
          <Row gutter={[16, 16]} className="mb-6">
            <Col xs={24} sm={12} md={8} lg={6}>
              <Card>
                <Statistic
                  title={t('totalIncome')}
                  value={incomeData.reduce((acc, curr) => acc + curr.income, 0)}
                  prefix={<DollarCircleOutlined />}
                  suffix="₴"
                />
              </Card>
            </Col>
            <Col xs={24} sm={12} md={8} lg={6}>
              <Card>
                <Statistic
                  title={t('averageIncome')}
                  value={incomeData.reduce((acc, curr) => acc + curr.income, 0) / incomeData.length}
                  prefix={<DollarCircleOutlined />}
                  suffix="₴"
                />
              </Card>
            </Col>
            <Col xs={24} sm={12} md={8} lg={6}>
              <Card>
                <Statistic
                  title={t('hoursTracked')}
                  value={timeData.reduce((acc, curr) => acc + curr.hours, 0)}
                  prefix={<ClockCircleOutlined />}
                />
              </Card>
            </Col>
            <Col xs={24} sm={12} md={8} lg={6}>
              <Card>
                <Statistic
                  title={t('averageHourlyRate')}
                  value={(incomeData.reduce((acc, curr) => acc + curr.income, 0) / timeData.reduce((acc, curr) => acc + curr.hours, 0)).toFixed(2)}
                  prefix={<DollarCircleOutlined />}
                  suffix="₴"
                />
              </Card>
            </Col>
          </Row>

          {/* Бар-графік доходів */}
          <Card title={t('incomeChart')} className="mb-6">
            <BarChart
              width={500}
              height={300}
              data={incomeData}
              margin={{
                top: 5,
                right: 30,
                left: 20,
                bottom: 5,
              }}
            >
              <Bar dataKey="income" fill="#8884d8" />
            </BarChart>
          </Card>

          {/* Таблиця доходів за місяцями */}
          <Card title={t('incomeTable')} className="mb-6">
            <Table
              columns={columnsIncome}
              dataSource={incomeData}
              pagination={false}
            />
          </Card>

          {/* Бар-графік відпрацьованих годин */}
          <Card title={t('timeChart')} className="mb-6">
            <BarChart
              width={500}
              height={300}
              data={timeData}
              margin={{
                top: 5,
                right: 30,
                left: 20,
                bottom: 5,
              }}
            >
              <Bar dataKey="hours" fill="#82ca9d" />
            </BarChart>
          </Card>

          {/* Таблиця відпрацьованих годин за місяцями */}
          <Card title={t('timeTable')}>
            <Table
              columns={columnsTime}
              dataSource={timeData}
              pagination={false}
            />
          </Card>
        </>
      )}
    </div>
  );
};

export default ReportsPage;

src/pages/Support/FAQPage.tsx
import React from 'react';
import { useTranslation } from 'react-i18next';
import { Card, Collapse, Typography } from 'antd';

const { Panel } = Collapse;
const { Title } = Typography;

const FAQPage: React.FC = () => {
  const { t } = useTranslation();

  const faqData = [
    {
      question: t('faqHowToCreateCase'),
      answer: t('faqHowToCreateCaseAnswer'),
    },
    {
      question: t('faqHowToTrackTime'),
      answer: t('faqHowToTrackTimeAnswer'),
    },
    {
      question: t('faqHowToCreateInvoice'),
      answer: t('faqHowToCreateInvoiceAnswer'),
    },
  ];

  return (
    <div>
      <Title level={2}>{t('faq')}</Title>
      <Card>
        <Collapse accordion>
          {faqData.map((item, index) => (
            <Panel header={item.question} key={index.toString()}>
              <p>{item.answer}</p>
            </Panel>
          ))}
        </Collapse>
      </Card>
    </div>
  );
};

export default FAQPage;

src/pages/Support/KnowledgeBasePage.tsx
import React, { useState } from 'react';
import { useTranslation } from 'react-i18next';
import { 
  Card, 
  Input, 
  List, 
  Tag, 
  Space, 
  Button, 
  Collapse,
  Typography,
  Divider
} from 'antd';
import { 
  SearchOutlined, 
  BookOutlined,
  QuestionCircleOutlined,
  FileTextOutlined
} from '@ant-design/icons';

const { Search } = Input;
const { Panel } = Collapse;
const { Title, Text } = Typography;

interface Article {
  id: string;
  title: string;
  content: string;
  category: string;
  views: number;
  last_updated: string;
}

const KnowledgeBasePage: React.FC = () => {
  const { t } = useTranslation();
  const [searchText, setSearchText] = useState('');
  const [selectedCategory, setSelectedCategory] = useState<string>('all');

  const categories = [
    { key: 'all', label: t('allCategories'), count: 25 },
    { key: 'getting-started', label: t('gettingStarted'), count: 8 },
    { key: 'cases', label: t('cases'), count: 6 },
    { key: 'clients', label: t('clients'), count: 5 },
    { key: 'billing', label: t('billing'), count: 4 },
    { key: 'settings', label: t('settings'), count: 2 }
  ];

  const articles: Article[] = [
    {
      id: '1',
      title: t('howToCreateCase'),
      content: t('howToCreateCaseContent'),
      category: 'cases',
      views: 1245,
      last_updated: '2024-01-15'
    },
    {
      id: '2',
      title: t('managingClients'),
      content: t('managingClientsContent'),
      category: 'clients',
      views: 876,
      last_updated: '2024-01-10'
    },
    {
      id: '3',
      title: t('billingAndInvoices'),
      content: t('billingAndInvoicesContent'),
      category: 'billing',
      views: 543,
      last_updated: '2024-01-08'
    },
    {
      id: '4',
      title: t('userPermissions'),
      content: t('userPermissionsContent'),
      category: 'settings',
      views: 321,
      last_updated: '2024-01-05'
    },
    {
      id: '5',
      title: t('timeTracking'),
      content: t('timeTrackingContent'),
      category: 'getting-started',
      views: 654,
      last_updated: '2024-01-12'
    }
  ];

  const faqs = [
    {
      question: t('howToResetPassword'),
      answer: t('howToResetPasswordAnswer')
    },
    {
      question: t('howToExportData'),
      answer: t('howToExportDataAnswer')
    },
    {
      question: t('howToAddTeamMember'),
      answer: t('howToAddTeamMemberAnswer')
    },
    {
      question: t('howToGenerateReports'),
      answer: t('howToGenerateReportsAnswer')
    }
  ];

  const filteredArticles = articles.filter(article => {
    const matchesSearch = article.title.toLowerCase().includes(searchText.toLowerCase()) ||
                         article.content.toLowerCase().includes(searchText.toLowerCase());
    const matchesCategory = selectedCategory === 'all' || article.category === selectedCategory;
    return matchesSearch && matchesCategory;
  });

  const getCategoryColor = (category: string) => {
    const colors: { [key: string]: string } = {
      'getting-started': 'blue',
      'cases': 'green',
      'clients': 'orange',
      'billing': 'red',
      'settings': 'purple'
    };
    return colors[category] || 'default';
  };

  return (
    <div className="max-w-6xl mx-auto">
      <div className="text-center mb-8">
        <Title level={2}>
          <BookOutlined className="mr-2" />
          {t('knowledgeBase')}
        </Title>
        <Text type="secondary">{t('knowledgeBaseDescription')}</Text>
      </div>

      {/* Пошук */}
      <Card className="mb-6">
        <Search
          placeholder={t('searchKnowledgeBase')}
          enterButton={<SearchOutlined />}
          size="large"
          value={searchText}
          onChange={(e) => setSearchText(e.target.value)}
        />
      </Card>

      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
        {/* Бічна панель з категоріями */}
        <div className="lg:col-span-1">
          <Card title={t('categories')}>
            <Space direction="vertical" className="w-full">
              {categories.map(category => (
                <Button
                  key={category.key}
                  type={selectedCategory === category.key ? 'primary' : 'text'}
                  block
                  className="text-left flex justify-between items-center"
                  onClick={() => setSelectedCategory(category.key)}
                >
                  <span>{category.label}</span>
                  <Tag>{category.count}</Tag>
                </Button>
              ))}
            </Space>
          </Card>

          {/* Популярні статті */}
          <Card title={t('popularArticles')} className="mt-6">
            <List
              size="small"
              dataSource={articles.slice(0, 3)}
              renderItem={article => (
                <List.Item>
                  <Button type="link" className="p-0 text-left">
                    <Text ellipsis>{article.title}</Text>
                  </Button>
                </List.Item>
              )}
            />
          </Card>
        </div>

        {/* Основний контент */}
        <div className="lg:col-span-3">
          {/* Статті */}
          <Card 
            title={
              <Space>
                <FileTextOutlined />
                <span>{t('articles')}</span>
              </Space>
            }
            className="mb-6"
          >
            <List
              dataSource={filteredArticles}
              renderItem={article => (
                <List.Item
                  actions={[
                    <Text type="secondary" key="views">
                      {article.views} {t('views')}
                    </Text>
                  ]}
                >
                  <List.Item.Meta
                    title={
                      <Space>
                        <Button type="link" className="p-0 font-medium">
                          {article.title}
                        </Button>
                        <Tag color={getCategoryColor(article.category)}>
                          {categories.find(c => c.key === article.category)?.label}
                        </Tag>
                      </Space>
                    }
                    description={
                      <Space direction="vertical" size={0}>
                        <Text>{article.content}</Text>
                        <Text type="secondary" className="text-sm">
                          {t('lastUpdated')}: {article.last_updated}
                        </Text>
                      </Space>
                    }
                  />
                </List.Item>
              )}
              locale={{ emptyText: t('noArticlesFound') }}
            />
          </Card>

          {/* FAQ */}
          <Card 
            title={
              <Space>
                <QuestionCircleOutlined />
                <span>{t('frequentlyAskedQuestions')}</span>
              </Space>
            }
          >
            <Collapse ghost>
              {faqs.map((faq, index) => (
                <Panel header={faq.question} key={index.toString()}>
                  <Text>{faq.answer}</Text>
                </Panel>
              ))}
            </Collapse>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default KnowledgeBasePage;

src/pages/Support/SupportTicketPage.tsx
import React, { useState } from 'react';
import { useTranslation } from 'react-i18next';
import { 
  Card, 
  Form, 
  Input, 
  Select, 
  Button, 
  List, 
  Tag, 
  Space, 
  Avatar,
  Divider,
  message,
  Upload,
  Typography
} from 'antd';
import { 
  PlusOutlined, 
  PaperClipOutlined,
  UserOutlined,
  CheckCircleOutlined,
  ClockCircleOutlined
} from '@ant-design/icons';

const { TextArea } = Input;
const { Option } = Select;
const { Title, Text } = Typography;

interface Ticket {
  id: string;
  subject: string;
  description: string;
  status: 'open' | 'in_progress' | 'resolved';
  priority: 'low' | 'medium' | 'high';
  created_at: string;
  updated_at: string;
  messages: Message[];
}

interface Message {
  id: string;
  text: string;
  sender: 'user' | 'support';
  timestamp: string;
  attachments?: string[];
}

const SupportTicketPage: React.FC = () => {
  const { t } = useTranslation();
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const [activeTicket, setActiveTicket] = useState<Ticket | null>(null);
  const [tickets, setTickets] = useState<Ticket[]>([]);

  const demoMessages: Message[] = [
    {
      id: '1',
      text: t('ticketInitialMessage'),
      sender: 'user',
      timestamp: '2024-01-20 10:30:00'
    },
    {
      id: '2',
      text: t('supportResponse'),
      sender: 'support',
      timestamp: '2024-01-20 11:15:00'
    }
  ];

  const demoActiveTicket: Ticket = {
    id: '1',
    subject: t('problemWithCaseCreation'),
    description: t('problemWithCaseCreationDescription'),
    status: 'in_progress',
    priority: 'high',
    created_at: '2024-01-20 10:30:00',
    updated_at: '2024-01-20 11:15:00',
    messages: demoMessages
  };

  const demoHistoryTickets: Ticket[] = [
    {
      id: '2',
      subject: t('billingQuestion'),
      description: t('billingQuestionDescription'),
      status: 'resolved',
      priority: 'medium',
      created_at: '2024-01-15 14:20:00',
      updated_at: '2024-01-16 09:45:00',
      messages: []
    },
    {
      id: '3',
      subject: t('featureRequest'),
      description: t('featureRequestDescription'),
      status: 'resolved',
      priority: 'low',
      created_at: '2024-01-10 16:45:00',
      updated_at: '2024-01-12 11:30:00',
      messages: []
    }
  ];

  const getStatusColor = (status: string) => {
    const colors = {
      open: 'blue',
      in_progress: 'orange',
      resolved: 'green'
    };
    return colors[status as keyof typeof colors] || 'default';
  };

  const getPriorityColor = (priority: string) => {
    const colors = {
      low: 'green',
      medium: 'orange',
      high: 'red'
    };
    return colors[priority as keyof typeof colors] || 'default';
  };

  const handleCreateTicket = async (values: any) => {
    setLoading(true);
    try {
      const newTicket: Ticket = {
        id: Date.now().toString(),
        subject: values.subject,
        description: values.description,
        status: 'open',
        priority: values.priority,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        messages: [{
          id: '1',
          text: values.description,
          sender: 'user',
          timestamp: new Date().toISOString()
        }]
      };
      
      setTickets(prev => [newTicket, ...prev]);
      setActiveTicket(newTicket);
      form.resetFields();
      message.success(t('ticketCreated'));
    } catch (error) {
      message.error(t('errorCreatingTicket'));
    } finally {
      setLoading(false);
    }
  };

  const handleSendMessage = async (values: any) => {
    if (!activeTicket) return;
    
    try {
      const newMessage: Message = {
        id: (activeTicket.messages.length + 1).toString(),
        text: values.message,
        sender: 'user',
        timestamp: new Date().toISOString()
      };
      
      const updatedTicket = {
        ...activeTicket,
        messages: [...activeTicket.messages, newMessage],
        updated_at: new Date().toISOString()
      };
      
      setActiveTicket(updatedTicket);
      setTickets(prev => prev.map(ticket => 
        ticket.id === activeTicket.id ? updatedTicket : ticket
      ));
      
      // Очищаємо форму повідомлення
      values.message = '';
      message.success(t('messageSent'));
    } catch (error) {
      message.error(t('errorSendingMessage'));
    }
  };

  return (
    <div className="max-w-6xl mx-auto">
      <div className="flex justify-between items-center mb-6">
        <Title level={2}>{t('supportTickets')}</Title>
        <Button 
          type="primary" 
          icon={<PlusOutlined />}
          onClick={() => setActiveTicket(null)}
        >
          {t('newTicket')}
        </Button>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Список тікетів */}
        <div className="lg:col-span-1">
          <Card title={t('ticketHistory')}>
            <List
              dataSource={[demoActiveTicket, ...demoHistoryTickets]}
              renderItem={ticket => (
                <List.Item
                  className={`cursor-pointer hover:bg-gray-50 p-3 rounded ${
                    activeTicket?.id === ticket.id ? 'bg-blue-50' : ''
                  }`}
                  onClick={() => setActiveTicket(ticket)}
                >
                  <List.Item.Meta
                    title={
                      <Space direction="vertical" size={2}>
                        <Text strong ellipsis>{ticket.subject}</Text>
                        <Space size={4}>
                          <Tag color={getStatusColor(ticket.status)} size="small">
                            {t(ticket.status)}
                          </Tag>
                          <Tag color={getPriorityColor(ticket.priority)} size="small">
                            {t(ticket.priority)}
                          </Tag>
                        </Space>
                      </Space>
                    }
                    description={
                      <Text type="secondary" className="text-xs">
                        {ticket.created_at}
                      </Text>
                    }
                  />
                </List.Item>
              )}
            />
          </Card>
        </div>

        {/* Перегляд/створення тікета */}
        <div className="lg:col-span-2">
          {activeTicket ? (
            <Card
              title={
                <Space direction="vertical" size={2}>
                  <Text strong>{activeTicket.subject}</Text>
                  <Space>
                    <Tag color={getStatusColor(activeTicket.status)}>
                      {t(activeTicket.status)}
                    </Tag>
                    <Tag color={getPriorityColor(activeTicket.priority)}>
                      {t(activeTicket.priority)}
                    </Tag>
                    <Text type="secondary" className="text-sm">
                      {t('created')}: {activeTicket.created_at}
                    </Text>
                  </Space>
                </Space>
              }
            >
              {/* Чат тікета */}
              <div className="mb-6">
                {activeTicket.messages.map(message => (
                  <div
                    key={message.id}
                    className={`mb-4 p-4 rounded-lg ${
                      message.sender === 'user' 
                        ? 'bg-blue-50 ml-8' 
                        : 'bg-gray-50 mr-8'
                    }`}
                  >
                    <div className="flex items-start space-x-3">
                      <Avatar 
                        size="small" 
                        icon={<UserOutlined />}
                        className={message.sender === 'support' ? 'bg-green-500' : ''}
                      />
                      <div className="flex-1">
                        <div className="flex justify-between items-start mb-2">
                          <Text strong>
                            {message.sender === 'user' ? t('you') : t('supportTeam')}
                          </Text>
                          <Text type="secondary" className="text-xs">
                            {message.timestamp}
                          </Text>
                        </div>
                        <Text>{message.text}</Text>
                      </div>
                    </div>
                  </div>
                ))}
              </div>

              {/* Форма відповіді */}
              <Divider />
              <Form onFinish={handleSendMessage}>
                <Form.Item
                  name="message"
                  rules={[{ required: true, message: t('messageRequired') }]}
                >
                  <TextArea
                    rows={4}
                    placeholder={t('typeYourMessage')}
                  />
                </Form.Item>
                <Form.Item>
                  <Space>
                    <Upload>
                      <Button icon={<PaperClipOutlined />}>
                        {t('attachFile')}
                      </Button>
                    </Upload>
                    <Button type="primary" htmlType="submit">
                      {t('sendMessage')}
                    </Button>
                  </Space>
                </Form.Item>
              </Form>
            </Card>
          ) : (
            <Card title={t('createNewTicket')}>
              <Form
                form={form}
                layout="vertical"
                onFinish={handleCreateTicket}
              >
                <Form.Item
                  name="subject"
                  label={t('subject')}
                  rules={[{ required: true, message: t('subjectRequired') }]}
                >
                  <Input placeholder={t('enterSubject')} />
                </Form.Item>
                
                <Form.Item
                  name="priority"
                  label={t('priority')}
                  initialValue="medium"
                >
                  <Select>
                    <Option value="low">{t('low')}</Option>
                    <Option value="medium">{t('medium')}</Option>
                    <Option value="high">{t('high')}</Option>
                  </Select>
                </Form.Item>
                
                <Form.Item
                  name="description"
                  label={t('description')}
                  rules={[{ required: true, message: t('descriptionRequired') }]}
                >
                  <TextArea 
                    rows={6} 
                    placeholder={t('describeYourIssue')}
                  />
                </Form.Item>
                
                <Form.Item>
                  <Space>
                    <Upload>
                      <Button icon={<PaperClipOutlined />}>
                        {t('attachFiles')}
                      </Button>
                    </Upload>
                    <Button 
                      type="primary" 
                      htmlType="submit" 
                      loading={loading}
                    >
                      {t('createTicket')}
                    </Button>
                  </Space>
                </Form.Item>
              </Form>
            </Card>
          )}
        </div>
      </div>
    </div>
  );
};

export default SupportTicketPage;

src/pages/Tasks/KanbanPage.tsx
import React, { useState } from 'react';
import { useTranslation } from 'react-i18next';
import {
  Card,
  Col,
  Row,
  Typography
} from 'antd';
import {
  DndContext,
  closestCorners,
  KeyboardSensor,
  PointerSensor,
  useSensor,
  useSensors,
} from '@dnd-kit/core';
import {
  arrayMove,
  SortableContext,
  sortableKeyboardCoordinates,
  verticalListSortingStrategy,
} from '@dnd-kit/sortable';
import SortableItem from "../../components/Layout/SortableItem";

const { Title } = Typography;

const KanbanPage: React.FC = () => {
  const { t } = useTranslation();

  const [items, setItems] = useState([
    { id: '1', content: 'Task 1' },
    { id: '2', content: 'Task 2' },
    { id: '3', content: 'Task 3' },
  ]);

  const sensors = useSensors(
    useSensor(PointerSensor),
    useSensor(KeyboardSensor, {
      coordinateGetter: sortableKeyboardCoordinates,
    })
  );

  const handleDragEnd = (event: any) => {
    const { active, over } = event;

    if (active.id !== over.id) {
      setItems((items) => {
        const oldIndex = items.findIndex((item) => item.id === active.id);
        const newIndex = items.findIndex((item) => item.id === over.id);
        return arrayMove(items, oldIndex, newIndex);
      });
    }
  };

  return (
    <div>
      <Title level={2}>{t('kanban')}</Title>
      <DndContext
        sensors={sensors}
        collisionDetection={closestCorners}
        onDragEnd={handleDragEnd}
      >
        <SortableContext
          items={items.map((item) => item.id)}
          strategy={verticalListSortingStrategy}
        >
          <Row gutter={[16, 16]}>
            <Col xs={24} sm={12} md={8} lg={6}>
              <Card title={t('toDo')}>
                {items.map((item) => (
                  <SortableItem key={item.id} id={item.id}>
                    <div className="mb-4 p-4 bg-white rounded shadow">
                      {item.content}
                    </div>
                  </SortableItem>
                ))}
              </Card>
            </Col>
            <Col xs={24} sm={12} md={8} lg={6}>
              <Card title={t('inProgress')}>
                {/* Тут будуть завдання в процесі */}
              </Card>
            </Col>
            <Col xs={24} sm={12} md={8} lg={6}>
              <Card title={t('done')}>
                {/* Тут будуть завершені завдання */}
              </Card>
            </Col>
          </Row>
        </SortableContext>
      </DndContext>
    </div>
  );
};

export default KanbanPage;

src/pages/Tasks/TasksPage.tsx
import React, { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import { Table, Button, Card, Tag, Space, message } from 'antd';
import { PlusOutlined } from '@ant-design/icons';
import { demoApi } from "../../services/api";

interface Task {
  id: string;
  title: string;
  priority: string;
  due_date: string;
  assigned_to: string;
  status: string;
}

const TasksPage: React.FC = () => {
  const { t } = useTranslation();
  const [tasks, setTasks] = useState<Task[]>([]);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    fetchTasks();
  }, []);

  const fetchTasks = async () => {
    setLoading(true);
    try {
      const response = await api.get('/tasks');
      setTasks(response.data);
    } catch (error) {
      message.error(t('errorFetchingTasks'));
    } finally {
      setLoading(false);
    }
  };

  const columns = [
    { title: t('taskName'), dataIndex: 'title', key: 'title' },
    {
      title: t('priority'),
      dataIndex: 'priority',
      key: 'priority',
      render: (priority: string) => (
        <Tag color={priority === 'high' ? 'red' : priority === 'medium' ? 'orange' : 'green'}>
          {t(priority)}
        </Tag>
      ),
    },
    { title: t('dueDate'), dataIndex: 'due_date', key: 'due_date' },
    { title: t('assignedTo'), dataIndex: 'assigned_to', key: 'assigned_to' },
    {
      title: t('status'),
      dataIndex: 'status',
      key: 'status',
      render: (status: string) => (
        <Tag color={status === 'done' ? 'green' : 'blue'}>{t(status)}</Tag>
      ),
    },
    {
      title: t('actions'),
      key: 'actions',
      render: (_: any, record: Task) => (
        <Space>
          <Button size="small">{t('view')}</Button>
          <Button size="small">{t('edit')}</Button>
        </Space>
      ),
    },
  ];

  return (
    <div>
      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 16 }}>
        <h2>{t('tasks')}</h2>
        <Button type="primary" icon={<PlusOutlined />}>
          {t('addTask')}
        </Button>
      </div>

      <Card>
        <Table
          columns={columns}
          dataSource={tasks}
          loading={loading}
          rowKey="id"
          pagination={{ pageSize: 10 }}
        />
      </Card>
    </div>
  );
};

export default TasksPage;

src/pages/Templates/DocumentTemplatesPage.tsx
import React, { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import { 
  Table, 
  Button, 
  Space, 
  Tag, 
  Modal, 
  Form, 
  Input, 
  Select, 
  message, 
  Card,
  Popconfirm,
  Tooltip,
  Upload,
  Divider,
  Typography
} from 'antd';
import { 
  PlusOutlined, 
  EditOutlined, 
  DeleteOutlined, 
  CopyOutlined,
  DownloadOutlined,
  EyeOutlined,
  FileTextOutlined
} from '@ant-design/icons';
import type { ColumnsType } from 'antd/es/table';

const { TextArea } = Input;
const { Title, Text } = Typography;

interface DocumentTemplate {
  id: string;
  name: string;
  description: string;
  category: string;
  content: string;
  variables: string[];
  created_at: string;
  updated_at: string;
  is_system: boolean;
}

const DocumentTemplatesPage: React.FC = () => {
  const { t } = useTranslation();
  const [templates, setTemplates] = useState<DocumentTemplate[]>([]);
  const [loading, setLoading] = useState(false);
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [editingTemplate, setEditingTemplate] = useState<DocumentTemplate | null>(null);
  const [form] = Form.useForm();

  const demoCategories = [
    { value: 'contract', label: t('contracts') },
    { value: 'lawsuit', label: t('lawsuits') },
    { value: 'agreement', label: t('agreements') },
    { value: 'motion', label: t('motions') },
    { value: 'letter', label: t('letters') },
    { value: 'report', label: t('reports') }
  ];

  const demoVariables = [
    { value: '{{client_name}}', label: t('clientName') },
    { value: '{{client_address}}', label: t('clientAddress') },
    { value: '{{case_number}}', label: t('caseNumber') },
    { value: '{{case_title}}', label: t('caseTitle') },
    { value: '{{court_name}}', label: t('courtName') },
    { value: '{{judge_name}}', label: t('judgeName') },
    { value: '{{hearing_date}}', label: t('hearingDate') },
    { value: '{{amount}}', label: t('amount') },
    { value: '{{lawyer_name}}', label: t('lawyerName') },
    { value: '{{firm_name}}', label: t('firmName') },
    { value: '{{current_date}}', label: t('currentDate') }
  ];

  const demoTemplates: DocumentTemplate[] = [
    {
      id: '1',
      name: t('standardContract'),
      description: t('standardContractDescription'),
      category: 'contract',
      content: t('standardContractContent'),
      variables: ['{{client_name}}', '{{client_address}}', '{{amount}}', '{{current_date}}'],
      created_at: '2024-01-15T10:00:00Z',
      updated_at: '2024-01-15T10:00:00Z',
      is_system: true
    },
    {
      id: '2',
      name: t('lawsuitComplaint'),
      description: t('lawsuitComplaintDescription'),
      category: 'lawsuit',
      content: t('lawsuitComplaintContent'),
      variables: ['{{client_name}}', '{{case_number}}', '{{court_name}}', '{{judge_name}}'],
      created_at: '2024-01-16T10:00:00Z',
      updated_at: '2024-01-16T10:00:00Z',
      is_system: true
    },
    {
      id: '3',
      name: t('clientAgreement'),
      description: t('clientAgreementDescription'),
      category: 'agreement',
      content: t('clientAgreementContent'),
      variables: ['{{client_name}}', '{{lawyer_name}}', '{{firm_name}}', '{{current_date}}'],
      created_at: '2024-01-17T10:00:00Z',
      updated_at: '2024-01-17T10:00:00Z',
      is_system: false
    }
  ];

  useEffect(() => {
    fetchTemplates();
  }, []);

  const fetchTemplates = async () => {
    setLoading(true);
    try {
      setTemplates(demoTemplates);
    } catch (error) {
      message.error(t('errorFetchingTemplates'));
    } finally {
      setLoading(false);
    }
  };

  const handleCreateTemplate = async (values: any) => {
    try {
      const newTemplate: DocumentTemplate = {
        id: Date.now().toString(),
        name: values.name,
        description: values.description,
        category: values.category,
        content: values.content,
        variables: values.variables || [],
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        is_system: false
      };
      
      setTemplates(prev => [...prev, newTemplate]);
      setIsModalVisible(false);
      form.resetFields();
      message.success(t('templateCreated'));
    } catch (error) {
      message.error(t('errorCreatingTemplate'));
    }
  };

  const handleUpdateTemplate = async (values: any) => {
    if (!editingTemplate) return;
    
    try {
      setTemplates(prev => prev.map(template => 
        template.id === editingTemplate.id 
          ? { 
              ...template, 
              ...values,
              updated_at: new Date().toISOString()
            }
          : template
      ));
      setIsModalVisible(false);
      setEditingTemplate(null);
      form.resetFields();
      message.success(t('templateUpdated'));
    } catch (error) {
      message.error(t('errorUpdatingTemplate'));
    }
  };

  const handleDeleteTemplate = async (id: string) => {
    try {
      setTemplates(prev => prev.filter(template => template.id !== id));
      message.success(t('templateDeleted'));
    } catch (error) {
      message.error(t('errorDeletingTemplate'));
    }
  };

  const handleDuplicateTemplate = async (template: DocumentTemplate) => {
    try {
      const duplicatedTemplate: DocumentTemplate = {
        ...template,
        id: Date.now().toString(),
        name: `${template.name} (${t('copy')})`,
        is_system: false,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };
      
      setTemplates(prev => [...prev, duplicatedTemplate]);
      message.success(t('templateDuplicated'));
    } catch (error) {
      message.error(t('errorDuplicatingTemplate'));
    }
  };

  const handleEditTemplate = (template: DocumentTemplate) => {
    setEditingTemplate(template);
    form.setFieldsValue({
      name: template.name,
      description: template.description,
      category: template.category,
      content: template.content,
      variables: template.variables
    });
    setIsModalVisible(true);
  };

  const handlePreviewTemplate = (template: DocumentTemplate) => {
    Modal.info({
      title: template.name,
      width: 800,
      content: (
        <div>
          <Text strong>{t('description')}:</Text>
          <p>{template.description}</p>
          <Divider />
          <Text strong>{t('content')}:</Text>
          <div 
            className="bg-gray-50 p-4 rounded mt-2 whitespace-pre-wrap"
            style={{ maxHeight: '400px', overflow: 'auto' }}
          >
            {template.content}
          </div>
          {template.variables.length > 0 && (
            <>
              <Divider />
              <Text strong>{t('availableVariables')}:</Text>
              <div className="mt-2">
                {template.variables.map(variable => (
                  <Tag key={variable} className="mb-1">
                    {variable}
                  </Tag>
                ))}
              </div>
            </>
          )}
        </div>
      )
    });
  };

  const getCategoryColor = (category: string) => {
    const colors: { [key: string]: string } = {
      contract: 'blue',
      lawsuit: 'red',
      agreement: 'green',
      motion: 'orange',
      letter: 'purple',
      report: 'cyan'
    };
    return colors[category] || 'default';
  };

  const columns: ColumnsType<DocumentTemplate> = [
    {
      title: t('name'),
      dataIndex: 'name',
      key: 'name',
      render: (name: string, record) => (
        <Space>
          <FileTextOutlined />
          <span>{name}</span>
          {record.is_system && (
            <Tag color="blue">{t('system')}</Tag>
          )}
        </Space>
      ),
    },
    {
      title: t('description'),
      dataIndex: 'description',
      key: 'description',
      ellipsis: true,
    },
    {
      title: t('category'),
      dataIndex: 'category',
      key: 'category',
      render: (category: string) => (
        <Tag color={getCategoryColor(category)}>
          {demoCategories.find(c => c.value === category)?.label}
        </Tag>
      ),
    },
    {
      title: t('variables'),
      dataIndex: 'variables',
      key: 'variables',
      render: (variables: string[]) => (
        <Tooltip title={variables.join(', ')}>
          <span>
            {variables.length} {t('variables')}
          </span>
        </Tooltip>
      ),
    },
    {
      title: t('actions'),
      key: 'actions',
      render: (_, record) => (
        <Space size="middle">
          <Tooltip title={t('preview')}>
            <Button 
              icon={<EyeOutlined />} 
              size="small"
              onClick={() => handlePreviewTemplate(record)}
            />
          </Tooltip>
          <Tooltip title={t('duplicate')}>
            <Button 
              icon={<CopyOutlined />} 
              size="small"
              onClick={() => handleDuplicateTemplate(record)}
            />
          </Tooltip>
          <Tooltip title={t('edit')}>
            <Button 
              icon={<EditOutlined />} 
              size="small"
              onClick={() => handleEditTemplate(record)}
              disabled={record.is_system}
            />
          </Tooltip>
          <Popconfirm
            title={t('confirmDeleteTemplate')}
            description={t('deleteTemplateWarning')}
            onConfirm={() => handleDeleteTemplate(record.id)}
            okText={t('yes')}
            cancelText={t('no')}
            disabled={record.is_system}
          >
            <Tooltip title={record.is_system ? t('systemTemplateCannotDelete') : t('delete')}>
              <Button 
                icon={<DeleteOutlined />} 
                size="small" 
                danger
                disabled={record.is_system}
              />
            </Tooltip>
          </Popconfirm>
        </Space>
      ),
    },
  ];

  const insertVariable = (variable: string) => {
    const currentContent = form.getFieldValue('content') || '';
    form.setFieldsValue({
      content: currentContent + variable
    });
  };

  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <div>
          <Title level={2}>{t('documentTemplates')}</Title>
          <Text type="secondary">{t('documentTemplatesDescription')}</Text>
        </div>
        <Button 
          type="primary" 
          icon={<PlusOutlined />}
          onClick={() => {
            setEditingTemplate(null);
            form.resetFields();
            setIsModalVisible(true);
          }}
        >
          {t('addTemplate')}
        </Button>
      </div>

      <Card>
        <Table
          columns={columns}
          dataSource={templates}
          loading={loading}
          rowKey="id"
          pagination={{ pageSize: 10 }}
        />
      </Card>

      {/* Модальне вікно для створення/редагування шаблону */}
      <Modal
        title={editingTemplate ? t('editTemplate') : t('addTemplate')}
        open={isModalVisible}
        onCancel={() => {
          setIsModalVisible(false);
          setEditingTemplate(null);
          form.resetFields();
        }}
        footer={null}
        width={800}
        style={{ top: 20 }}
      >
        <Form
          form={form}
          layout="vertical"
          onFinish={editingTemplate ? handleUpdateTemplate : handleCreateTemplate}
        >
          <div className="grid grid-cols-2 gap-4">
            <Form.Item
              name="name"
              label={t('templateName')}
              rules={[{ required: true, message: t('templateNameRequired') }]}
            >
              <Input placeholder={t('enterTemplateName')} />
            </Form.Item>
            
            <Form.Item
              name="category"
              label={t('category')}
              rules={[{ required: true, message: t('categoryRequired') }]}
            >
              <Select 
                placeholder={t('selectCategory')}
                options={demoCategories}
              />
            </Form.Item>
          </div>
          
          <Form.Item
            name="description"
            label={t('description')}
            rules={[{ required: true, message: t('descriptionRequired') }]}
          >
            <Input.TextArea 
              rows={2} 
              placeholder={t('enterTemplateDescription')}
            />
          </Form.Item>

          {/* Доступні змінні */}
          <Card 
            size="small" 
            title={t('availableVariables')}
            className="mb-4"
          >
            <Space wrap>
              {demoVariables.map(variable => (
                <Tooltip key={variable.value} title={variable.label}>
                  <Tag 
                    className="cursor-pointer"
                    onClick={() => insertVariable(variable.value)}
                  >
                    {variable.value}
                  </Tag>
                </Tooltip>
              ))}
            </Space>
          </Card>
          
          <Form.Item
            name="content"
            label={t('templateContent')}
            rules={[{ required: true, message: t('templateContentRequired') }]}
          >
            <TextArea 
              rows={12} 
              placeholder={t('enterTemplateContent')}
              style={{ fontFamily: 'monospace' }}
            />
          </Form.Item>
          
          <Form.Item className="mb-0">
            <Space>
              <Button type="primary" htmlType="submit">
                {editingTemplate ? t('update') : t('create')}
              </Button>
              <Button onClick={() => {
                setIsModalVisible(false);
                setEditingTemplate(null);
                form.resetFields();
              }}>
                {t('cancel')}
              </Button>
            </Space>
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
};

export default DocumentTemplatesPage;

src/pages/Templates/EmailTemplatesPage.tsx
import React, { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import { 
  Table, 
  Button, 
  Space, 
  Tag, 
  Modal, 
  Form, 
  Input, 
  Select, 
  message, 
  Card,
  Popconfirm,
  Tooltip,
  Switch,
  Divider,
  Typography
} from 'antd';
import { 
  PlusOutlined, 
  EditOutlined, 
  DeleteOutlined, 
  CopyOutlined,
  EyeOutlined,
  MailOutlined,
  RocketOutlined
} from '@ant-design/icons';
import type { ColumnsType } from 'antd/es/table';

const { TextArea } = Input;
const { Title, Text } = Typography;

interface EmailTemplate {
  id: string;
  name: string;
  subject: string;
  description: string;
  category: string;
  body: string;
  variables: string[];
  is_active: boolean;
  created_at: string;
  updated_at: string;
  is_system: boolean;
}

const EmailTemplatesPage: React.FC = () => {
  const { t } = useTranslation();
  const [templates, setTemplates] = useState<EmailTemplate[]>([]);
  const [loading, setLoading] = useState(false);
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [editingTemplate, setEditingTemplate] = useState<EmailTemplate | null>(null);
  const [previewContent, setPreviewContent] = useState<string>('');
  const [form] = Form.useForm();

  const demoCategories = [
    { value: 'client_communication', label: t('clientCommunication') },
    { value: 'case_updates', label: t('caseUpdates') },
    { value: 'billing', label: t('billing') },
    { value: 'meeting_reminders', label: t('meetingReminders') },
    { value: 'marketing', label: t('marketing') },
    { value: 'system', label: t('system') }
  ];

  const demoVariables = [
    { value: '{{client_name}}', label: t('clientName') },
    { value: '{{client_email}}', label: t('clientEmail') },
    { value: '{{case_number}}', label: t('caseNumber') },
    { value: '{{case_title}}', label: t('caseTitle') },
    { value: '{{hearing_date}}', label: t('hearingDate') },
    { value: '{{hearing_time}}', label: t('hearingTime') },
    { value: '{{court_name}}', label: t('courtName') },
    { value: '{{amount}}', label: t('amount') },
    { value: '{{due_date}}', label: t('dueDate') },
    { value: '{{lawyer_name}}', label: t('lawyerName') },
    { value: '{{firm_name}}', label: t('firmName') },
    { value: '{{firm_phone}}', label: t('firmPhone') },
    { value: '{{firm_address}}', label: t('firmAddress') },
    { value: '{{current_date}}', label: t('currentDate') }
  ];

  const demoTemplates: EmailTemplate[] = [
    {
      id: '1',
      name: t('welcomeEmail'),
      subject: t('welcomeEmailSubject'),
      description: t('welcomeEmailDescription'),
      category: 'client_communication',
      body: t('welcomeEmailBody'),
      variables: ['{{client_name}}', '{{lawyer_name}}', '{{firm_name}}'],
      is_active: true,
      created_at: '2024-01-15T10:00:00Z',
      updated_at: '2024-01-15T10:00:00Z',
      is_system: true
    },
    {
      id: '2',
      name: t('caseUpdateEmail'),
      subject: t('caseUpdateEmailSubject'),
      description: t('caseUpdateEmailDescription'),
      category: 'case_updates',
      body: t('caseUpdateEmailBody'),
      variables: ['{{client_name}}', '{{case_number}}', '{{case_title}}'],
      is_active: true,
      created_at: '2024-01-16T10:00:00Z',
      updated_at: '2024-01-16T10:00:00Z',
      is_system: true
    },
    {
      id: '3',
      name: t('invoiceReminderEmail'),
      subject: t('invoiceReminderEmailSubject'),
      description: t('invoiceReminderEmailDescription'),
      category: 'billing',
      body: t('invoiceReminderEmailBody'),
      variables: ['{{client_name}}', '{{amount}}', '{{due_date}}'],
      is_active: false,
      created_at: '2024-01-17T10:00:00Z',
      updated_at: '2024-01-17T10:00:00Z',
      is_system: false
    },
    {
      id: '4',
      name: t('hearingReminderEmail'),
      subject: t('hearingReminderEmailSubject'),
      description: t('hearingReminderEmailDescription'),
      category: 'meeting_reminders',
      body: t('hearingReminderEmailBody'),
      variables: ['{{client_name}}', '{{hearing_date}}', '{{hearing_time}}', '{{court_name}}'],
      is_active: true,
      created_at: '2024-01-18T10:00:00Z',
      updated_at: '2024-01-18T10:00:00Z',
      is_system: false
    }
  ];

  useEffect(() => {
    fetchTemplates();
  }, []);

  const fetchTemplates = async () => {
    setLoading(true);
    try {
      setTemplates(demoTemplates);
    } catch (error) {
      message.error(t('errorFetchingTemplates'));
    } finally {
      setLoading(false);
    }
  };

  const handleCreateTemplate = async (values: any) => {
    try {
      const newTemplate: EmailTemplate = {
        id: Date.now().toString(),
        name: values.name,
        subject: values.subject,
        description: values.description,
        category: values.category,
        body: values.body,
        variables: values.variables || [],
        is_active: values.is_active || false,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        is_system: false
      };
      
      setTemplates(prev => [...prev, newTemplate]);
      setIsModalVisible(false);
      form.resetFields();
      message.success(t('templateCreated'));
    } catch (error) {
      message.error(t('errorCreatingTemplate'));
    }
  };

  const handleUpdateTemplate = async (values: any) => {
    if (!editingTemplate) return;
    
    try {
      setTemplates(prev => prev.map(template => 
        template.id === editingTemplate.id 
          ? { 
              ...template, 
              ...values,
              updated_at: new Date().toISOString()
            }
          : template
      ));
      setIsModalVisible(false);
      setEditingTemplate(null);
      form.resetFields();
      message.success(t('templateUpdated'));
    } catch (error) {
      message.error(t('errorUpdatingTemplate'));
    }
  };

  const handleDeleteTemplate = async (id: string) => {
    try {
      setTemplates(prev => prev.filter(template => template.id !== id));
      message.success(t('templateDeleted'));
    } catch (error) {
      message.error(t('errorDeletingTemplate'));
    }
  };

  const handleDuplicateTemplate = async (template: EmailTemplate) => {
    try {
      const duplicatedTemplate: EmailTemplate = {
        ...template,
        id: Date.now().toString(),
        name: `${template.name} (${t('copy')})`,
        is_system: false,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };
      
      setTemplates(prev => [...prev, duplicatedTemplate]);
      message.success(t('templateDuplicated'));
    } catch (error) {
      message.error(t('errorDuplicatingTemplate'));
    }
  };

  const handleToggleActive = async (template: EmailTemplate) => {
    try {
      setTemplates(prev => 
        prev.map(item => 
          item.id === template.id 
            ? { ...item, is_active: !item.is_active }
            : item
        )
      );
      message.success(
        template.is_active 
          ? t('templateDeactivated') 
          : t('templateActivated')
      );
    } catch (error) {
      message.error(t('errorTogglingTemplate'));
    }
  };

  const handleEditTemplate = (template: EmailTemplate) => {
    setEditingTemplate(template);
    form.setFieldsValue({
      name: template.name,
      subject: template.subject,
      description: template.description,
      category: template.category,
      body: template.body,
      variables: template.variables,
      is_active: template.is_active
    });
    setIsModalVisible(true);
  };

  const handlePreviewTemplate = (template: EmailTemplate) => {
    setPreviewContent(template.body);
    Modal.info({
      title: (
        <Space>
          <MailOutlined />
          <span>{template.name}</span>
        </Space>
      ),
      width: 600,
      content: (
        <div>
          <Text strong>{t('subject')}:</Text>
          <p className="font-semibold">{template.subject}</p>
          <Divider />
          <Text strong>{t('preview')}:</Text>
          <div 
            className="bg-gray-50 p-4 rounded mt-2 whitespace-pre-wrap border"
            style={{ maxHeight: '400px', overflow: 'auto' }}
          >
            {template.body}
          </div>
          {template.variables.length > 0 && (
            <>
              <Divider />
              <Text strong>{t('availableVariables')}:</Text>
              <div className="mt-2">
                {template.variables.map(variable => (
                  <Tag key={variable} className="mb-1">
                    {variable}
                  </Tag>
                ))}
              </div>
            </>
          )}
        </div>
      )
    });
  };

  const handleSendTestEmail = async (template: EmailTemplate) => {
    try {
      // Тут буде логіка відправки тестового email
      await new Promise(resolve => setTimeout(resolve, 1000));
      message.success(t('testEmailSent'));
    } catch (error) {
      message.error(t('errorSendingTestEmail'));
    }
  };

  const getCategoryColor = (category: string) => {
    const colors: { [key: string]: string } = {
      client_communication: 'blue',
      case_updates: 'green',
      billing: 'orange',
      meeting_reminders: 'purple',
      marketing: 'cyan',
      system: 'red'
    };
    return colors[category] || 'default';
  };

  const columns: ColumnsType<EmailTemplate> = [
    {
      title: t('name'),
      dataIndex: 'name',
      key: 'name',
      render: (name: string, record) => (
        <Space>
          <MailOutlined />
          <span>{name}</span>
          {record.is_system && (
            <Tag color="blue">{t('system')}</Tag>
          )}
        </Space>
      ),
    },
    {
      title: t('subject'),
      dataIndex: 'subject',
      key: 'subject',
      ellipsis: true,
    },
    {
      title: t('category'),
      dataIndex: 'category',
      key: 'category',
      render: (category: string) => (
        <Tag color={getCategoryColor(category)}>
          {demoCategories.find(c => c.value === category)?.label}
        </Tag>
      ),
    },
    {
      title: t('status'),
      dataIndex: 'is_active',
      key: 'is_active',
      render: (isActive: boolean) => (
        <Tag color={isActive ? 'green' : 'red'}>
          {isActive ? t('active') : t('inactive')}
        </Tag>
      ),
    },
    {
      title: t('actions'),
      key: 'actions',
      width: 200,
      render: (_, record) => (
        <Space size="small">
          <Tooltip title={t('preview')}>
            <Button 
              icon={<EyeOutlined />} 
              size="small"
              onClick={() => handlePreviewTemplate(record)}
            />
          </Tooltip>
          <Tooltip title={t('sendTest')}>
            <Button 
              icon={<RocketOutlined />} 
              size="small"
              onClick={() => handleSendTestEmail(record)}
            />
          </Tooltip>
          <Tooltip title={t('duplicate')}>
            <Button 
              icon={<CopyOutlined />} 
              size="small"
              onClick={() => handleDuplicateTemplate(record)}
            />
          </Tooltip>
          <Tooltip title={t('edit')}>
            <Button 
              icon={<EditOutlined />} 
              size="small"
              onClick={() => handleEditTemplate(record)}
              disabled={record.is_system}
            />
          </Tooltip>
          <Popconfirm
            title={t('confirmDeleteTemplate')}
            description={t('deleteTemplateWarning')}
            onConfirm={() => handleDeleteTemplate(record.id)}
            okText={t('yes')}
            cancelText={t('no')}
            disabled={record.is_system}
          >
            <Tooltip title={record.is_system ? t('systemTemplateCannotDelete') : t('delete')}>
              <Button 
                icon={<DeleteOutlined />} 
                size="small" 
                danger
                disabled={record.is_system}
              />
            </Tooltip>
          </Popconfirm>
          <Switch
            size="small"
            checked={record.is_active}
            onChange={() => handleToggleActive(record)}
            disabled={record.is_system}
          />
        </Space>
      ),
    },
  ];

  const insertVariable = (variable: string) => {
    const currentBody = form.getFieldValue('body') || '';
    form.setFieldsValue({
      body: currentBody + variable
    });
  };

  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <div>
          <Title level={2}>{t('emailTemplates')}</Title>
          <Text type="secondary">{t('emailTemplatesDescription')}</Text>
        </div>
        <Button 
          type="primary" 
          icon={<PlusOutlined />}
          onClick={() => {
            setEditingTemplate(null);
            form.resetFields();
            setIsModalVisible(true);
          }}
        >
          {t('addTemplate')}
        </Button>
      </div>

      <Card>
        <Table
          columns={columns}
          dataSource={templates}
          loading={loading}
          rowKey="id"
          pagination={{ pageSize: 10 }}
        />
      </Card>

      {/* Модальне вікно для створення/редагування шаблону */}
      <Modal
        title={editingTemplate ? t('editTemplate') : t('addTemplate')}
        open={isModalVisible}
        onCancel={() => {
          setIsModalVisible(false);
          setEditingTemplate(null);
          form.resetFields();
        }}
        footer={null}
        width={800}
        style={{ top: 20 }}
      >
        <Form
          form={form}
          layout="vertical"
          onFinish={editingTemplate ? handleUpdateTemplate : handleCreateTemplate}
        >
          <div className="grid grid-cols-2 gap-4">
            <Form.Item
              name="name"
              label={t('templateName')}
              rules={[{ required: true, message: t('templateNameRequired') }]}
            >
              <Input placeholder={t('enterTemplateName')} />
            </Form.Item>
            
            <Form.Item
              name="category"
              label={t('category')}
              rules={[{ required: true, message: t('categoryRequired') }]}
            >
              <Select 
                placeholder={t('selectCategory')}
                options={demoCategories}
              />
            </Form.Item>
          </div>

          <Form.Item
            name="subject"
            label={t('emailSubject')}
            rules={[{ required: true, message: t('emailSubjectRequired') }]}
          >
            <Input placeholder={t('enterEmailSubject')} />
          </Form.Item>
          
          <Form.Item
            name="description"
            label={t('description')}
            rules={[{ required: true, message: t('descriptionRequired') }]}
          >
            <Input.TextArea 
              rows={2} 
              placeholder={t('enterTemplateDescription')}
            />
          </Form.Item>

          {/* Доступні змінні */}
          <Card 
            size="small" 
            title={t('availableVariables')}
            className="mb-4"
          >
            <Space wrap>
              {demoVariables.map(variable => (
                <Tooltip key={variable.value} title={variable.label}>
                  <Tag 
                    className="cursor-pointer"
                    onClick={() => insertVariable(variable.value)}
                  >
                    {variable.value}
                  </Tag>
                </Tooltip>
              ))}
            </Space>
          </Card>
          
          <Form.Item
            name="body"
            label={t('emailBody')}
            rules={[{ required: true, message: t('emailBodyRequired') }]}
          >
            <TextArea 
              rows={10} 
              placeholder={t('enterEmailBody')}
              style={{ fontFamily: 'monospace' }}
            />
          </Form.Item>

          {!editingTemplate?.is_system && (
            <Form.Item
              name="is_active"
              label={t('status')}
              valuePropName="checked"
              initialValue={false}
            >
              <Switch checkedChildren={t('active')} unCheckedChildren={t('inactive')} />
            </Form.Item>
          )}
          
          <Form.Item className="mb-0">
            <Space>
              <Button type="primary" htmlType="submit">
                {editingTemplate ? t('update') : t('create')}
              </Button>
              <Button onClick={() => {
                setIsModalVisible(false);
                setEditingTemplate(null);
                form.resetFields();
              }}>
                {t('cancel')}
              </Button>
            </Space>
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
};

export default EmailTemplatesPage;

src/pages/TimeTracker/TimeTrackerPage.tsx
import React, { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import {
  Button,
  Card,
  Space,
  Typography,
  Input,
  message,
  Form
} from 'antd';
import {
  PlayCircleOutlined,
  PauseCircleOutlined,
  StopOutlined
} from '@ant-design/icons';
import { demoApi } from "../../services/api";

const { Title } = Typography;

const TimeTrackerPage: React.FC = () => {
  const { t } = useTranslation();
  const [timer, setTimer] = useState<number>(0);
  const [isRunning, setIsRunning] = useState<boolean>(false);
  const [intervalId, setIntervalId] = useState<NodeJS.Timeout | null>(null);
  const [description, setDescription] = useState<string>('');

  const startTimer = () => {
    setIsRunning(true);
    message.success(t('timerStarted'));
    const id = setInterval(() => {
      setTimer((prevTimer) => prevTimer + 1);
    }, 1000);
    setIntervalId(id);
  };

  const pauseTimer = () => {
    setIsRunning(false);
    message.warning(t('timerPaused'));
    if (intervalId) clearInterval(intervalId);
    setIntervalId(null);
  };

  const stopTimer = () => {
    setIsRunning(false);
    setTimer(0);
    message.info(t('timerStopped'));
    if (intervalId) clearInterval(intervalId);
    setIntervalId(null);
  };

  const handleDescriptionChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setDescription(e.target.value);
  };

  const handleSubmit = async () => {
    if (timer === 0) {
      message.warning(t('timerNotStarted'));
      return;
    }

    try {
      await api.post('/time-tracker', {
        description,
        duration: timer,
      });
      message.success(t('timeTracked'));
      setTimer(0);
      setDescription('');
    } catch (error) {
      message.error(t('errorTrackingTime'));
    }
  };

  return (
    <div>
      <Title level={2}>{t('timeTracker')}</Title>
      <Card className="mb-6">
        <div className="flex justify-center items-center mb-4">
          <Title level={3} className="mr-4">
            {Math.floor(timer / 3600).toString().padStart(2, '0')}:
            {Math.floor((timer % 3600) / 60).toString().padStart(2, '0')}:
            {(timer % 60).toString().padStart(2, '0')}
          </Title>
          <Space size="middle">
            <Button
              type="primary"
              icon={<PlayCircleOutlined />}
              onClick={startTimer}
              disabled={isRunning}
            >
              {t('startTimer')}
            </Button>
            <Button
              type="primary"
              icon={<PauseCircleOutlined />}
              onClick={pauseTimer}
              disabled={!isRunning}
            >
              {t('pauseTimer')}
            </Button>
            <Button
              danger // ✅ Замінено type="danger" на danger
              icon={<StopOutlined />}
              onClick={stopTimer}
              disabled={isRunning}
            >
              {t('stopTimer')}
            </Button>
          </Space>
        </div>
        <Form layout="vertical">
          <Form.Item
            label={t('description')}
          >
            <Input
              value={description}
              onChange={handleDescriptionChange}
              placeholder={t('enterDescription')}
            />
          </Form.Item>
          <Form.Item>
            <Button
              type="primary"
              onClick={handleSubmit}
              block
              disabled={timer === 0}
            >
              {t('trackTime')}
            </Button>
          </Form.Item>
        </Form>
      </Card>
    </div>
  );
};

export default TimeTrackerPage;

src/pages/NotFound.tsx
import React from 'react';
import { useTranslation } from 'react-i18next';
import { Button, Result } from 'antd';
import { useNavigate } from 'react-router-dom';

const NotFoundPage: React.FC = () => {
  const { t } = useTranslation();
  const navigate = useNavigate();

  return (
    <Result
      status="404"
      title="404"
      subTitle={t('pageNotFound', 'Сторінку не знайдено')}
      extra={
        <Button type="primary" onClick={() => navigate('/')}>
          {t('backHome', 'На головну')}
        </Button>
      }
    />
  );
};

export default NotFoundPage;



public/locales/uk/translation.json
{
  "welcome": "Ласкаво просимо до CRM адвоката Дмитра ЛАПОШІ",
  "login": "Вхід",
  "register": "Реєстрація",
  "email": "Електронна пошта",
  "password": "Пароль",
  "fullName": "Повне ім'я",
  "role": "Роль",
  "cases": "Справи",
  "clients": "Клієнти",
  "hearings": "Засідання",
  "tasks": "Завдання",
  "invoices": "Рахунки",
  "kanban": "Дошка завдань",
  "calendar": "Календар",
  "timeTracker": "Тайм-трекер",
  "reports": "Звіти",
  "dashboard": "Головна панель",
  "logout": "Вийти",
  "noAccount": "Немає акаунта?",
  "haveAccount": "Вже маєте акаунт?",
  "emailRequired": "Будь ласка, введіть електронну пошту!",
  "passwordRequired": "Будь ласка, введіть пароль!",
  "fullNameRequired": "Будь ласка, введіть повне ім'я!",
  "roleRequired": "Будь ласка, виберіть роль!",
  "loginSuccess": "Вхід успішний!",
  "loginError": "Помилка входу. Перевірте логін та пароль.",
  "registerSuccess": "Реєстрація успішна!",
  "registerError": "Помилка реєстрації. Перевірте дані.",
  "number": "Номер",
  "title": "Назва",
  "client": "Клієнт",
  "status": "Статус",
  "stage": "Стадія",
  "dueDate": "Кінцевий термін",
  "hourlyRate": "Погодинна ставка",
  "budget": "Бюджет",
  "actions": "Дії",
  "edit": "Редагувати",
  "view": "Переглянути",
  "open": "Відкрита",
  "on_hold": "На паузі",
  "closed": "Закрита",
  "archived": "Архів",
  "addCase": "Додати справу",
  "createCase": "Створити справу",
  "caseNumber": "Номер справи",
  "caseTitle": "Назва справи",
  "selectClient": "Виберіть клієнта",
  "selectStatus": "Виберіть статус",
  "selectStage": "Виберіть стадію",
  "caseNumberRequired": "Номер справи обов'язковий",
  "caseTitleRequired": "Назва справи обов'язкова",
  "clientRequired": "Клієнт обов'язковий",
  "create": "Створити",
  "cancel": "Скасувати",
  "errorFetchingCases": "Помилка отримання списку справ",
  "errorCreatingCase": "Помилка створення справи",
  "caseCreated": "Справу створено успішно",
  "addClient": "Додати клієнта",
  "createClient": "Створити клієнта",
  "clientType": "Тип клієнта",
  "selectType": "Виберіть тип",
  "person": "Фізична особа",
  "company": "Юридична особа",
  "edrpou": "ЄДРПОУ",
  "drfo": "ДРФО",
  "emails": "Електронні пошти",
  "phones": "Телефони",
  "address": "Адреса",
  "kycStatus": "Статус KYC",
  "selectKYCStatus": "Виберіть статус KYC",
  "unknown": "Невідомо",
  "pending": "Очікує",
  "verified": "Перевірено",
  "rejected": "Відхилено",
  "enterEmails": "Введіть електронні пошти",
  "enterPhones": "Введіть телефони",
  "clientTypeRequired": "Тип клієнта обов'язковий",
  "errorFetchingClients": "Помилка отримання списку клієнтів",
  "errorCreatingClient": "Помилка створення клієнта",
  "clientCreated": "Клієнта створено успішно",
  "quickActions": "Швидкі дії",
  "hoursTracked": "Відпрацьовано годин",
  "income": "Дохід",
  "startTimer": "Запустити таймер",
  "createInvoice": "Створити рахунок",
  "draft": "Чернетка",
  "sent": "Надіслано",
  "paid": "Оплачено",
  "overdue": "Протерміновано",
  "upcomingHearings": "Найближчі засідання",
  "recentActivity": "Останні зміни",
  "preTrial": "Досудове",
  "firstInstance": "Перша інстанція",
  "appeal": "Апеляція",
  "cassation": "Касація",
  "enforcement": "Виконавче провадження",
  "onHold": "На паузі",
  "loginToContinue": "Увійдіть, щоб продовжити",
  "invalidEmailFormat": "Будь ласка, введіть коректну email адресу",
  "enterPassword": "Введіть пароль",
  "loggingIn": "Вхід...",
  "forgotPassword": "Забули пароль?",
  "or": "або",
  "createAccount": "Створити акаунт",
  "joinOurPlatform": "Приєднуйтесь до нашої платформи",
  "personalInfo": "Особиста інформація",
  "accountDetails": "Деталі акаунту",
  "security": "Безпека",
  "enterFullName": "Введіть повне ім'я",
  "confirmPassword": "Підтвердіть пароль",
  "passwordMinLength": "Пароль має містити щонайменше 8 символів",
  "passwordComplexity": "Пароль має містити великі, малі літери та цифри",
  "passwordsDoNotMatch": "Паролі не співпадають",
  "next": "Далі",
  "previous": "Назад",
  "completeRegistration": "Завершити реєстрацію",
  "creatingAccount": "Створення акаунту...",
  "registrationComplete": "Реєстрація успішна! Тепер ви можете увійти.",
  "admin": "Адміністратор",
  "lawyer": "Адвокат",
  "assistant": "Помічник",
  "paralegal": "Юрист",
  "accountant": "Бухгалтер",
  "viewer": "Переглядач",
  "selectRole": "Виберіть роль",
  "user": "Користувач",
  "newCaseAssigned": "Призначено нову справу",
  "hearingReminder": "Нагадування про засідання",
  "invoiceDue": "Рахунок до сплати",
  "continueWithGoogle": "Продовжити з Google",
  "continueWithFacebook": "Продовжити з Facebook",
  "confirmPasswordRequired": "Будь ласка, підтвердіть пароль",
  "backToList": "Назад до списку",
  "errorFetchingCase": "Помилка завантаження справи",
  "description": "Опис",
  "noDescription": "Опис відсутній",
  "editCase": "Редагувати справу",
  "viewDocuments": "Переглянути документи",
  "recentActivity": "Останні дії",
  "lastUpdated": "Останнє оновлення",
  "profile": "Профіль",
  "settings": "Налаштування",
  "errorFetchingHearings": "Помилка завантаження засідань",
  "addHearing": "Додати засідання",
  "court": "Суд",
  "judge": "Суддя",
  "scheduled": "Заплановано",
  "completed": "Завершено",
  "cancelled": "Скасовано",
  "date": "Дата",
  "time": "Час",
  "taskName": "Назва завдання",
  "priority": "Пріоритет",
  "assignedTo": "Відповідальний",
  "high": "Високий",
  "medium": "Середній",
  "low": "Низький",
  "addTask": "Додати завдання",
  "errorFetchingTasks": "Помилка завантаження завдань",
  "todo": "До виконання",
  "inProgress": "В роботі",
  "review": "На перевірці",
  "done": "Виконано",
  "invoiceNumber": "Номер рахунку",
  "amount": "Сума",
  "issueDate": "Дата виставлення",
  "dueDate": "Термін сплати",
  "addInvoice": "Додати рахунок",
  "errorFetchingInvoices": "Помилка завантаження рахунків",
  "startTime": "Початок",
  "endTime": "Кінець",
  "duration": "Тривалість",
  "stopTimer": "Зупинити таймер",
  "errorFetchingTimeEntries": "Помилка завантаження записів часу",
  "reportType": "Тип звіту",
  "dateRange": "Період",
  "generateReport": "Згенерувати звіт",
  "errorGeneratingReport": "Помилка генерації звіту",
  "loading": "Завантаження...",
  "save": "Зберегти",
  "delete": "Видалити",
  "confirm": "Підтвердити",
  "search": "Пошук",
  "filter": "Фільтр",
  "sort": "Сортувати",
  "refresh": "Оновити",
  "download": "Завантажити",
  "upload": "Завантажити",
  "print": "Друкувати",
  "export": "Експорт",
  "import": "Імпорт",
  "success": "Успішно",
  "error": "Помилка",
  "warning": "Попередження",
  "info": "Інформація",
  "attention": "Увага",
  "requiredField": "Обов'язкове поле",
  "optional": "Необов'язково",
  "all": "Всі",
  "active": "Активні",
  "inactive": "Неактивні",
  "yes": "Так",
  "no": "Ні",
  "enable": "Увімкнути",
  "disable": "Вимкнути",
  "on": "Вкл",
  "off": "Викл",
  "true": "Так",
  "false": "Ні",
  "add": "Додати",
  "remove": "Видалити",
  "update": "Оновити",
  "submit": "Відправити",
  "reset": "Скинути",
  "close": "Закрити",
  "back": "Назад",
  "next": "Далі",
  "previous": "Попередній",
  "first": "Перший",
  "last": "Останній",
  "more": "Більше",
  "less": "Менше",
  "show": "Показати",
  "hide": "Приховати",
  "expand": "Розгорнути",
  "collapse": "Згорнути",
  "details": "Деталі",
  "summary": "Підсумок",
  "preview": "Попередній перегляд",
  "review": "Перегляд",
  "approve": "Затвердити",
  "reject": "Відхилити",
  "accept": "Прийняти",
  "decline": "Відхилити",
  "send": "Надіслати",
  "receive": "Отримати",
  "read": "Прочитано",
  "unread": "Непрочитано",
  "new": "Новий",
  "old": "Старий",
  "current": "Поточний",
  "previous": "Попередній",
  "future": "Майбутній",
  "past": "Минулий",
  "today": "Сьогодні",
  "yesterday": "Вчора",
  "tomorrow": "Завтра",
  "thisWeek": "Цього тижня",
  "lastWeek": "Минулого тижня",
  "nextWeek": "Наступного тижня",
  "thisMonth": "Цього місяця",
  "lastMonth": "Минулого місяця",
  "nextMonth": "Наступного місяця",
  "thisYear": "Цього року",
  "lastYear": "Минулого року",
  "nextYear": "Наступного року",
  "lightTheme": "Світла тема",
  "darkTheme": "Темна тема",
  "lawyerCRM": "Адвокатський CRM",
  "allRightsReserved": "Всі права захищено",
  "needHelp": "Потрібна допомога?",
  "contactSupport": "Зв'язатися з підтримкою",
  "totalCases": "Всього справ",
  "totalClients": "Всього клієнтів",
  "activeCases": "Активних справ",
  "revenue": "Дохід",
  "noRecentActivity": "Немає останньої активності",
  "errorOccurred": "Сталася помилка",
  "errorPleaseTryAgain": "Будь ласка, спробуйте ще раз",
  "tryAgain": "Спробувати знову",
  "goToHomepage": "На головну",
  "rolesAndPermissions": "Ролі та дозволи",
  "roles": "Ролі",
  "permissions": "Дозволи",
  "roleName": "Назва ролі",
  "roleNameRequired": "Назва ролі обов'язкова",
  "enterRoleName": "Введіть назву ролі",
  "enterRoleDescription": "Введіть опис ролі",
  "selectPermissions": "Виберіть дозволи",
  "addRole": "Додати роль",
  "editRole": "Редагувати роль",
  "roleCreated": "Роль створено успішно",
  "roleUpdated": "Роль оновлено успішно",
  "roleDeleted": "Роль видалено успішно",
  "confirmDeleteRole": "Видалити роль?",
  "deleteRoleWarning": "Ця дія незворотня. Ви впевнені?",
  "errorCreatingRole": "Помилка створення ролі",
  "errorUpdatingRole": "Помилка оновлення ролі",
  "errorDeletingRole": "Помилка видалення ролі",
  "system": "Системна",
  "permissionName": "Назва дозволу",
  "category": "Категорія",
  "descriptionRequired": "Опис обов'язковий",
  "systemSettings": "Системні налаштування",
  "generalSettings": "Загальні налаштування",
  "notificationSettings": "Налаштування сповіщень",
  "securitySettings": "Налаштування безпеки",
  "backupSettings": "Резервне копіювання",
  "saveSettings": "Зберегти налаштування",
  "settingsSaved": "Налаштування збережено",
  "settingsReset": "Налаштування скинуто",
  "errorFetchingSettings": "Помилка завантаження налаштувань",
  "errorSavingSettings": "Помилка збереження налаштувань",
  "companyName": "Назва компанії",
  "companyNameRequired": "Назва компанії обов'язкова",
  "enterCompanyName": "Введіть назву компанії",
  "timezone": "Часовий пояс",
  "language": "Мова",
  "currency": "Валюта",
  "emailNotifications": "Email сповіщення",
  "pushNotifications": "Push сповіщення",
  "notificationTypes": "Типи сповіщень",
  "caseUpdates": "Оновлення справ",
  "hearingReminders": "Нагадування про засідання",
  "invoiceDue": "Термін оплати рахунків",
  "twoFactorAuth": "Двофакторна автентифікація",
  "sessionTimeout": "Таймаут сесії",
  "loginAttempts": "Спроби входу",
  "passwordPolicy": "Політика паролів",
  "weak": "Слабка",
  "medium": "Середня",
  "strong": "Сильна",
  "minutes": "хвилин",
  "days": "днів",
  "autoBackup": "Автоматичне резервне копіювання",
  "backupFrequency": "Частота бекапів",
  "backupRetention": "Зберігання бекапів",
  "lastBackup": "Останній бекап",
  "backupNow": "Зробити бекап зараз",
  "backupCreated": "Бекап створено успішно",
  "errorCreatingBackup": "Помилка створення бекапу",
  "hourly": "Щогодини",
  "daily": "Щодня",
  "weekly": "Щотижня",
  "monthly": "Щомісяця",
  "systemInfo": "Інформація про систему",
  "systemStatus": "Статус системи",
  "version": "Версія",
  "lastUpdate": "Останнє оновлення",
  "databaseSize": "Розмір бази даних",
  "activeUsers": "Активні користувачі",
  "serverTime": "Час сервера",
  "database": "База даних",
  "api": "API",
  "storage": "Сховище",
  "memory": "Пам'ять",
  "online": "Онлайн",
  "quickActions": "Швидкі дії",
  "clearCache": "Очистити кеш",
  "optimizeDatabase": "Оптимізувати базу даних",
  "securityScan": "Сканування безпеки",
  "reset": "Скинути",
  "integrations": "Інтеграції",
  "integrationsDescription": "Підключіть зовнішні сервіси до вашої CRM",
  "integrationsWarning": "Увага: Інтеграції можуть отримати доступ до ваших даних. Перевіряйте налаштування безпеки.",
  "integrationConnected": "Інтеграцію підключено",
  "integrationDisconnected": "Інтеграцію відключено",
  "errorFetchingIntegrations": "Помилка завантаження інтеграцій",
  "errorTogglingIntegration": "Помилка перемикання інтеграції",
  "configure": "Налаштувати",
  "configurationSaved": "Конфігурацію збережено",
  "errorSavingConfiguration": "Помилка збереження конфігурації",
  "apiKey": "API ключ",
  "enterApiKey": "Введіть API ключ",
  "webhookUrl": "Webhook URL",
  "enterWebhookUrl": "Введіть Webhook URL",
  "lastSync": "Остання синхронізація",
  "profileSettings": "Налаштування профілю",
  "manageYourAccountSettings": "Керуйте налаштуваннями вашого акаунту",
  "profile": "Профіль",
  "security": "Безпека",
  "preferences": "Налаштування",
  "billing": "Оплата",
  "profilePicture": "Фото профілю",
  "changeAvatar": "Змінити аватар",
  "avatarUpdated": "Аватар оновлено",
  "avatarRecommendations": "Рекомендуємо зображення 200x200 пікселів",
  "personalInformation": "Особиста інформація",
  "position": "Посада",
  "bio": "Біографія",
  "tellAboutYourself": "Розкажіть про себе",
  "profileUpdated": "Профіль оновлено",
  "errorUpdatingProfile": "Помилка оновлення профілю",
  "saveChanges": "Зберегти зміни",
  "changePassword": "Змінити пароль",
  "passwordChanged": "Пароль змінено",
  "errorChangingPassword": "Помилка зміни пароля",
  "currentPassword": "Поточний пароль",
  "currentPasswordRequired": "Введіть поточний пароль",
  "newPassword": "Новий пароль",
  "newPasswordRequired": "Введіть новий пароль",
  "confirmPassword": "Підтвердіть пароль",
  "confirmPasswordRequired": "Підтвердіть новий пароль",
  "twoFactorAuthDescription": "Додатковий захист для вашого акаунту",
  "loginAlerts": "Сповіщення про вхід",
  "loginAlertsDescription": "Отримуйте сповіщення про нові входи",
  "activeSessions": "Активні сесії",
  "sessionTerminated": "Сесію завершено",
  "terminate": "Завершити",
  "current": "Поточна",
  "lastActive": "Остання активність",
  "languageRegion": "Мова та регіон",
  "theme": "Тема",
  "auto": "Авто",
  "dateFormat": "Формат дати",
  "timeFormat": "Формат часу",
  "hour": "годин",
  "notifications": "Сповіщення",
  "emailNotificationsDescription": "Отримувати сповіщення по email",
  "pushNotificationsDescription": "Отримувати push-сповіщення",
  "desktopNotifications": "Desktop сповіщення",
  "desktopNotificationsDescription": "Показувати сповіщення на робочому столі",
  "display": "Відображення",
  "compactView": "Компактний вигляд",
  "compactViewDescription": "Показувати більше інформації на екрані",
  "showTutorials": "Показувати підказки",
  "showTutorialsDescription": "Показувати навчальні підказки",
  "preferencesSaved": "Налаштування збережено",
  "errorSavingPreferences": "Помилка збереження налаштувань",
  "savePreferences": "Зберегти налаштування",
  "currentBalance": "Поточний баланс",
  "nextBillingDate": "Наступне списання",
  "plan": "План",
  "professional": "Професійний",
  "invoiceHistory": "Історія рахунків",
  "invoiceNumber": "Номер рахунку",
  "payNow": "Сплатити",
  "paymentMethods": "Способи оплати",
  "add": "Додати",
  "default": "За замовчуванням",
  "setDefault": "Зробити за замовчуванням",
  "expires": "Діє до",
  "billingInformation": "Платіжна інформація",
  "addPaymentMethod": "Додати спосіб оплати",
  "cardType": "Тип картки",
  "cardTypeRequired": "Виберіть тип картки",
  "cardNumber": "Номер картки",
  "cardNumberRequired": "Введіть номер картки",
  "cardNumberLength": "Номер картки має містити 16 цифр",
  "expiryDate": "Термін дії",
  "expiryDateRequired": "Введіть термін дії",
  "cvc": "CVC",
  "cvcRequired": "Введіть CVC код",
  "addCard": "Додати картку",
  "paymentMethodAdded": "Спосіб оплати додано",
  "errorAddingPaymentMethod": "Помилка додавання способу оплати",
  "knowledgeBase": "База знань",
  "knowledgeBaseDescription": "Знайдіть відповіді на ваші запитання",
  "searchKnowledgeBase": "Пошук в базі знань...",
  "categories": "Категорії",
  "allCategories": "Всі категорії",
  "gettingStarted": "Початок роботи",
  "popularArticles": "Популярні статті",
  "articles": "Статті",
  "views": "переглядів",
  "lastUpdated": "Останнє оновлення",
  "noArticlesFound": "Статті не знайдено",
  "frequentlyAskedQuestions": "Часті запитання",
  "howToCreateCase": "Як створити справу",
  "howToCreateCaseContent": "Детальний посібник зі створення нової справи в системі",
  "managingClients": "Управління клієнтами",
  "managingClientsContent": "Як додавати та керувати клієнтами в CRM",
  "billingAndInvoices": "Оплата та рахунки",
  "billingAndInvoicesContent": "Все про створення рахунків та управління оплатами",
  "userPermissions": "Права користувачів",
  "userPermissionsContent": "Налаштування ролей та дозволів для команди",
  "timeTracking": "Відстеження часу",
  "timeTrackingContent": "Як використовувати тайм-трекер для обліку робочого часу",
  "howToResetPassword": "Як скинути пароль?",
  "howToResetPasswordAnswer": "Перейдіть в налаштування безпеки та виберіть 'Змінити пароль'",
  "howToExportData": "Як експортувати дані?",
  "howToExportDataAnswer": "Ви можете експортувати дані з розділу звітів",
  "howToAddTeamMember": "Як додати члена команди?",
  "howToAddTeamMemberAnswer": "Перейдіть в управління користувачами та натисніть 'Додати користувача'",
  "howToGenerateReports": "Як генерувати звіти?",
  "howToGenerateReportsAnswer": "Звіти доступні в відповідному розділі з фільтрами та налаштуваннями",
  "supportTickets": "Тікети підтримки",
  "newTicket": "Новий тікет",
  "ticketHistory": "Історія тікетів",
  "problemWithCaseCreation": "Проблема зі створенням справи",
  "problemWithCaseCreationDescription": "Не вдається створити нову справу, виникає помилка при збереженні",
  "billingQuestion": "Питання по оплаті",
  "billingQuestionDescription": "Потрібна допомога з налаштуванням автоматичних сповіщень про оплату",
  "featureRequest": "Запит функції",
  "featureRequestDescription": "Хотілося б мати можливість експорту календаря",
  "open": "Відкритий",
  "in_progress": "В роботі",
  "resolved": "Вирішений",
  "created": "Створено",
  "you": "Ви",
  "supportTeam": "Команда підтримки",
  "messageRequired": "Введіть повідомлення",
  "typeYourMessage": "Введіть ваше повідомлення...",
  "attachFile": "Прикріпити файл",
  "sendMessage": "Надіслати повідомлення",
  "createNewTicket": "Створити новий тікет",
  "subject": "Тема",
  "subjectRequired": "Введіть тему тікету",
  "enterSubject": "Введіть тему...",
  "describeYourIssue": "Опишіть вашу проблему детально...",
  "descriptionRequired": "Введіть опис проблеми",
  "attachFiles": "Прикріпити файли",
  "createTicket": "Створити тікет",
  "ticketCreated": "Тікет створено",
  "errorCreatingTicket": "Помилка створення тікету",
  "messageSent": "Повідомлення надіслано",
  "errorSendingMessage": "Помилка відправки повідомлення",
  "ticketInitialMessage": "Доброго дня! У мене виникає помилка при створенні нової справи. Після заповнення всіх полів та натискання кнопки 'Створити' система видає помилку 'Validation failed'. Як це виправити?",
  "supportResponse": "Доброго дня! Дякуємо за звернення. Для вирішення проблеми, будь ласка, перевірте чи всі обов'язкові поля заповнені коректно. Особливо зверніть увагу на формат дати та числові поля. Якщо проблема залишиться, надайте скріншот помилки.",
  "documentTemplates": "Шаблони документів",
  "documentTemplatesDescription": "Керуйте шаблонами документів для швидкого створення",
  "emailTemplates": "Шаблони email",
  "emailTemplatesDescription": "Керуйте шаблонами email для автоматизації листування",
  "addTemplate": "Додати шаблон",
  "editTemplate": "Редагувати шаблон",
  "templateName": "Назва шаблону",
  "templateNameRequired": "Назва шаблону обов'язкова",
  "enterTemplateName": "Введіть назву шаблону",
  "templateContent": "Вміст шаблону",
  "templateContentRequired": "Вміст шаблону обов'язковий",
  "enterTemplateContent": "Введіть вміст шаблону...",
  "enterTemplateDescription": "Введіть опис шаблону",
  "templateCreated": "Шаблон створено",
  "templateUpdated": "Шаблон оновлено",
  "templateDeleted": "Шаблон видалено",
  "templateDuplicated": "Шаблон дубльовано",
  "errorCreatingTemplate": "Помилка створення шаблону",
  "errorUpdatingTemplate": "Помилка оновлення шаблону",
  "errorDeletingTemplate": "Помилка видалення шаблону",
  "errorDuplicatingTemplate": "Помилка дублювання шаблону",
  "errorFetchingTemplates": "Помилка завантаження шаблонів",
  "confirmDeleteTemplate": "Видалити шаблон?",
  "deleteTemplateWarning": "Ця дія незворотня. Ви впевнені?",
  "systemTemplateCannotDelete": "Системний шаблон не можна видалити",
  "contracts": "Договори",
  "lawsuits": "Позови",
  "agreements": "Угоди",
  "motions": "Клопотання",
  "letters": "Листи",
  "reports": "Звіти",
  "clientCommunication": "Спілкування з клієнтами",
  "caseUpdates": "Оновлення справ",
  "billing": "Оплата",
  "meetingReminders": "Нагадування про зустрічі",
  "marketing": "Маркетинг",
  "system": "Системні",
  "availableVariables": "Доступні змінні",
  "clientName": "Ім'я клієнта",
  "clientEmail": "Email клієнта",
  "clientAddress": "Адреса клієнта",
  "caseNumber": "Номер справи",
  "caseTitle": "Назва справи",
  "courtName": "Назва суду",
  "judgeName": "Ім'я судді",
  "hearingDate": "Дата засідання",
  "hearingTime": "Час засідання",
  "amount": "Сума",
  "dueDate": "Термін сплати",
  "lawyerName": "Ім'я адвоката",
  "firmName": "Назва фірми",
  "firmPhone": "Телефон фірми",
  "firmAddress": "Адреса фірми",
  "currentDate": "Поточна дата",
  "standardContract": "Стандартний договір",
  "standardContractDescription": "Базовий шаблон договору на надання юридичних послуг",
  "standardContractContent": "ДОГОВІР № ___\nпро надання юридичних послуг\nм. Київ, \"___\" ___________ 202_ р.\n{{firm_name}}, іменована надалі \"Виконавець\", в особі {{lawyer_name}}, що діє на підставі _________, з однієї сторони, та {{client_name}}, іменований(а) надалі \"Замовник\", з іншої сторони, уклали цей Договір про наступне:\n1. ПРЕДМЕТ ДОГОВОРУ\n1.1. Виконавець зобов'язується надати Замовнику юридичні послуги, а Замовник зобов'язується оплатити ці послуги.\n2. ВАРТІСТЬ ПОСЛУГ ТА ПОРЯДОК РОЗРАХУНКІВ\n2.1. Загальна вартість послуг за цим Договором становить {{amount}} грн.\n3. СТРОК ДІЇ ДОГОВОРУ\n3.1. Цей Договір набирає чинності з моменту підписання та діє до \"___\" ___________ 202_ р.\nПІДПИСИ СТОРІН:\nВиконавець: _________________ {{lawyer_name}}\nЗамовник: ___________________ {{client_name}}",
  "lawsuitComplaint": "Позовна заява",
  "lawsuitComplaintDescription": "Шаблон позовної заяви для цивільних справ",
  "lawsuitComplaintContent": "До {{court_name}}\nПозивач: {{client_name}}\nВідповідач: _________________\nПОЗОВНА ЗАЯВА\n{{case_title}}\nЯ, {{client_name}}, звертаюся до суду з позовною заявою щодо _________________.\nОбставини справи: _________________\nНа підставі викладеного, керуючись статтями _________________ Цивільного процесуального кодексу України,\nПРОШУ:\n1. _________________\n2. _________________\nДодатки:\n1. Копія позовної заяви.\n2. Документи, що підтверджують обставини справи.\n3. Квитанція про сплату судового збору.\n\"___\" ___________ 202_ р. _________________ {{client_name}}",
  "clientAgreement": "Угода з клієнтом",
  "clientAgreementDescription": "Угода про надання юридичної допомоги",
  "clientAgreementContent": "УГОДА\nпро надання юридичної допомоги\n{{current_date}}\n{{firm_name}}, іменована надалі \"Адвокат\", в особі {{lawyer_name}}, з однієї сторони, та {{client_name}}, іменований(а) надалі \"Клієнт\", з іншої сторони, уклали цю Угоду:\n1. Адвокат зобов'язується надати Клієнту юридичну допомогу з питань: _________________.\n2. Клієнт зобов'язується сплатити за надання юридичної допомоги _________________.\n3. Ця Угода набирає чинності з моменту підписання.\nАДВОКАТ: _________________ {{lawyer_name}}\nКЛІЄНТ: ___________________ {{client_name}}",
  "welcomeEmail": "Вітальний лист",
  "welcomeEmailSubject": "Ласкаво просимо до {{firm_name}}",
  "welcomeEmailDescription": "Лист для нових клієнтів",
  "welcomeEmailBody": "Шановний(а) {{client_name}}!\nЛаскаво просимо до адвокатської фірми {{firm_name}}! \nМи раді, що Ви обрали наші послуги. Я, {{lawyer_name}}, буду вашим основним адвокатом і надам всі необхідні консультації.\nНаша фірма спеціалізується на _________________ і має багаторічний досвід у вирішенні подібних питань.\nДля початку роботи, будь ласка, підготуйте наступні документи:\n- _________________\n- _________________\n- _________________\nЯкщо у вас виникнуть запитання, не соромтеся звертатися за телефоном {{firm_phone}} або електронною поштою.\nЗ повагою,\n{{lawyer_name}}\n{{firm_name}}\n{{firm_address}}\n{{firm_phone}}",
  "caseUpdateEmail": "Оновлення справи",
  "caseUpdateEmailSubject": "Оновлення по справі {{case_number}}",
  "caseUpdateEmailDescription": "Лист з оновленням статусу справи",
  "caseUpdateEmailBody": "Шановний(а) {{client_name}}!\nПовідомляємо Вам про оновлення статусу вашої справи {{case_number}} \"{{case_title}}\".\nПоточний статус: _________________\nОстанні події:\n- _________________\n- _________________\n- _________________\nНаступні кроки:\n- _________________\n- _________________\nЯкщо у вас виникнуть запитання, будь ласка, зв'яжіться з нами.\nЗ повагою,\n{{lawyer_name}}\n{{firm_name}}",
  "invoiceReminderEmail": "Нагадування про оплату",
  "invoiceReminderEmailSubject": "Нагадування про оплату рахунку",
  "invoiceReminderEmailDescription": "Лист-нагадування про термін оплати",
  "invoiceReminderEmailBody": "Шановний(а) {{client_name}}!\nНагадуємо Вам про необхідність оплати рахунку на суму {{amount}}.\nТермін оплати: {{due_date}}\nРеквізити для оплати:\n- _________________\n- _________________\n- _________________\nЯкщо ви вже здійснили оплату, проігноруйте цей лист.\nЗ повагою,\n{{firm_name}}",
  "hearingReminderEmail": "Нагадування про засідання",
  "hearingReminderEmailSubject": "Нагадування про засідання {{hearing_date}}",
  "hearingReminderEmailDescription": "Лист-нагадування про майбутнє засідання",
  "hearingReminderEmailBody": "Шановний(а) {{client_name}}!\nНагадуємо Вам про майбутнє засідання у справі {{case_number}}.\nДата: {{hearing_date}}\nЧас: {{hearing_time}}\nСуд: {{court_name}}\nБудь ласка, прибудьте за 15 хвилин до початку засідання. Не забудьте взяти з собою документи, що підтверджують особу.\nЯкщо у вас виникли обставини, що заважають участі в засіданні, негайно повідомте нас.\nЗ повагою,\n{{lawyer_name}}\n{{firm_name}}",
  "emailSubject": "Тема листа",
  "emailSubjectRequired": "Тема листа обов'язкова",
  "enterEmailSubject": "Введіть тему email...",
  "emailBody": "Тіло листа",
  "emailBodyRequired": "Тіло листа обов'язкове",
  "enterEmailBody": "Введіть текст email...",
  "preview": "Перегляд",
  "sendTest": "Надіслати тест",
  "testEmailSent": "Тестовий email надіслано",
  "errorSendingTestEmail": "Помилка відправки тестового email",
  "templateActivated": "Шаблон активовано",
  "templateDeactivated": "Шаблон деактивовано",
  "errorTogglingTemplate": "Помилка зміни статусу шаблону",
  "copy": "копія",
  "pageTitle": {
    "dashboard": "Головна панель - Lawyer CRM",
    "cases": "Справи - Lawyer CRM",
    "clients": "Клієнти - Lawyer CRM",
    "login": "Вхід - Lawyer CRM"
  }
}

public/locales/en/translation.json
{
  "welcome": "Welcome to Lawyer Dmitry LAPOSHI's CRM",
  "login": "Login",
  "register": "Register",
  "email": "Email",
  "password": "Password",
  "fullName": "Full Name",
  "role": "Role",
  "cases": "Cases",
  "clients": "Clients",
  "hearings": "Hearings",
  "tasks": "Tasks",
  "invoices": "Invoices",
  "kanban": "Kanban Board",
  "calendar": "Calendar",
  "timeTracker": "Time Tracker",
  "reports": "Reports",
  "dashboard": "Dashboard",
  "logout": "Logout",
  "noAccount": "Don't have an account?",
  "haveAccount": "Already have an account?",
  "emailRequired": "Please enter your email!",
  "passwordRequired": "Please enter your password!",
  "fullNameRequired": "Please enter your full name!",
  "roleRequired": "Please select a role!",
  "loginSuccess": "Login successful!",
  "loginError": "Login failed. Check your email and password.",
  "registerSuccess": "Registration successful!",
  "registerError": "Registration failed. Check your data.",
  "number": "Number",
  "title": "Title",
  "client": "Client",
  "status": "Status",
  "stage": "Stage",
  "dueDate": "Due Date",
  "hourlyRate": "Hourly Rate",
  "budget": "Budget",
  "actions": "Actions",
  "edit": "Edit",
  "view": "View",
  "open": "Open",
  "on_hold": "On Hold",
  "closed": "Closed",
  "archived": "Archived",
  "addCase": "Add Case",
  "createCase": "Create Case",
  "caseNumber": "Case Number",
  "caseTitle": "Case Title",
  "selectClient": "Select Client",
  "selectStatus": "Select Status",
  "selectStage": "Select Stage",
  "caseNumberRequired": "Case number is required",
  "caseTitleRequired": "Case title is required",
  "clientRequired": "Client is required",
  "create": "Create",
  "cancel": "Cancel",
  "errorFetchingCases": "Error fetching cases",
  "errorCreatingCase": "Error creating case",
  "caseCreated": "Case created successfully",
  "addClient": "Add Client",
  "createClient": "Create Client",
  "clientType": "Client Type",
  "selectType": "Select Type",
  "person": "Person",
  "company": "Company",
  "edrpou": "EDRPOU",
  "drfo": "DRFO",
  "emails": "Emails",
  "phones": "Phones",
  "address": "Address",
  "kycStatus": "KYC Status",
  "selectKYCStatus": "Select KYC Status",
  "unknown": "Unknown",
  "pending": "Pending",
  "verified": "Verified",
  "rejected": "Rejected",
  "enterEmails": "Enter emails",
  "enterPhones": "Enter phones",
  "clientTypeRequired": "Client type is required",
  "errorFetchingClients": "Error fetching clients",
  "errorCreatingClient": "Error creating client",
  "clientCreated": "Client created successfully",
  "quickActions": "Quick Actions",
  "hoursTracked": "Hours Tracked",
  "income": "Income",
  "startTimer": "Start Timer",
  "createInvoice": "Create Invoice",
  "draft": "Draft",
  "sent": "Sent",
  "paid": "Paid",
  "overdue": "Overdue",
  "upcomingHearings": "Upcoming Hearings",
  "recentActivity": "Recent Activity",
  "preTrial": "Pre-trial",
  "firstInstance": "First Instance",
  "appeal": "Appeal",
  "cassation": "Cassation",
  "enforcement": "Enforcement",
  "onHold": "On Hold",
  "loginToContinue": "Login to continue",
  "invalidEmailFormat": "Please enter a valid email address",
  "enterPassword": "Enter password",
  "loggingIn": "Logging in...",
  "forgotPassword": "Forgot password?",
  "or": "or",
  "createAccount": "Create Account",
  "joinOurPlatform": "Join our platform",
  "personalInfo": "Personal Info",
  "accountDetails": "Account Details",
  "security": "Security",
  "enterFullName": "Enter full name",
  "confirmPassword": "Confirm Password",
  "passwordMinLength": "Password must be at least 8 characters long",
  "passwordComplexity": "Password must contain uppercase, lowercase letters and numbers",
  "passwordsDoNotMatch": "Passwords do not match",
  "next": "Next",
  "previous": "Previous",
  "completeRegistration": "Complete Registration",
  "creatingAccount": "Creating account...",
  "registrationComplete": "Registration complete! You can now log in.",
  "admin": "Administrator",
  "lawyer": "Lawyer",
  "assistant": "Assistant",
  "paralegal": "Paralegal",
  "accountant": "Accountant",
  "viewer": "Viewer",
  "selectRole": "Select Role",
  "user": "User",
  "newCaseAssigned": "New case assigned",
  "hearingReminder": "Hearing reminder",
  "invoiceDue": "Invoice due",
  "continueWithGoogle": "Continue with Google",
  "continueWithFacebook": "Continue with Facebook",
  "confirmPasswordRequired": "Please confirm your password",
  "backToList": "Back to list",
  "errorFetchingCase": "Error fetching case",
  "description": "Description",
  "noDescription": "No description",
  "editCase": "Edit Case",
  "viewDocuments": "View Documents",
  "recentActivity": "Recent Activity",
  "lastUpdated": "Last Updated",
  "profile": "Profile",
  "settings": "Settings",
  "errorFetchingHearings": "Error fetching hearings",
  "addHearing": "Add Hearing",
  "court": "Court",
  "judge": "Judge",
  "scheduled": "Scheduled",
  "completed": "Completed",
  "cancelled": "Cancelled",
  "date": "Date",
  "time": "Time",
  "taskName": "Task Name",
  "priority": "Priority",
  "assignedTo": "Assigned To",
  "high": "High",
  "medium": "Medium",
  "low": "Low",
  "addTask": "Add Task",
  "errorFetchingTasks": "Error fetching tasks",
  "todo": "To Do",
  "inProgress": "In Progress",
  "review": "Review",
  "done": "Done",
  "invoiceNumber": "Invoice Number",
  "amount": "Amount",
  "issueDate": "Issue Date",
  "dueDate": "Due Date",
  "addInvoice": "Add Invoice",
  "errorFetchingInvoices": "Error fetching invoices",
  "startTime": "Start Time",
  "endTime": "End Time",
  "duration": "Duration",
  "stopTimer": "Stop Timer",
  "errorFetchingTimeEntries": "Error fetching time entries",
  "reportType": "Report Type",
  "dateRange": "Date Range",
  "generateReport": "Generate Report",
  "errorGeneratingReport": "Error generating report",
  "loading": "Loading...",
  "save": "Save",
  "delete": "Delete",
  "confirm": "Confirm",
  "search": "Search",
  "filter": "Filter",
  "sort": "Sort",
  "refresh": "Refresh",
  "download": "Download",
  "upload": "Upload",
  "print": "Print",
  "export": "Export",
  "import": "Import",
  "success": "Success",
  "error": "Error",
  "warning": "Warning",
  "info": "Info",
  "attention": "Attention",
  "requiredField": "Required field",
  "optional": "Optional",
  "all": "All",
  "active": "Active",
  "inactive": "Inactive",
  "yes": "Yes",
  "no": "No",
  "enable": "Enable",
  "disable": "Disable",
  "on": "On",
  "off": "Off",
  "true": "True",
  "false": "False",
  "add": "Add",
  "remove": "Remove",
  "update": "Update",
  "submit": "Submit",
  "reset": "Reset",
  "close": "Close",
  "back": "Back",
  "next": "Next",
  "previous": "Previous",
  "first": "First",
  "last": "Last",
  "more": "More",
  "less": "Less",
  "show": "Show",
  "hide": "Hide",
  "expand": "Expand",
  "collapse": "Collapse",
  "details": "Details",
  "summary": "Summary",
  "preview": "Preview",
  "review": "Review",
  "approve": "Approve",
  "reject": "Reject",
  "accept": "Accept",
  "decline": "Decline",
  "send": "Send",
  "receive": "Receive",
  "read": "Read",
  "unread": "Unread",
  "new": "New",
  "old": "Old",
  "current": "Current",
  "previous": "Previous",
  "future": "Future",
  "past": "Past",
  "today": "Today",
  "yesterday": "Yesterday",
  "tomorrow": "Tomorrow",
  "thisWeek": "This Week",
  "lastWeek": "Last Week",
  "nextWeek": "Next Week",
  "thisMonth": "This Month",
  "lastMonth": "Last Month",
  "nextMonth": "Next Month",
  "thisYear": "This Year",
  "lastYear": "Last Year",
  "nextYear": "Next Year",
  "lightTheme": "Light Theme",
  "darkTheme": "Dark Theme",
  "lawyerCRM": "Lawyer CRM",
  "allRightsReserved": "All rights reserved",
  "needHelp": "Need help?",
  "contactSupport": "Contact Support",
  "totalCases": "Total Cases",
  "totalClients": "Total Clients",
  "activeCases": "Active Cases",
  "revenue": "Revenue",
  "noRecentActivity": "No recent activity",
  "errorOccurred": "An error occurred",
  "errorPleaseTryAgain": "Please try again",
  "tryAgain": "Try Again",
  "goToHomepage": "Go to Homepage",
  "rolesAndPermissions": "Roles and Permissions",
  "roles": "Roles",
  "permissions": "Permissions",
  "roleName": "Role Name",
  "roleNameRequired": "Role name is required",
  "enterRoleName": "Enter role name",
  "enterRoleDescription": "Enter role description",
  "selectPermissions": "Select permissions",
  "addRole": "Add Role",
  "editRole": "Edit Role",
  "roleCreated": "Role created successfully",
  "roleUpdated": "Role updated successfully",
  "roleDeleted": "Role deleted successfully",
  "confirmDeleteRole": "Delete role?",
  "deleteRoleWarning": "This action cannot be undone. Are you sure?",
  "errorCreatingRole": "Error creating role",
  "errorUpdatingRole": "Error updating role",
  "errorDeletingRole": "Error deleting role",
  "system": "System",
  "permissionName": "Permission Name",
  "category": "Category",
  "descriptionRequired": "Description is required",
  "systemSettings": "System Settings",
  "generalSettings": "General Settings",
  "notificationSettings": "Notification Settings",
  "securitySettings": "Security Settings",
  "backupSettings": "Backup Settings",
  "saveSettings": "Save Settings",
  "settingsSaved": "Settings saved successfully",
  "settingsReset": "Settings reset to default",
  "errorFetchingSettings": "Error fetching settings",
  "errorSavingSettings": "Error saving settings",
  "companyName": "Company Name",
  "companyNameRequired": "Company name is required",
  "enterCompanyName": "Enter company name",
  "timezone": "Timezone",
  "language": "Language",
  "currency": "Currency",
  "emailNotifications": "Email Notifications",
  "pushNotifications": "Push Notifications",
  "notificationTypes": "Notification Types",
  "caseUpdates": "Case Updates",
  "hearingReminders": "Hearing Reminders",
  "invoiceDue": "Invoice Due Dates",
  "twoFactorAuth": "Two-Factor Authentication",
  "sessionTimeout": "Session Timeout",
  "loginAttempts": "Login Attempts",
  "passwordPolicy": "Password Policy",
  "weak": "Weak",
  "medium": "Medium",
  "strong": "Strong",
  "minutes": "minutes",
  "days": "days",
  "autoBackup": "Auto Backup",
  "backupFrequency": "Backup Frequency",
  "backupRetention": "Backup Retention",
  "lastBackup": "Last Backup",
  "backupNow": "Backup Now",
  "backupCreated": "Backup created successfully",
  "errorCreatingBackup": "Error creating backup",
  "hourly": "Hourly",
  "daily": "Daily",
  "weekly": "Weekly",
  "monthly": "Monthly",
  "systemInfo": "System Information",
  "systemStatus": "System Status",
  "version": "Version",
  "lastUpdate": "Last Update",
  "databaseSize": "Database Size",
  "activeUsers": "Active Users",
  "serverTime": "Server Time",
  "database": "Database",
  "api": "API",
  "storage": "Storage",
  "memory": "Memory",
  "online": "Online",
  "quickActions": "Quick Actions",
  "clearCache": "Clear Cache",
  "optimizeDatabase": "Optimize Database",
  "securityScan": "Security Scan",
  "reset": "Reset",
  "integrations": "Integrations",
  "integrationsDescription": "Connect external services to your CRM",
  "integrationsWarning": "Warning: Integrations may access your data. Please review security settings.",
  "integrationConnected": "Integration connected",
  "integrationDisconnected": "Integration disconnected",
  "errorFetchingIntegrations": "Error fetching integrations",
  "errorTogglingIntegration": "Error toggling integration",
  "configure": "Configure",
  "configurationSaved": "Configuration saved",
  "errorSavingConfiguration": "Error saving configuration",
  "apiKey": "API Key",
  "enterApiKey": "Enter API key",
  "webhookUrl": "Webhook URL",
  "enterWebhookUrl": "Enter webhook URL",
  "lastSync": "Last sync",
  "profileSettings": "Profile Settings",
  "manageYourAccountSettings": "Manage your account settings",
  "profile": "Profile",
  "security": "Security",
  "preferences": "Preferences",
  "billing": "Billing",
  "profilePicture": "Profile Picture",
  "changeAvatar": "Change Avatar",
  "avatarUpdated": "Avatar updated",
  "avatarRecommendations": "Recommended image size 200x200 pixels",
  "personalInformation": "Personal Information",
  "position": "Position",
  "bio": "Bio",
  "tellAboutYourself": "Tell about yourself",
  "profileUpdated": "Profile updated",
  "errorUpdatingProfile": "Error updating profile",
  "saveChanges": "Save Changes",
  "changePassword": "Change Password",
  "passwordChanged": "Password changed",
  "errorChangingPassword": "Error changing password",
  "currentPassword": "Current Password",
  "currentPasswordRequired": "Please enter current password",
  "newPassword": "New Password",
  "newPasswordRequired": "Please enter new password",
  "confirmPassword": "Confirm Password",
  "confirmPasswordRequired": "Please confirm new password",
  "twoFactorAuthDescription": "Additional security for your account",
  "loginAlerts": "Login Alerts",
  "loginAlertsDescription": "Get notified about new logins",
  "activeSessions": "Active Sessions",
  "sessionTerminated": "Session terminated",
  "terminate": "Terminate",
  "current": "Current",
  "lastActive": "Last active",
  "languageRegion": "Language & Region",
  "theme": "Theme",
  "auto": "Auto",
  "dateFormat": "Date Format",
  "timeFormat": "Time Format",
  "hour": "hour",
  "notifications": "Notifications",
  "emailNotificationsDescription": "Receive notifications via email",
  "pushNotificationsDescription": "Receive push notifications",
  "desktopNotifications": "Desktop Notifications",
  "desktopNotificationsDescription": "Show notifications on desktop",
  "display": "Display",
  "compactView": "Compact View",
  "compactViewDescription": "Show more information on screen",
  "showTutorials": "Show Tutorials",
  "showTutorialsDescription": "Show educational tips",
  "preferencesSaved": "Preferences saved",
  "errorSavingPreferences": "Error saving preferences",
  "savePreferences": "Save Preferences",
  "currentBalance": "Current Balance",
  "nextBillingDate": "Next Billing Date",
  "plan": "Plan",
  "professional": "Professional",
  "invoiceHistory": "Invoice History",
  "invoiceNumber": "Invoice Number",
  "payNow": "Pay Now",
  "paymentMethods": "Payment Methods",
  "add": "Add",
  "default": "Default",
  "setDefault": "Set Default",
  "expires": "Expires",
  "billingInformation": "Billing Information",
  "addPaymentMethod": "Add Payment Method",
  "cardType": "Card Type",
  "cardTypeRequired": "Please select card type",
  "cardNumber": "Card Number",
  "cardNumberRequired": "Please enter card number",
  "cardNumberLength": "Card number must be 16 digits",
  "expiryDate": "Expiry Date",
  "expiryDateRequired": "Please enter expiry date",
  "cvc": "CVC",
  "cvcRequired": "Please enter CVC code",
  "addCard": "Add Card",
  "paymentMethodAdded": "Payment method added",
  "errorAddingPaymentMethod": "Error adding payment method",
  "knowledgeBase": "Knowledge Base",
  "knowledgeBaseDescription": "Find answers to your questions",
  "searchKnowledgeBase": "Search knowledge base...",
  "categories": "Categories",
  "allCategories": "All Categories",
  "gettingStarted": "Getting Started",
  "popularArticles": "Popular Articles",
  "articles": "Articles",
  "views": "views",
  "lastUpdated": "Last Updated",
  "noArticlesFound": "No articles found",
  "frequentlyAskedQuestions": "Frequently Asked Questions",
  "howToCreateCase": "How to Create a Case",
  "howToCreateCaseContent": "Detailed guide on creating new cases in the system",
  "managingClients": "Managing Clients",
  "managingClientsContent": "How to add and manage clients in CRM",
  "billingAndInvoices": "Billing and Invoices",
  "billingAndInvoicesContent": "Everything about creating invoices and payment management",
  "userPermissions": "User Permissions",
  "userPermissionsContent": "Setting up roles and permissions for the team",
  "timeTracking": "Time Tracking",
  "timeTrackingContent": "How to use time tracker for work hours accounting",
  "howToResetPassword": "How to reset password?",
  "howToResetPasswordAnswer": "Go to security settings and select 'Change Password'",
  "howToExportData": "How to export data?",
  "howToExportDataAnswer": "You can export data from the reports section",
  "howToAddTeamMember": "How to add team member?",
  "howToAddTeamMemberAnswer": "Go to user management and click 'Add User'",
  "howToGenerateReports": "How to generate reports?",
  "howToGenerateReportsAnswer": "Reports are available in the corresponding section with filters and settings",
  "supportTickets": "Support Tickets",
  "newTicket": "New Ticket",
  "ticketHistory": "Ticket History",
  "problemWithCaseCreation": "Problem with case creation",
  "problemWithCaseCreationDescription": "Unable to create new case, getting error when saving",
  "billingQuestion": "Billing question",
  "billingQuestionDescription": "Need help with automatic payment notifications setup",
  "featureRequest": "Feature request",
  "featureRequestDescription": "Would like to have calendar export feature",
  "open": "Open",
  "in_progress": "In Progress",
  "resolved": "Resolved",
  "created": "Created",
  "you": "You",
  "supportTeam": "Support Team",
  "messageRequired": "Please enter message",
  "typeYourMessage": "Type your message...",
  "attachFile": "Attach File",
  "sendMessage": "Send Message",
  "createNewTicket": "Create New Ticket",
  "subject": "Subject",
  "subjectRequired": "Please enter subject",
  "enterSubject": "Enter subject...",
  "describeYourIssue": "Describe your issue in detail...",
  "descriptionRequired": "Please enter description",
  "attachFiles": "Attach Files",
  "createTicket": "Create Ticket",
  "ticketCreated": "Ticket created",
  "errorCreatingTicket": "Error creating ticket",
  "messageSent": "Message sent",
  "errorSendingMessage": "Error sending message",
  "ticketInitialMessage": "Hello! I'm getting an error when creating a new case. After filling all fields and clicking 'Create', the system shows 'Validation failed' error. How to fix this?",
  "supportResponse": "Hello! Thank you for contacting us. To resolve the issue, please check if all required fields are filled correctly. Pay special attention to date format and numeric fields. If the problem persists, please provide a screenshot of the error.",
  "documentTemplates": "Document Templates",
  "documentTemplatesDescription": "Manage document templates for quick creation",
  "emailTemplates": "Email Templates",
  "emailTemplatesDescription": "Manage email templates for communication automation",
  "addTemplate": "Add Template",
  "editTemplate": "Edit Template",
  "templateName": "Template Name",
  "templateNameRequired": "Template name is required",
  "enterTemplateName": "Enter template name",
  "templateContent": "Template Content",
  "templateContentRequired": "Template content is required",
  "enterTemplateContent": "Enter template content...",
  "enterTemplateDescription": "Enter template description",
  "templateCreated": "Template created",
  "templateUpdated": "Template updated",
  "templateDeleted": "Template deleted",
  "templateDuplicated": "Template duplicated",
  "errorCreatingTemplate": "Error creating template",
  "errorUpdatingTemplate": "Error updating template",
  "errorDeletingTemplate": "Error deleting template",
  "errorDuplicatingTemplate": "Error duplicating template",
  "errorFetchingTemplates": "Error fetching templates",
  "confirmDeleteTemplate": "Delete template?",
  "deleteTemplateWarning": "This action cannot be undone. Are you sure?",
  "systemTemplateCannotDelete": "System template cannot be deleted",
  "contracts": "Contracts",
  "lawsuits": "Lawsuits",
  "agreements": "Agreements",
  "motions": "Motions",
  "letters": "Letters",
  "reports": "Reports",
  "clientCommunication": "Client Communication",
  "caseUpdates": "Case Updates",
  "billing": "Billing",
  "meetingReminders": "Meeting Reminders",
  "marketing": "Marketing",
  "system": "System",
  "availableVariables": "Available Variables",
  "clientName": "Client Name",
  "clientEmail": "Client Email",
  "clientAddress": "Client Address",
  "caseNumber": "Case Number",
  "caseTitle": "Case Title",
  "courtName": "Court Name",
  "judgeName": "Judge Name",
  "hearingDate": "Hearing Date",
  "hearingTime": "Hearing Time",
  "amount": "Amount",
  "dueDate": "Due Date",
  "lawyerName": "Lawyer Name",
  "firmName": "Firm Name",
  "firmPhone": "Firm Phone",
  "firmAddress": "Firm Address",
  "currentDate": "Current Date",
  "standardContract": "Standard Contract",
  "standardContractDescription": "Basic template for legal services agreement",
  "standardContractContent": "AGREEMENT No. ___\nfor legal services provision\nKyiv, \"___\" ___________ 202_\n{{firm_name}}, hereinafter referred to as \"Contractor\", represented by {{lawyer_name}}, acting on the basis of _________, on the one hand, and {{client_name}}, hereinafter referred to as \"Client\", on the other hand, have concluded this Agreement as follows:\n1. SUBJECT OF THE AGREEMENT\n1.1. The Contractor undertakes to provide the Client with legal services, and the Client undertakes to pay for these services.\n2. COST OF SERVICES AND PAYMENT PROCEDURE\n2.1. The total cost of services under this Agreement is {{amount}} UAH.\n3. TERM OF THE AGREEMENT\n3.1. This Agreement comes into force from the moment of signing and is valid until \"___\" ___________ 202_.\nSIGNATURES OF THE PARTIES:\nContractor: _________________ {{lawyer_name}}\nClient: ___________________ {{client_name}}",
  "lawsuitComplaint": "Lawsuit Complaint",
  "lawsuitComplaintDescription": "Lawsuit complaint template for civil cases",
  "lawsuitComplaintContent": "To {{court_name}}\nPlaintiff: {{client_name}}\nDefendant: _________________\nLAWSUIT COMPLAINT\n{{case_title}}\nI, {{client_name}}, file this lawsuit complaint regarding _________________.\nCase circumstances: _________________\nBased on the above, guided by articles _________________ of the Civil Procedure Code of Ukraine,\nI REQUEST:\n1. _________________\n2. _________________\nAttachments:\n1. Copy of the lawsuit complaint.\n2. Documents confirming the case circumstances.\n3. Court fee payment receipt.\n\"___\" ___________ 202_ _________________ {{client_name}}",
  "clientAgreement": "Client Agreement",
  "clientAgreementDescription": "Agreement for legal assistance provision",
  "clientAgreementContent": "AGREEMENT\nfor legal assistance provision\n{{current_date}}\n{{firm_name}}, hereinafter referred to as \"Lawyer\", represented by {{lawyer_name}}, on the one hand, and {{client_name}}, hereinafter referred to as \"Client\", on the other hand, have concluded this Agreement:\n1. The Lawyer undertakes to provide the Client with legal assistance regarding: _________________.\n2. The Client undertakes to pay for the legal assistance _________________.\n3. This Agreement comes into force from the moment of signing.\nLAWYER: _________________ {{lawyer_name}}\nCLIENT: ___________________ {{client_name}}",
  "welcomeEmail": "Welcome Email",
  "welcomeEmailSubject": "Welcome to {{firm_name}}",
  "welcomeEmailDescription": "Email for new clients",
  "welcomeEmailBody": "Dear {{client_name}}!\nWelcome to {{firm_name}} law firm!\nWe are glad that you have chosen our services. I, {{lawyer_name}}, will be your primary lawyer and will provide all necessary consultations.\nOur firm specializes in _________________ and has many years of experience in resolving similar issues.\nTo start working, please prepare the following documents:\n- _________________\n- _________________\n- _________________\nIf you have any questions, please don't hesitate to contact us by phone {{firm_phone}} or email.\nBest regards,\n{{lawyer_name}}\n{{firm_name}}\n{{firm_address}}\n{{firm_phone}}",
  "caseUpdateEmail": "Case Update",
  "caseUpdateEmailSubject": "Update on case {{case_number}}",
  "caseUpdateEmailDescription": "Email with case status update",
  "caseUpdateEmailBody": "Dear {{client_name}}!\nWe inform you about the status update of your case {{case_number}} \"{{case_title}}\".\nCurrent status: _________________\nRecent events:\n- _________________\n- _________________\n- _________________\nNext steps:\n- _________________\n- _________________\nIf you have any questions, please contact us.\nBest regards,\n{{lawyer_name}}\n{{firm_name}}",
  "invoiceReminderEmail": "Payment Reminder",
  "invoiceReminderEmailSubject": "Payment Reminder",
  "invoiceReminderEmailDescription": "Payment due date reminder email",
  "invoiceReminderEmailBody": "Dear {{client_name}}!\nWe remind you about the need to pay the invoice for the amount of {{amount}}.\nDue date: {{due_date}}\nPayment details:\n- _________________\n- _________________\n- _________________\nIf you have already made the payment, please ignore this email.\nBest regards,\n{{firm_name}}",
  "hearingReminderEmail": "Hearing Reminder",
  "hearingReminderEmailSubject": "Hearing Reminder {{hearing_date}}",
  "hearingReminderEmailDescription": "Upcoming hearing reminder email",
  "hearingReminderEmailBody": "Dear {{client_name}}!\nWe remind you about the upcoming hearing in case {{case_number}}.\nDate: {{hearing_date}}\nTime: {{hearing_time}}\nCourt: {{court_name}}\nPlease arrive 15 minutes before the hearing starts. Don't forget to bring your ID documents.\nIf you have circumstances preventing your participation in the hearing, please notify us immediately.\nBest regards,\n{{lawyer_name}}\n{{firm_name}}",
  "emailSubject": "Email Subject",
  "emailSubjectRequired": "Email subject is required",
  "enterEmailSubject": "Enter email subject...",
  "emailBody": "Email Body",
  "emailBodyRequired": "Email body is required",
  "enterEmailBody": "Enter email body...",
  "preview": "Preview",
  "sendTest": "Send Test",
  "testEmailSent": "Test email sent",
  "errorSendingTestEmail": "Error sending test email",
  "templateActivated": "Template activated",
  "templateDeactivated": "Template deactivated",
  "errorTogglingTemplate": "Error toggling template status",
  "copy": "copy",
  "pageTitle": {
    "dashboard": "Dashboard - Lawyer CRM",
    "cases": "Cases - Lawyer CRM",
    "clients": "Clients - Lawyer CRM",
    "login": "Login - Lawyer CRM"
  }
}