services:
  db:
    image: postgres:16-alpine
    container_name: lawyer_crm_db_prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backend/init-db:/docker-entrypoint-initdb.d
      - ./backend/postgresql.conf:/etc/postgresql/postgresql.conf
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      postgres 
      -c config_file=/etc/postgresql/postgresql.conf
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
    networks:
      - lawyer-crm-network

  redis:
    image: redis:7-alpine
    container_name: lawyer_crm_redis_prod
    restart: unless-stopped
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD}
      --save 60 1000
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --maxmemory-samples 5
      --tcp-keepalive 300
      --timeout 0
    volumes:
      - redis_data_prod:/data
      - ./backend/redis.conf:/etc/redis/redis.conf
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - lawyer-crm-network

  minio:
    image: minio/minio:latest
    container_name: lawyer_crm_minio_prod
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data_prod:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - lawyer-crm-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - BUILD_ENVIRONMENT=production
    container_name: lawyer_crm_backend_prod
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: ${DATABASE_URL}
      # Redis
      REDIS_URL: ${REDIS_URL}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      # MinIO
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_BUCKET: ${MINIO_BUCKET}
      MINIO_SECURE: ${MINIO_SECURE}
      # Security
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: ${ALGORITHM}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}
      REFRESH_TOKEN_EXPIRE_DAYS: ${REFRESH_TOKEN_EXPIRE_DAYS}
      # CORS
      CORS_ORIGINS: ${CORS_ORIGINS}
      # Environment
      ENVIRONMENT: ${ENVIRONMENT}
      DEBUG: ${DEBUG}
      HOST: ${HOST}
      PORT: ${PORT}
      LOG_LEVEL: ${LOG_LEVEL}
      # SMTP
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      EMAIL_FROM: ${EMAIL_FROM}
      EMAIL_TEMPLATES_DIR: ${EMAIL_TEMPLATES_DIR}
      # Celery
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
      # Monitoring
      PROMETHEUS_MULTIPROC_DIR: ${PROMETHEUS_MULTIPROC_DIR}
      METRICS_ENABLED: ${METRICS_ENABLED}
      # Додаткові налаштування
      UPLOAD_MAX_FILE_SIZE: ${UPLOAD_MAX_FILE_SIZE}
      SESSION_TIMEOUT: ${SESSION_TIMEOUT}
      PASSWORD_RESET_TIMEOUT: ${PASSWORD_RESET_TIMEOUT}
    volumes:
      - ./backend:/app
      - ./backend/logs:/app/logs
      - ./backend/static:/app/static
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - lawyer-crm-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: lawyer_crm_frontend_prod
    restart: unless-stopped
    depends_on:
      - backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./frontend/ssl:/etc/nginx/ssl
    environment:
      - VITE_API_URL=http://backend:8000/api/v1
      - GENERATE_SOURCEMAP=false
      - DISABLE_ESLINT_PLUGIN=true
      - INLINE_RUNTIME_CHUNK=false
    networks:
      - lawyer-crm-network

  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: lawyer_crm_celery_worker_prod
    restart: unless-stopped
    command: celery -A src.celery worker --loglevel=info --concurrency=4
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
    volumes:
      - ./backend:/app
    depends_on:
      - db
      - redis
    networks:
      - lawyer-crm-network

  prometheus:
    image: prom/prometheus:latest
    container_name: lawyer_crm_prometheus_prod
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data_prod:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - lawyer-crm-network

  grafana:
    image: grafana/grafana:latest
    container_name: lawyer_crm_grafana_prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data_prod:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - lawyer-crm-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: lawyer_crm_elasticsearch_prod
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch_data_prod:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - lawyer-crm-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: lawyer_crm_logstash_prod
    restart: unless-stopped
    volumes:
      - ./logging/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./backend/logs:/var/log/backend
    depends_on:
      - elasticsearch
    networks:
      - lawyer-crm-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: lawyer_crm_kibana_prod
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - lawyer-crm-network

  nginx:
    image: nginx:stable-alpine
    container_name: lawyer_crm_nginx_prod
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - backend
      - frontend
    networks:
      - lawyer-crm-network

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  minio_data_prod:
    driver: local
  prometheus_data_prod:
    driver: local
  grafana_data_prod:
    driver: local
  elasticsearch_data_prod:
    driver: local

networks:
  lawyer-crm-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16