from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy.pool import NullPool  # ‚úÖ –°—É–º—ñ—Å–Ω–∏–π –∑ asyncio
from contextlib import asynccontextmanager
from typing import AsyncGenerator, TypeVar, Generic, Type, Optional, List
from sqlalchemy.future import select
import logging

logger = logging.getLogger(__name__)

# üî• –ì–ª–æ–±–∞–ª—å–Ω–∏–π Base –¥–ª—è –º–æ–¥–µ–ª–µ–π
Base = declarative_base()

# üî• –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
engine = None
AsyncSessionLocal = None


class DatabaseManager:
    def __init__(self):
        self._async_engine = None
        self._async_session_local = None

    def init_db(self, database_url: str):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î"""
        global engine, AsyncSessionLocal

        if not database_url.startswith("postgresql+asyncpg"):
            logger.warning("DATABASE_URL –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î asyncpg. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ –≤–∫–∞–∑–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –¥—Ä–∞–π–≤–µ—Ä.")

        self._async_engine = create_async_engine(
            database_url,
            poolclass=NullPool,  # ‚úÖ –ë–µ–∑–ø–µ—á–Ω–∏–π –ø—É–ª –¥–ª—è asyncio
            echo=False,
        )

        self._async_session_local = sessionmaker(
            bind=self._async_engine,
            class_=AsyncSession,
            expire_on_commit=False,
            autocommit=False,
            autoflush=False,
        )

        engine = self._async_engine
        AsyncSessionLocal = self._async_session_local
        logger.info("‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.")

    @property
    def async_engine(self):
        if self._async_engine is None:
            raise RuntimeError("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞. –°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–ª–∏—á init_db().")
        return self._async_engine

    @property
    def async_session_local(self):
        if self._async_session_local is None:
            raise RuntimeError("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞. –°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–ª–∏—á init_db().")
        return self._async_session_local

    @asynccontextmanager
    async def get_async_db(self) -> AsyncGenerator[AsyncSession, None]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Å—ñ—ó –ë–î"""
        if self._async_session_local is None:
            raise RuntimeError("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞. –°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–ª–∏—á init_db().")

        async with self._async_session_local() as session:
            try:
                yield session
                await session.commit()
            except Exception:
                await session.rollback()
                logger.exception("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–±–æ—Ç–∏ –∑ —Å–µ—Å—ñ—î—é –ë–î")
                raise
            finally:
                await session.close()


# -----------------------------
# üî• –ë–∞–∑–æ–≤–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π –¥–ª—è CRUD
# -----------------------------
ModelType = TypeVar("ModelType")


class BaseRepository(Generic[ModelType]):
    """–ë–∞–∑–æ–≤–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π –¥–ª—è CRUD-–æ–ø–µ—Ä–∞—Ü—ñ–π"""
    def __init__(self, model: Type[ModelType], db: AsyncSession):
        self.model = model
        self.db = db

    async def get_by_id(self, id) -> Optional[ModelType]:
        result = await self.db.execute(select(self.model).where(self.model.id == id))
        return result.scalar_one_or_none()

    async def get_all(self) -> List[ModelType]:
        result = await self.db.execute(select(self.model))
        return result.scalars().all()

    async def create(self, obj: ModelType) -> ModelType:
        self.db.add(obj)
        await self.db.commit()
        await self.db.refresh(obj)
        return obj

    async def delete(self, obj: ModelType) -> None:
        await self.db.delete(obj)
        await self.db.commit()


# -----------------------------
# üî• –§—É–Ω–∫—Ü—ñ—è –¥–ª—è FastAPI Depends
# -----------------------------
async def get_db() -> AsyncGenerator[AsyncSession, None]:
    async with db_manager.get_async_db() as session:
        yield session


# -----------------------------
# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ë–î
# -----------------------------
db_manager = DatabaseManager()